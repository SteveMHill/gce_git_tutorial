{
  "resolvedId": "/Users/stevenhill/gce_git_tutorial/node_modules/yaml/browser/dist/nodes/Collection.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createNode } from '../doc/createNode.js';\nimport { isNode, isPair, isCollection, isScalar } from './identity.js';\nimport { NodeBase } from './Node.js';\n\nfunction collectionFromPath(schema, path, value) {\n    let v = value;\n    for (let i = path.length - 1; i >= 0; --i) {\n        const k = path[i];\n        if (typeof k === 'number' && Number.isInteger(k) && k >= 0) {\n            const a = [];\n            a[k] = v;\n            v = a;\n        }\n        else {\n            v = new Map([[k, v]]);\n        }\n    }\n    return createNode(v, undefined, {\n        aliasDuplicateObjects: false,\n        keepUndefined: false,\n        onAnchor: () => {\n            throw new Error('This should not happen, please report a bug.');\n        },\n        schema,\n        sourceObjects: new Map()\n    });\n}\n// Type guard is intentionally a little wrong so as to be more useful,\n// as it does not cover untypable empty non-string iterables (e.g. []).\nconst isEmptyPath = (path) => path == null ||\n    (typeof path === 'object' && !!path[Symbol.iterator]().next().done);\nclass Collection extends NodeBase {\n    constructor(type, schema) {\n        super(type);\n        Object.defineProperty(this, 'schema', {\n            value: schema,\n            configurable: true,\n            enumerable: false,\n            writable: true\n        });\n    }\n    /**\n     * Create a copy of this collection.\n     *\n     * @param schema - If defined, overwrites the original's schema\n     */\n    clone(schema) {\n        const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));\n        if (schema)\n            copy.schema = schema;\n        copy.items = copy.items.map(it => isNode(it) || isPair(it) ? it.clone(schema) : it);\n        if (this.range)\n            copy.range = this.range.slice();\n        return copy;\n    }\n    /**\n     * Adds a value to the collection. For `!!map` and `!!omap` the value must\n     * be a Pair instance or a `{ key, value }` object, which may not have a key\n     * that already exists in the map.\n     */\n    addIn(path, value) {\n        if (isEmptyPath(path))\n            this.add(value);\n        else {\n            const [key, ...rest] = path;\n            const node = this.get(key, true);\n            if (isCollection(node))\n                node.addIn(rest, value);\n            else if (node === undefined && this.schema)\n                this.set(key, collectionFromPath(this.schema, rest, value));\n            else\n                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n        }\n    }\n    /**\n     * Removes a value from the collection.\n     * @returns `true` if the item was found and removed.\n     */\n    deleteIn(path) {\n        const [key, ...rest] = path;\n        if (rest.length === 0)\n            return this.delete(key);\n        const node = this.get(key, true);\n        if (isCollection(node))\n            return node.deleteIn(rest);\n        else\n            throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n    }\n    /**\n     * Returns item at `key`, or `undefined` if not found. By default unwraps\n     * scalar values from their surrounding node; to disable set `keepScalar` to\n     * `true` (collections are always returned intact).\n     */\n    getIn(path, keepScalar) {\n        const [key, ...rest] = path;\n        const node = this.get(key, true);\n        if (rest.length === 0)\n            return !keepScalar && isScalar(node) ? node.value : node;\n        else\n            return isCollection(node) ? node.getIn(rest, keepScalar) : undefined;\n    }\n    hasAllNullValues(allowScalar) {\n        return this.items.every(node => {\n            if (!isPair(node))\n                return false;\n            const n = node.value;\n            return (n == null ||\n                (allowScalar &&\n                    isScalar(n) &&\n                    n.value == null &&\n                    !n.commentBefore &&\n                    !n.comment &&\n                    !n.tag));\n        });\n    }\n    /**\n     * Checks if the collection includes a value with the key `key`.\n     */\n    hasIn(path) {\n        const [key, ...rest] = path;\n        if (rest.length === 0)\n            return this.has(key);\n        const node = this.get(key, true);\n        return isCollection(node) ? node.hasIn(rest) : false;\n    }\n    /**\n     * Sets a value in this collection. For `!!set`, `value` needs to be a\n     * boolean to add/remove the item from the set.\n     */\n    setIn(path, value) {\n        const [key, ...rest] = path;\n        if (rest.length === 0) {\n            this.set(key, value);\n        }\n        else {\n            const node = this.get(key, true);\n            if (isCollection(node))\n                node.setIn(rest, value);\n            else if (node === undefined && this.schema)\n                this.set(key, collectionFromPath(this.schema, rest, value));\n            else\n                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n        }\n    }\n}\n\nexport { Collection, collectionFromPath, isEmptyPath };\n",
      "start": 1743409708641,
      "end": 1743409708650,
      "sourcemaps": null
    },
    {
      "name": "unplugin-vue-markdown",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "pre"
    },
    {
      "name": "slidev:flags",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "pre"
    },
    {
      "name": "unocss:transformers:pre",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "pre"
    },
    {
      "name": "unocss:global:build:scan",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "normal"
    },
    {
      "name": "slidev:layout-wrapper",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "normal"
    },
    {
      "name": "slidev:context-injection",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "normal"
    },
    {
      "name": "slidev:hmr-patch",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:undefined",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "normal"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "post"
    },
    {
      "name": "unocss:transformers:post",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "normal"
    }
  ]
}
