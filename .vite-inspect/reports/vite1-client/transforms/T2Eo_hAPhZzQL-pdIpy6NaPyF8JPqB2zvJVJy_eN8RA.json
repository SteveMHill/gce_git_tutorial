{
  "resolvedId": "/Users/stevenhill/gce_git_tutorial/node_modules/unhead/dist/shared/unhead.Txd0XTIP.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createHooks } from 'hookable';\nimport { n as normalizeEntryToTags, d as dedupeKey, i as isMetaArrayDupeKey } from './unhead.Cp0iF6eN.mjs';\nimport { t as tagWeight, s as sortTags } from './unhead.DZbvapt-.mjs';\nimport { c as UsesMergeStrategy, V as ValidHeadTags } from './unhead.yem5I2v_.mjs';\n\nfunction registerPlugin(head, p) {\n  const plugin = typeof p === \"function\" ? p(head) : p;\n  const key = plugin.key || String(head.plugins.size + 1);\n  const exists = head.plugins.get(key);\n  if (!exists) {\n    head.plugins.set(key, plugin);\n    head.hooks.addHooks(plugin.hooks || {});\n  }\n}\n// @__NO_SIDE_EFFECTS__\nfunction createHeadCore(resolvedOptions = {}) {\n  return /* @__PURE__ */ createUnhead(resolvedOptions);\n}\n// @__NO_SIDE_EFFECTS__\nfunction createUnhead(resolvedOptions = {}) {\n  const hooks = createHooks();\n  hooks.addHooks(resolvedOptions.hooks || {});\n  const ssr = !resolvedOptions.document;\n  const entries = /* @__PURE__ */ new Map();\n  const plugins = /* @__PURE__ */ new Map();\n  const normalizeQueue = [];\n  const head = {\n    _entryCount: 1,\n    // 0 is reserved for internal use\n    plugins,\n    dirty: false,\n    resolvedOptions,\n    hooks,\n    ssr,\n    entries,\n    headEntries() {\n      return [...entries.values()];\n    },\n    use: (p) => registerPlugin(head, p),\n    push(input, _options) {\n      const options = { ..._options || {} };\n      delete options.head;\n      const _i = options._index ?? head._entryCount++;\n      const inst = { _i, input, options };\n      const _ = {\n        _poll(rm = false) {\n          head.dirty = true;\n          !rm && normalizeQueue.push(_i);\n          hooks.callHook(\"entries:updated\", head);\n        },\n        dispose() {\n          if (entries.delete(_i)) {\n            _._poll(true);\n          }\n        },\n        // a patch is the same as creating a new entry, just a nice DX\n        patch(input2) {\n          if (!options.mode || options.mode === \"server\" && ssr || options.mode === \"client\" && !ssr) {\n            inst.input = input2;\n            entries.set(_i, inst);\n            _._poll();\n          }\n        }\n      };\n      _.patch(input);\n      return _;\n    },\n    async resolveTags() {\n      const ctx = {\n        tagMap: /* @__PURE__ */ new Map(),\n        tags: [],\n        entries: [...head.entries.values()]\n      };\n      await hooks.callHook(\"entries:resolve\", ctx);\n      while (normalizeQueue.length) {\n        const i = normalizeQueue.shift();\n        const e = entries.get(i);\n        if (e) {\n          const normalizeCtx = {\n            tags: normalizeEntryToTags(e.input, resolvedOptions.propResolvers || []).map((t) => Object.assign(t, e.options)),\n            entry: e\n          };\n          await hooks.callHook(\"entries:normalize\", normalizeCtx);\n          e._tags = normalizeCtx.tags.map((t, i2) => {\n            t._w = tagWeight(head, t);\n            t._p = (e._i << 10) + i2;\n            t._d = dedupeKey(t);\n            return t;\n          });\n        }\n      }\n      let hasFlatMeta = false;\n      ctx.entries.flatMap((e) => (e._tags || []).map((t) => ({ ...t, props: { ...t.props } }))).sort(sortTags).reduce((acc, next) => {\n        const k = String(next._d || next._p);\n        if (!acc.has(k))\n          return acc.set(k, next);\n        const prev = acc.get(k);\n        const strategy = next?.tagDuplicateStrategy || (UsesMergeStrategy.has(next.tag) ? \"merge\" : null) || (next.key && next.key === prev.key ? \"merge\" : null);\n        if (strategy === \"merge\") {\n          const newProps = { ...prev.props };\n          Object.entries(next.props).forEach(([p, v]) => (\n            // @ts-expect-error untyped\n            newProps[p] = p === \"style\" ? new Map([...prev.props.style || /* @__PURE__ */ new Map(), ...v]) : p === \"class\" ? /* @__PURE__ */ new Set([...prev.props.class || /* @__PURE__ */ new Set(), ...v]) : v\n          ));\n          acc.set(k, { ...next, props: newProps });\n        } else if (next._p >> 10 === prev._p >> 10 && isMetaArrayDupeKey(next._d)) {\n          acc.set(k, Object.assign([...Array.isArray(prev) ? prev : [prev], next], next));\n          hasFlatMeta = true;\n        } else if (next._w === prev._w ? next._p > prev._p : next?._w < prev?._w) {\n          acc.set(k, next);\n        }\n        return acc;\n      }, ctx.tagMap);\n      const title = ctx.tagMap.get(\"title\");\n      const titleTemplate = ctx.tagMap.get(\"titleTemplate\");\n      head._title = title?.textContent;\n      if (titleTemplate) {\n        const titleTemplateFn = titleTemplate?.textContent;\n        head._titleTemplate = typeof titleTemplateFn === \"string\" ? titleTemplateFn : void 0;\n        if (titleTemplateFn) {\n          let newTitle = typeof titleTemplateFn === \"function\" ? titleTemplateFn(title?.textContent) : titleTemplateFn;\n          if (typeof newTitle === \"string\" && !head.plugins.has(\"template-params\")) {\n            newTitle = newTitle.replace(\"%s\", title?.textContent || \"\");\n          }\n          if (title) {\n            newTitle === null ? ctx.tagMap.delete(\"title\") : ctx.tagMap.set(\"title\", { ...title, textContent: newTitle });\n          } else {\n            titleTemplate.tag = \"title\";\n            titleTemplate.textContent = newTitle;\n          }\n        }\n      }\n      ctx.tags = Array.from(ctx.tagMap.values());\n      if (hasFlatMeta) {\n        ctx.tags = ctx.tags.flat().sort(sortTags);\n      }\n      await hooks.callHook(\"tags:beforeResolve\", ctx);\n      await hooks.callHook(\"tags:resolve\", ctx);\n      await hooks.callHook(\"tags:afterResolve\", ctx);\n      const finalTags = [];\n      for (const t of ctx.tags) {\n        const { innerHTML, tag, props } = t;\n        if (!ValidHeadTags.has(tag)) {\n          continue;\n        }\n        if (Object.keys(props).length === 0 && !t.innerHTML && !t.textContent) {\n          continue;\n        }\n        if (tag === \"meta\" && !props.content && !props[\"http-equiv\"] && !props.charset) {\n          continue;\n        }\n        if (tag === \"script\" && innerHTML) {\n          if (props.type?.endsWith(\"json\")) {\n            const v = typeof innerHTML === \"string\" ? innerHTML : JSON.stringify(innerHTML);\n            t.innerHTML = v.replace(/</g, \"\\\\u003C\");\n          } else if (typeof innerHTML === \"string\") {\n            t.innerHTML = innerHTML.replace(new RegExp(`</${tag}`, \"g\"), `<\\\\/${tag}`);\n          }\n          t._d = dedupeKey(t);\n        }\n        finalTags.push(t);\n      }\n      return finalTags;\n    }\n  };\n  (resolvedOptions?.plugins || []).forEach((p) => registerPlugin(head, p));\n  head.hooks.callHook(\"init\", head);\n  resolvedOptions.init?.forEach((e) => e && head.push(e));\n  return head;\n}\n\nexport { createUnhead as a, createHeadCore as c };\n",
      "start": 1743409708452,
      "end": 1743409708453,
      "sourcemaps": null
    },
    {
      "name": "unplugin-vue-markdown",
      "start": 1743409708453,
      "end": 1743409708453,
      "order": "pre"
    },
    {
      "name": "slidev:flags",
      "start": 1743409708453,
      "end": 1743409708453,
      "order": "pre"
    },
    {
      "name": "unocss:transformers:pre",
      "start": 1743409708453,
      "end": 1743409708453,
      "order": "pre"
    },
    {
      "name": "unocss:global:build:scan",
      "start": 1743409708453,
      "end": 1743409708453,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1743409708453,
      "end": 1743409708453,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1743409708453,
      "end": 1743409708453,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1743409708453,
      "end": 1743409708453,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1743409708453,
      "end": 1743409708453,
      "order": "normal"
    },
    {
      "name": "slidev:layout-wrapper",
      "start": 1743409708453,
      "end": 1743409708453,
      "order": "normal"
    },
    {
      "name": "slidev:context-injection",
      "start": 1743409708453,
      "end": 1743409708453,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1743409708453,
      "end": 1743409708453,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1743409708453,
      "end": 1743409708453,
      "order": "normal"
    },
    {
      "name": "slidev:hmr-patch",
      "start": 1743409708453,
      "end": 1743409708453,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:undefined",
      "start": 1743409708453,
      "end": 1743409708453,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1743409708453,
      "end": 1743409708453,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1743409708453,
      "end": 1743409708453,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1743409708453,
      "end": 1743409708453,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1743409708453,
      "end": 1743409708453,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1743409708453,
      "end": 1743409708453,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1743409708453,
      "end": 1743409708453,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1743409708453,
      "end": 1743409708453,
      "order": "normal"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1743409708453,
      "end": 1743409708453,
      "order": "post"
    },
    {
      "name": "unocss:transformers:post",
      "start": 1743409708453,
      "end": 1743409708453,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1743409708453,
      "end": 1743409708453,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1743409708453,
      "end": 1743409708453,
      "order": "normal"
    }
  ]
}
