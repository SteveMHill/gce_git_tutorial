{
  "resolvedId": "\u0000vite/preload-helper.js",
  "transforms": [
    {
      "name": "vite:build-import-analysis",
      "result": "const scriptRel = 'modulepreload';const assetsURL = function(dep) { return \"/\"+dep };const seen = {};export const __vitePreload = function preload(baseModule, deps, importerUrl) {\n  let promise = Promise.resolve();\n  if (__VITE_IS_MODERN__ && deps && deps.length > 0) {\n    const links = document.getElementsByTagName(\"link\");\n    const cspNonceMeta = document.querySelector(\n      \"meta[property=csp-nonce]\"\n    );\n    const cspNonce = cspNonceMeta?.nonce || cspNonceMeta?.getAttribute(\"nonce\");\n    promise = Promise.allSettled(\n      deps.map((dep) => {\n        dep = assetsURL(dep, importerUrl);\n        if (dep in seen) return;\n        seen[dep] = true;\n        const isCss = dep.endsWith(\".css\");\n        const cssSelector = isCss ? '[rel=\"stylesheet\"]' : \"\";\n        const isBaseRelative = !!importerUrl;\n        if (isBaseRelative) {\n          for (let i = links.length - 1; i >= 0; i--) {\n            const link2 = links[i];\n            if (link2.href === dep && (!isCss || link2.rel === \"stylesheet\")) {\n              return;\n            }\n          }\n        } else if (document.querySelector(`link[href=\"${dep}\"]${cssSelector}`)) {\n          return;\n        }\n        const link = document.createElement(\"link\");\n        link.rel = isCss ? \"stylesheet\" : scriptRel;\n        if (!isCss) {\n          link.as = \"script\";\n        }\n        link.crossOrigin = \"\";\n        link.href = dep;\n        if (cspNonce) {\n          link.setAttribute(\"nonce\", cspNonce);\n        }\n        document.head.appendChild(link);\n        if (isCss) {\n          return new Promise((res, rej) => {\n            link.addEventListener(\"load\", res);\n            link.addEventListener(\n              \"error\",\n              () => rej(new Error(`Unable to preload CSS for ${dep}`))\n            );\n          });\n        }\n      })\n    );\n  }\n  function handlePreloadError(err) {\n    const e = new Event(\"vite:preloadError\", {\n      cancelable: true\n    });\n    e.payload = err;\n    window.dispatchEvent(e);\n    if (!e.defaultPrevented) {\n      throw err;\n    }\n  }\n  return promise.then((res) => {\n    for (const item of res || []) {\n      if (item.status !== \"rejected\") continue;\n      handlePreloadError(item.reason);\n    }\n    return baseModule().catch(handlePreloadError);\n  });\n}",
      "start": 1743409708498,
      "end": 1743409708498
    }
  ]
}
