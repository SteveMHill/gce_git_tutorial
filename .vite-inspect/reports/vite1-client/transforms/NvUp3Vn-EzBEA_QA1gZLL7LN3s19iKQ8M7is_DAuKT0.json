{
  "resolvedId": "/Users/stevenhill/gce_git_tutorial/node_modules/mermaid/dist/chunks/mermaid.esm/diagram-BIPOGRU5.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import {\n  populateCommonDb\n} from \"./chunk-K2ZEYYM2.mjs\";\nimport {\n  parse\n} from \"./chunk-XIYN7VYH.mjs\";\nimport \"./chunk-SDBY772Q.mjs\";\nimport \"./chunk-CCYIEPPW.mjs\";\nimport \"./chunk-OTG2ZAWT.mjs\";\nimport \"./chunk-7JTU5PD2.mjs\";\nimport {\n  selectSvgElement\n} from \"./chunk-YIX7P6T4.mjs\";\nimport {\n  cleanAndMerge\n} from \"./chunk-YFKFDTKC.mjs\";\nimport \"./chunk-GKOISANM.mjs\";\nimport {\n  clear,\n  configureSvgSize,\n  defaultConfig_default,\n  getAccDescription,\n  getAccTitle,\n  getConfig,\n  getDiagramTitle,\n  log,\n  setAccDescription,\n  setAccTitle,\n  setDiagramTitle\n} from \"./chunk-3L32CQKD.mjs\";\nimport \"./chunk-GTV5PL3S.mjs\";\nimport \"./chunk-4AQQYWZS.mjs\";\nimport \"./chunk-R4WPHL2B.mjs\";\nimport \"./chunk-TGZYFRKZ.mjs\";\nimport \"./chunk-GRZAG2UZ.mjs\";\nimport \"./chunk-HD3LK5B5.mjs\";\nimport {\n  __name\n} from \"./chunk-DLQEHMXD.mjs\";\n\n// src/diagrams/packet/db.ts\nvar defaultPacketData = {\n  packet: []\n};\nvar data = structuredClone(defaultPacketData);\nvar DEFAULT_PACKET_CONFIG = defaultConfig_default.packet;\nvar getConfig2 = /* @__PURE__ */ __name(() => {\n  const config = cleanAndMerge({\n    ...DEFAULT_PACKET_CONFIG,\n    ...getConfig().packet\n  });\n  if (config.showBits) {\n    config.paddingY += 10;\n  }\n  return config;\n}, \"getConfig\");\nvar getPacket = /* @__PURE__ */ __name(() => data.packet, \"getPacket\");\nvar pushWord = /* @__PURE__ */ __name((word) => {\n  if (word.length > 0) {\n    data.packet.push(word);\n  }\n}, \"pushWord\");\nvar clear2 = /* @__PURE__ */ __name(() => {\n  clear();\n  data = structuredClone(defaultPacketData);\n}, \"clear\");\nvar db = {\n  pushWord,\n  getPacket,\n  getConfig: getConfig2,\n  clear: clear2,\n  setAccTitle,\n  getAccTitle,\n  setDiagramTitle,\n  getDiagramTitle,\n  getAccDescription,\n  setAccDescription\n};\n\n// src/diagrams/packet/parser.ts\nvar maxPacketSize = 1e4;\nvar populate = /* @__PURE__ */ __name((ast) => {\n  populateCommonDb(ast, db);\n  let lastByte = -1;\n  let word = [];\n  let row = 1;\n  const { bitsPerRow } = db.getConfig();\n  for (let { start, end, label } of ast.blocks) {\n    if (end && end < start) {\n      throw new Error(`Packet block ${start} - ${end} is invalid. End must be greater than start.`);\n    }\n    if (start !== lastByte + 1) {\n      throw new Error(\n        `Packet block ${start} - ${end ?? start} is not contiguous. It should start from ${lastByte + 1}.`\n      );\n    }\n    lastByte = end ?? start;\n    log.debug(`Packet block ${start} - ${lastByte} with label ${label}`);\n    while (word.length <= bitsPerRow + 1 && db.getPacket().length < maxPacketSize) {\n      const [block, nextBlock] = getNextFittingBlock({ start, end, label }, row, bitsPerRow);\n      word.push(block);\n      if (block.end + 1 === row * bitsPerRow) {\n        db.pushWord(word);\n        word = [];\n        row++;\n      }\n      if (!nextBlock) {\n        break;\n      }\n      ({ start, end, label } = nextBlock);\n    }\n  }\n  db.pushWord(word);\n}, \"populate\");\nvar getNextFittingBlock = /* @__PURE__ */ __name((block, row, bitsPerRow) => {\n  if (block.end === void 0) {\n    block.end = block.start;\n  }\n  if (block.start > block.end) {\n    throw new Error(`Block start ${block.start} is greater than block end ${block.end}.`);\n  }\n  if (block.end + 1 <= row * bitsPerRow) {\n    return [block, void 0];\n  }\n  return [\n    {\n      start: block.start,\n      end: row * bitsPerRow - 1,\n      label: block.label\n    },\n    {\n      start: row * bitsPerRow,\n      end: block.end,\n      label: block.label\n    }\n  ];\n}, \"getNextFittingBlock\");\nvar parser = {\n  parse: /* @__PURE__ */ __name(async (input) => {\n    const ast = await parse(\"packet\", input);\n    log.debug(ast);\n    populate(ast);\n  }, \"parse\")\n};\n\n// src/diagrams/packet/renderer.ts\nvar draw = /* @__PURE__ */ __name((_text, id, _version, diagram2) => {\n  const db2 = diagram2.db;\n  const config = db2.getConfig();\n  const { rowHeight, paddingY, bitWidth, bitsPerRow } = config;\n  const words = db2.getPacket();\n  const title = db2.getDiagramTitle();\n  const totalRowHeight = rowHeight + paddingY;\n  const svgHeight = totalRowHeight * (words.length + 1) - (title ? 0 : rowHeight);\n  const svgWidth = bitWidth * bitsPerRow + 2;\n  const svg = selectSvgElement(id);\n  svg.attr(\"viewbox\", `0 0 ${svgWidth} ${svgHeight}`);\n  configureSvgSize(svg, svgHeight, svgWidth, config.useMaxWidth);\n  for (const [word, packet] of words.entries()) {\n    drawWord(svg, packet, word, config);\n  }\n  svg.append(\"text\").text(title).attr(\"x\", svgWidth / 2).attr(\"y\", svgHeight - totalRowHeight / 2).attr(\"dominant-baseline\", \"middle\").attr(\"text-anchor\", \"middle\").attr(\"class\", \"packetTitle\");\n}, \"draw\");\nvar drawWord = /* @__PURE__ */ __name((svg, word, rowNumber, { rowHeight, paddingX, paddingY, bitWidth, bitsPerRow, showBits }) => {\n  const group = svg.append(\"g\");\n  const wordY = rowNumber * (rowHeight + paddingY) + paddingY;\n  for (const block of word) {\n    const blockX = block.start % bitsPerRow * bitWidth + 1;\n    const width = (block.end - block.start + 1) * bitWidth - paddingX;\n    group.append(\"rect\").attr(\"x\", blockX).attr(\"y\", wordY).attr(\"width\", width).attr(\"height\", rowHeight).attr(\"class\", \"packetBlock\");\n    group.append(\"text\").attr(\"x\", blockX + width / 2).attr(\"y\", wordY + rowHeight / 2).attr(\"class\", \"packetLabel\").attr(\"dominant-baseline\", \"middle\").attr(\"text-anchor\", \"middle\").text(block.label);\n    if (!showBits) {\n      continue;\n    }\n    const isSingleBlock = block.end === block.start;\n    const bitNumberY = wordY - 2;\n    group.append(\"text\").attr(\"x\", blockX + (isSingleBlock ? width / 2 : 0)).attr(\"y\", bitNumberY).attr(\"class\", \"packetByte start\").attr(\"dominant-baseline\", \"auto\").attr(\"text-anchor\", isSingleBlock ? \"middle\" : \"start\").text(block.start);\n    if (!isSingleBlock) {\n      group.append(\"text\").attr(\"x\", blockX + width).attr(\"y\", bitNumberY).attr(\"class\", \"packetByte end\").attr(\"dominant-baseline\", \"auto\").attr(\"text-anchor\", \"end\").text(block.end);\n    }\n  }\n}, \"drawWord\");\nvar renderer = { draw };\n\n// src/diagrams/packet/styles.ts\nvar defaultPacketStyleOptions = {\n  byteFontSize: \"10px\",\n  startByteColor: \"black\",\n  endByteColor: \"black\",\n  labelColor: \"black\",\n  labelFontSize: \"12px\",\n  titleColor: \"black\",\n  titleFontSize: \"14px\",\n  blockStrokeColor: \"black\",\n  blockStrokeWidth: \"1\",\n  blockFillColor: \"#efefef\"\n};\nvar styles = /* @__PURE__ */ __name(({ packet } = {}) => {\n  const options = cleanAndMerge(defaultPacketStyleOptions, packet);\n  return `\n\t.packetByte {\n\t\tfont-size: ${options.byteFontSize};\n\t}\n\t.packetByte.start {\n\t\tfill: ${options.startByteColor};\n\t}\n\t.packetByte.end {\n\t\tfill: ${options.endByteColor};\n\t}\n\t.packetLabel {\n\t\tfill: ${options.labelColor};\n\t\tfont-size: ${options.labelFontSize};\n\t}\n\t.packetTitle {\n\t\tfill: ${options.titleColor};\n\t\tfont-size: ${options.titleFontSize};\n\t}\n\t.packetBlock {\n\t\tstroke: ${options.blockStrokeColor};\n\t\tstroke-width: ${options.blockStrokeWidth};\n\t\tfill: ${options.blockFillColor};\n\t}\n\t`;\n}, \"styles\");\n\n// src/diagrams/packet/diagram.ts\nvar diagram = {\n  parser,\n  db,\n  renderer,\n  styles\n};\nexport {\n  diagram\n};\n",
      "start": 1743409709075,
      "end": 1743409709193,
      "sourcemaps": null
    },
    {
      "name": "unplugin-vue-markdown",
      "start": 1743409709193,
      "end": 1743409709193,
      "order": "pre"
    },
    {
      "name": "slidev:flags",
      "start": 1743409709193,
      "end": 1743409709193,
      "order": "pre"
    },
    {
      "name": "unocss:transformers:pre",
      "start": 1743409709193,
      "end": 1743409709194,
      "order": "pre"
    },
    {
      "name": "unocss:global:build:scan",
      "start": 1743409709194,
      "end": 1743409709194,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1743409709194,
      "end": 1743409709194,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1743409709194,
      "end": 1743409709194,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1743409709194,
      "end": 1743409709194,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1743409709194,
      "end": 1743409709194,
      "order": "normal"
    },
    {
      "name": "slidev:layout-wrapper",
      "start": 1743409709194,
      "end": 1743409709194,
      "order": "normal"
    },
    {
      "name": "slidev:context-injection",
      "start": 1743409709194,
      "end": 1743409709194,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1743409709194,
      "end": 1743409709194,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1743409709194,
      "end": 1743409709194,
      "order": "normal"
    },
    {
      "name": "slidev:hmr-patch",
      "start": 1743409709194,
      "end": 1743409709194,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:undefined",
      "start": 1743409709194,
      "end": 1743409709194,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1743409709194,
      "end": 1743409709194,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1743409709194,
      "end": 1743409709194,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1743409709194,
      "end": 1743409709194,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1743409709194,
      "end": 1743409709194,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1743409709194,
      "end": 1743409709194,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1743409709194,
      "end": 1743409709194,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1743409709194,
      "end": 1743409709194,
      "order": "normal"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1743409709194,
      "end": 1743409709194,
      "order": "post"
    },
    {
      "name": "unocss:transformers:post",
      "start": 1743409709194,
      "end": 1743409709194,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1743409709194,
      "end": 1743409709194,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1743409709194,
      "end": 1743409709194,
      "order": "normal"
    }
  ]
}
