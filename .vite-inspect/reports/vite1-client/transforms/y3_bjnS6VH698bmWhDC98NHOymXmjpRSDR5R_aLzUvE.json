{
  "resolvedId": "/Users/stevenhill/gce_git_tutorial/node_modules/@slidev/rough-notation/dist/index.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { randomSeed } from 'roughjs/bin/math';\nimport { line, ellipse, linearPath, rectangle } from 'roughjs/bin/renderer';\nimport { RoughGenerator } from 'roughjs/bin/generator';\n\nconst SVG_NS = \"http://www.w3.org/2000/svg\";\nconst DEFAULT_ANIMATION_DURATION = 800;\n\nlet defaultOptions = null;\nfunction getDefaultOptions() {\n  if (!defaultOptions) {\n    const gen = new RoughGenerator();\n    defaultOptions = gen.defaultOptions;\n  }\n  return defaultOptions;\n}\nfunction getOptions(type, seed, overrides) {\n  return {\n    ...getDefaultOptions(),\n    maxRandomnessOffset: 2,\n    roughness: type === \"highlight\" ? 3 : 1.5,\n    bowing: 1,\n    stroke: \"#000\",\n    strokeWidth: 1.5,\n    curveTightness: 0,\n    curveFitting: 0.95,\n    curveStepCount: 9,\n    fillStyle: \"hachure\",\n    fillWeight: -1,\n    hachureAngle: -41,\n    hachureGap: -1,\n    dashOffset: -1,\n    dashGap: -1,\n    zigzagOffset: -1,\n    // combineNestedSvgPaths: false,\n    disableMultiStroke: type !== \"double\",\n    disableMultiStrokeFill: false,\n    seed,\n    ...overrides\n  };\n}\nfunction parsePadding(config) {\n  const p = config.padding;\n  if (p || p === 0) {\n    if (typeof p === \"number\") {\n      return [p, p, p, p];\n    } else if (Array.isArray(p)) {\n      const pa = p;\n      if (pa.length) {\n        switch (pa.length) {\n          case 4:\n            return [...pa];\n          case 1:\n            return [pa[0], pa[0], pa[0], pa[0]];\n          case 2:\n            return [...pa, ...pa];\n          case 3:\n            return [...pa, pa[1]];\n          default:\n            return [pa[0], pa[1], pa[2], pa[3]];\n        }\n      }\n    }\n  }\n  return [5, 5, 5, 5];\n}\nfunction renderAnnotation(svg, rect, config, animationGroupDelay, animationDuration, seed) {\n  const opList = [];\n  let strokeWidth = config.strokeWidth || 2;\n  const padding = parsePadding(config);\n  const animate = config.animate === void 0 ? true : !!config.animate;\n  const iterations = config.iterations || 2;\n  const rtl = config.rtl ? 1 : 0;\n  const o = getOptions(\"single\", seed, config);\n  switch (config.type) {\n    case \"underline\": {\n      const y = rect.y + rect.h + padding[2];\n      for (let i = rtl; i < iterations + rtl; i++) {\n        if (i % 2)\n          opList.push(line(rect.x + rect.w, y, rect.x, y, o));\n        else\n          opList.push(line(rect.x, y, rect.x + rect.w, y, o));\n      }\n      break;\n    }\n    case \"strike-through\": {\n      const y = rect.y + rect.h / 2;\n      for (let i = rtl; i < iterations + rtl; i++) {\n        if (i % 2)\n          opList.push(line(rect.x + rect.w, y, rect.x, y, o));\n        else\n          opList.push(line(rect.x, y, rect.x + rect.w, y, o));\n      }\n      break;\n    }\n    case \"box\": {\n      const x = rect.x - padding[3];\n      const y = rect.y - padding[0];\n      const width = rect.w + (padding[1] + padding[3]);\n      const height = rect.h + (padding[0] + padding[2]);\n      for (let i = 0; i < iterations; i++)\n        opList.push(rectangle(x, y, width, height, o));\n      break;\n    }\n    case \"bracket\": {\n      const brackets = Array.isArray(config.brackets) ? config.brackets : config.brackets ? [config.brackets] : [\"right\"];\n      const lx = rect.x - padding[3] * 2;\n      const rx = rect.x + rect.w + padding[1] * 2;\n      const ty = rect.y - padding[0] * 2;\n      const by = rect.y + rect.h + padding[2] * 2;\n      for (const br of brackets) {\n        let points;\n        switch (br) {\n          case \"bottom\":\n            points = [\n              [lx, rect.y + rect.h],\n              [lx, by],\n              [rx, by],\n              [rx, rect.y + rect.h]\n            ];\n            break;\n          case \"top\":\n            points = [\n              [lx, rect.y],\n              [lx, ty],\n              [rx, ty],\n              [rx, rect.y]\n            ];\n            break;\n          case \"left\":\n            points = [\n              [rect.x, ty],\n              [lx, ty],\n              [lx, by],\n              [rect.x, by]\n            ];\n            break;\n          case \"right\":\n            points = [\n              [rect.x + rect.w, ty],\n              [rx, ty],\n              [rx, by],\n              [rect.x + rect.w, by]\n            ];\n            break;\n        }\n        if (points)\n          opList.push(linearPath(points, false, o));\n      }\n      break;\n    }\n    case \"crossed-off\": {\n      const x = rect.x;\n      const y = rect.y;\n      const x2 = x + rect.w;\n      const y2 = y + rect.h;\n      for (let i = rtl; i < iterations + rtl; i++) {\n        if (i % 2)\n          opList.push(line(x2, y2, x, y, o));\n        else\n          opList.push(line(x, y, x2, y2, o));\n      }\n      for (let i = rtl; i < iterations + rtl; i++) {\n        if (i % 2)\n          opList.push(line(x, y2, x2, y, o));\n        else\n          opList.push(line(x2, y, x, y2, o));\n      }\n      break;\n    }\n    case \"circle\": {\n      const doubleO = getOptions(\"double\", seed, config);\n      const width = rect.w + (padding[1] + padding[3]);\n      const height = rect.h + (padding[0] + padding[2]);\n      const x = rect.x - padding[3] + width / 2;\n      const y = rect.y - padding[0] + height / 2;\n      const fullItr = Math.floor(iterations / 2);\n      const singleItr = iterations - fullItr * 2;\n      for (let i = 0; i < fullItr; i++)\n        opList.push(ellipse(x, y, width, height, doubleO));\n      for (let i = 0; i < singleItr; i++)\n        opList.push(ellipse(x, y, width, height, o));\n      break;\n    }\n    case \"highlight\": {\n      const o2 = getOptions(\"highlight\", seed, config);\n      strokeWidth = rect.h * 0.95;\n      const y = rect.y + rect.h / 2;\n      for (let i = rtl; i < iterations + rtl; i++) {\n        if (i % 2)\n          opList.push(line(rect.x + rect.w, y, rect.x, y, o2));\n        else\n          opList.push(line(rect.x, y, rect.x + rect.w, y, o2));\n      }\n      break;\n    }\n  }\n  if (opList.length) {\n    const pathStrings = opsToPath(opList);\n    const lengths = [];\n    const pathElements = [];\n    let totalLength = 0;\n    const setAttr = (p, an, av) => p.setAttribute(an, av);\n    for (const d of pathStrings) {\n      const path = document.createElementNS(SVG_NS, \"path\");\n      setAttr(path, \"d\", d);\n      setAttr(path, \"fill\", \"none\");\n      setAttr(path, \"stroke\", config.color || \"currentColor\");\n      setAttr(path, \"stroke-width\", `${strokeWidth}`);\n      if (config.opacity !== void 0)\n        setAttr(path, \"style\", `opacity:${config.opacity}`);\n      if (animate) {\n        const length = path.getTotalLength();\n        lengths.push(length);\n        totalLength += length;\n      }\n      svg.appendChild(path);\n      pathElements.push(path);\n    }\n    if (animate) {\n      let durationOffset = 0;\n      for (let i = 0; i < pathElements.length; i++) {\n        const path = pathElements[i];\n        const length = lengths[i];\n        const duration = totalLength ? animationDuration * (length / totalLength) : 0;\n        const delay = animationGroupDelay + durationOffset;\n        const style = path.style;\n        style.strokeDashoffset = `${length}`;\n        style.strokeDasharray = `${length}`;\n        style.animation = `rough-notation-dash ${duration}ms ease-out ${delay}ms forwards`;\n        durationOffset += duration;\n      }\n      return sleep(animationDuration + animationGroupDelay);\n    }\n  }\n  return sleep(0);\n}\nfunction sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\nfunction opsToPath(opList) {\n  const paths = [];\n  for (const drawing of opList) {\n    let path = \"\";\n    for (const item of drawing.ops) {\n      const data = item.data;\n      switch (item.op) {\n        case \"move\":\n          if (path.trim())\n            paths.push(path.trim());\n          path = `M${data[0]} ${data[1]} `;\n          break;\n        case \"bcurveTo\":\n          path += `C${data[0]} ${data[1]}, ${data[2]} ${data[3]}, ${data[4]} ${data[5]} `;\n          break;\n        case \"lineTo\":\n          path += `L${data[0]} ${data[1]} `;\n          break;\n      }\n    }\n    if (path.trim())\n      paths.push(path.trim());\n  }\n  return paths;\n}\n\nfunction ensureKeyframes() {\n  if (!window.__rno_kf_s) {\n    const style = window.__rno_kf_s = document.createElement(\"style\");\n    style.textContent = `@keyframes rough-notation-dash { to { stroke-dashoffset: 0; } }`;\n    document.head.appendChild(style);\n  }\n}\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nclass RoughAnnotationImpl {\n  constructor(e, config) {\n    __publicField(this, \"_state\", \"unattached\");\n    __publicField(this, \"_config\");\n    __publicField(this, \"_resizing\", false);\n    __publicField(this, \"_ro\");\n    // ResizeObserver is not supported in typescript std lib yet\n    __publicField(this, \"_seed\", randomSeed());\n    __publicField(this, \"_e\");\n    __publicField(this, \"_svg\");\n    __publicField(this, \"_lastSizes\", []);\n    __publicField(this, \"_animationDelay\", 0);\n    __publicField(this, \"_resizeListener\", () => {\n      if (!this._resizing) {\n        this._resizing = true;\n        setTimeout(() => {\n          this._resizing = false;\n          if (this._state === \"showing\") {\n            if (this.haveRectsChanged())\n              this.show();\n          }\n        }, 400);\n      }\n    });\n    __publicField(this, \"pendingRefresh\");\n    this._e = e;\n    this._config = JSON.parse(JSON.stringify(config));\n    this.attach();\n  }\n  getConfig(key) {\n    return this._config[key];\n  }\n  setConfig(key, value) {\n    if (this._config[key] !== value) {\n      this._config[key] = value;\n      this.refresh();\n    }\n  }\n  get animate() {\n    return this._config.animate;\n  }\n  set animate(value) {\n    this._config.animate = value;\n  }\n  get animationDuration() {\n    return this._config.animationDuration;\n  }\n  set animationDuration(value) {\n    this._config.animationDuration = value;\n  }\n  get iterations() {\n    return this._config.iterations;\n  }\n  set iterations(value) {\n    this._config.iterations = value;\n  }\n  get color() {\n    return this._config.color;\n  }\n  set color(value) {\n    if (this._config.color !== value) {\n      this._config.color = value;\n      this.refresh();\n    }\n  }\n  get class() {\n    return this._config.class;\n  }\n  set class(value) {\n    if (this._config.class !== value) {\n      this._config.class = value;\n      if (this._svg)\n        this._svg.setAttribute(\"class\", [\"rough-annotation\", this._config.class || \"\"].filter(Boolean).join(\" \"));\n    }\n  }\n  get strokeWidth() {\n    return this._config.strokeWidth;\n  }\n  set strokeWidth(value) {\n    if (this._config.strokeWidth !== value) {\n      this._config.strokeWidth = value;\n      this.refresh();\n    }\n  }\n  get padding() {\n    return this._config.padding;\n  }\n  set padding(value) {\n    if (this._config.padding !== value) {\n      this._config.padding = value;\n      this.refresh();\n    }\n  }\n  attach() {\n    if (this._state === \"unattached\" && this._e.parentElement) {\n      ensureKeyframes();\n      const svg = this._svg = document.createElementNS(SVG_NS, \"svg\");\n      svg.setAttribute(\"class\", [\"rough-annotation\", this._config.class || \"\"].filter(Boolean).join(\" \"));\n      const style = svg.style;\n      style.position = \"absolute\";\n      style.top = \"0\";\n      style.left = \"0\";\n      style.overflow = \"visible\";\n      style.pointerEvents = \"none\";\n      style.width = \"100px\";\n      style.height = \"100px\";\n      const prepend = this._config.type === \"highlight\";\n      this._e.insertAdjacentElement(prepend ? \"beforebegin\" : \"afterend\", svg);\n      this._state = \"not-showing\";\n      if (prepend) {\n        const computedPos = window.getComputedStyle(this._e).position;\n        const unpositioned = !computedPos || computedPos === \"static\";\n        if (unpositioned)\n          this._e.style.position = \"relative\";\n      }\n      this.attachListeners();\n    }\n  }\n  detachListeners() {\n    window.removeEventListener(\"resize\", this._resizeListener);\n    if (this._ro)\n      this._ro.unobserve(this._e);\n  }\n  attachListeners() {\n    this.detachListeners();\n    window.addEventListener(\"resize\", this._resizeListener, { passive: true });\n    if (!this._ro && \"ResizeObserver\" in window) {\n      this._ro = new window.ResizeObserver((entries) => {\n        for (const entry of entries) {\n          if (entry.contentRect)\n            this._resizeListener();\n        }\n      });\n    }\n    if (this._ro)\n      this._ro.observe(this._e);\n  }\n  haveRectsChanged() {\n    if (this._lastSizes.length) {\n      const newRects = this.rects();\n      if (newRects.length === this._lastSizes.length) {\n        for (let i = 0; i < newRects.length; i++) {\n          if (!this.isSameRect(newRects[i], this._lastSizes[i]))\n            return true;\n        }\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n  isSameRect(rect1, rect2) {\n    const si = (a, b) => Math.round(a) === Math.round(b);\n    return si(rect1.x, rect2.x) && si(rect1.y, rect2.y) && si(rect1.w, rect2.w) && si(rect1.h, rect2.h);\n  }\n  isShowing() {\n    return this._state !== \"not-showing\";\n  }\n  refresh() {\n    if (this.isShowing() && !this.pendingRefresh) {\n      this.pendingRefresh = Promise.resolve().then(() => {\n        if (this.isShowing())\n          this.show();\n        delete this.pendingRefresh;\n      });\n    }\n  }\n  async show() {\n    switch (this._state) {\n      case \"unattached\":\n        break;\n      case \"showing\":\n        this.hide();\n        if (this._svg)\n          await this.render(this._svg, true);\n        break;\n      case \"not-showing\":\n        this.attach();\n        if (this._svg)\n          await this.render(this._svg, false);\n        break;\n    }\n  }\n  hide() {\n    if (this._svg) {\n      while (this._svg.lastChild)\n        this._svg.removeChild(this._svg.lastChild);\n    }\n    this._state = \"not-showing\";\n  }\n  remove() {\n    if (this._svg && this._svg.parentElement)\n      this._svg.parentElement.removeChild(this._svg);\n    this._svg = void 0;\n    this._state = \"unattached\";\n    this.detachListeners();\n  }\n  async render(svg, ensureNoAnimation) {\n    let config = this._config;\n    if (ensureNoAnimation) {\n      config = JSON.parse(JSON.stringify(this._config));\n      config.animate = false;\n    }\n    const rects = this.rects();\n    let totalWidth = 0;\n    rects.forEach((rect) => totalWidth += rect.w);\n    const totalDuration = config.animationDuration || DEFAULT_ANIMATION_DURATION;\n    let delay = 0;\n    const promises = [];\n    for (let i = 0; i < rects.length; i++) {\n      const rect = rects[i];\n      const ad = totalDuration * (rect.w / totalWidth);\n      promises.push(\n        renderAnnotation(svg, rects[i], config, delay + this._animationDelay + (this._config.delay || 0), ad, this._seed)\n      );\n      delay += ad;\n    }\n    this._lastSizes = rects;\n    this._state = \"showing\";\n    return await Promise.all(promises);\n  }\n  rects() {\n    const ret = [];\n    if (this._svg) {\n      if (this._config.multiline) {\n        const elementRects = this._e.getClientRects();\n        for (let i = 0; i < elementRects.length; i++)\n          ret.push(this.svgRect(this._svg, elementRects[i]));\n      } else {\n        ret.push(this.svgRect(this._svg, this._e.getBoundingClientRect()));\n      }\n    }\n    return ret;\n  }\n  svgRect(svg, bounds) {\n    const rect1 = svg.getBoundingClientRect();\n    const rect2 = bounds;\n    return {\n      x: (rect2.x || rect2.left) - (rect1.x || rect1.left),\n      y: (rect2.y || rect2.top) - (rect1.y || rect1.top),\n      w: rect2.width,\n      h: rect2.height\n    };\n  }\n}\nfunction annotate(element, config) {\n  return new RoughAnnotationImpl(element, config);\n}\nfunction annotationGroup(annotations) {\n  let delay = 0;\n  for (const a of annotations) {\n    const ai = a;\n    ai._animationDelay = delay;\n    const duration = ai.animationDuration === 0 ? 0 : ai.animationDuration || DEFAULT_ANIMATION_DURATION;\n    delay += duration;\n  }\n  const list = [...annotations];\n  return {\n    show() {\n      for (const a of list)\n        a.show();\n    },\n    hide() {\n      for (const a of list)\n        a.hide();\n    }\n  };\n}\n\nexport { annotate, annotationGroup };\n",
      "start": 1743409708468,
      "end": 1743409708470,
      "sourcemaps": null
    },
    {
      "name": "unplugin-vue-markdown",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "pre"
    },
    {
      "name": "slidev:flags",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "pre"
    },
    {
      "name": "unocss:transformers:pre",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "pre"
    },
    {
      "name": "unocss:global:build:scan",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "normal"
    },
    {
      "name": "slidev:layout-wrapper",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "normal"
    },
    {
      "name": "slidev:context-injection",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "normal"
    },
    {
      "name": "slidev:hmr-patch",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:undefined",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "normal"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "post"
    },
    {
      "name": "unocss:transformers:post",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "normal"
    }
  ]
}
