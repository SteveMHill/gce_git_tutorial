{
  "resolvedId": "/Users/stevenhill/gce_git_tutorial/node_modules/mermaid/dist/chunks/mermaid.esm/chunk-ZVRJXRH7.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import {\n  getIconSVG\n} from \"./chunk-Q7X626QO.mjs\";\nimport {\n  getSubGraphTitleMargins\n} from \"./chunk-SVWLYT5M.mjs\";\nimport {\n  createText\n} from \"./chunk-STFVS7YW.mjs\";\nimport {\n  calculateTextWidth,\n  decodeEntities,\n  handleUndefinedAttr,\n  parseFontSize\n} from \"./chunk-YFKFDTKC.mjs\";\nimport {\n  common_default,\n  defaultConfig_default,\n  evaluate,\n  getConfig,\n  getConfig2,\n  hasKatex,\n  log,\n  parseGenericTypes,\n  renderKatex,\n  sanitizeText,\n  sanitizeText2,\n  select_default\n} from \"./chunk-3L32CQKD.mjs\";\nimport {\n  __name\n} from \"./chunk-DLQEHMXD.mjs\";\n\n// src/rendering-util/rendering-elements/shapes/util.ts\nvar labelHelper = /* @__PURE__ */ __name(async (parent, node, _classes) => {\n  let cssClasses;\n  const useHtmlLabels = node.useHtmlLabels || evaluate(getConfig2()?.htmlLabels);\n  if (!_classes) {\n    cssClasses = \"node default\";\n  } else {\n    cssClasses = _classes;\n  }\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", cssClasses).attr(\"id\", node.domId || node.id);\n  const labelEl = shapeSvg.insert(\"g\").attr(\"class\", \"label\").attr(\"style\", handleUndefinedAttr(node.labelStyle));\n  let label;\n  if (node.label === void 0) {\n    label = \"\";\n  } else {\n    label = typeof node.label === \"string\" ? node.label : node.label[0];\n  }\n  const text2 = await createText(labelEl, sanitizeText(decodeEntities(label), getConfig2()), {\n    useHtmlLabels,\n    width: node.width || getConfig2().flowchart?.wrappingWidth,\n    // @ts-expect-error -- This is currently not used. Should this be `classes` instead?\n    cssClasses: \"markdown-node-label\",\n    style: node.labelStyle,\n    addSvgBackground: !!node.icon || !!node.img\n  });\n  let bbox = text2.getBBox();\n  const halfPadding = (node?.padding ?? 0) / 2;\n  if (useHtmlLabels) {\n    const div = text2.children[0];\n    const dv = select_default(text2);\n    const images = div.getElementsByTagName(\"img\");\n    if (images) {\n      const noImgText = label.replace(/<img[^>]*>/g, \"\").trim() === \"\";\n      await Promise.all(\n        [...images].map(\n          (img) => new Promise((res) => {\n            function setupImage() {\n              img.style.display = \"flex\";\n              img.style.flexDirection = \"column\";\n              if (noImgText) {\n                const bodyFontSize = getConfig2().fontSize ? getConfig2().fontSize : window.getComputedStyle(document.body).fontSize;\n                const enlargingFactor = 5;\n                const [parsedBodyFontSize = defaultConfig_default.fontSize] = parseFontSize(bodyFontSize);\n                const width = parsedBodyFontSize * enlargingFactor + \"px\";\n                img.style.minWidth = width;\n                img.style.maxWidth = width;\n              } else {\n                img.style.width = \"100%\";\n              }\n              res(img);\n            }\n            __name(setupImage, \"setupImage\");\n            setTimeout(() => {\n              if (img.complete) {\n                setupImage();\n              }\n            });\n            img.addEventListener(\"error\", setupImage);\n            img.addEventListener(\"load\", setupImage);\n          })\n        )\n      );\n    }\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  if (useHtmlLabels) {\n    labelEl.attr(\"transform\", \"translate(\" + -bbox.width / 2 + \", \" + -bbox.height / 2 + \")\");\n  } else {\n    labelEl.attr(\"transform\", \"translate(0, \" + -bbox.height / 2 + \")\");\n  }\n  if (node.centerLabel) {\n    labelEl.attr(\"transform\", \"translate(\" + -bbox.width / 2 + \", \" + -bbox.height / 2 + \")\");\n  }\n  labelEl.insert(\"rect\", \":first-child\");\n  return { shapeSvg, bbox, halfPadding, label: labelEl };\n}, \"labelHelper\");\nvar insertLabel = /* @__PURE__ */ __name(async (parent, label, options) => {\n  const useHtmlLabels = options.useHtmlLabels || evaluate(getConfig2()?.flowchart?.htmlLabels);\n  const labelEl = parent.insert(\"g\").attr(\"class\", \"label\").attr(\"style\", options.labelStyle || \"\");\n  const text2 = await createText(labelEl, sanitizeText(decodeEntities(label), getConfig2()), {\n    useHtmlLabels,\n    width: options.width || getConfig2()?.flowchart?.wrappingWidth,\n    style: options.labelStyle,\n    addSvgBackground: !!options.icon || !!options.img\n  });\n  let bbox = text2.getBBox();\n  const halfPadding = options.padding / 2;\n  if (evaluate(getConfig2()?.flowchart?.htmlLabels)) {\n    const div = text2.children[0];\n    const dv = select_default(text2);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  if (useHtmlLabels) {\n    labelEl.attr(\"transform\", \"translate(\" + -bbox.width / 2 + \", \" + -bbox.height / 2 + \")\");\n  } else {\n    labelEl.attr(\"transform\", \"translate(0, \" + -bbox.height / 2 + \")\");\n  }\n  if (options.centerLabel) {\n    labelEl.attr(\"transform\", \"translate(\" + -bbox.width / 2 + \", \" + -bbox.height / 2 + \")\");\n  }\n  labelEl.insert(\"rect\", \":first-child\");\n  return { shapeSvg: parent, bbox, halfPadding, label: labelEl };\n}, \"insertLabel\");\nvar updateNodeBounds = /* @__PURE__ */ __name((node, element) => {\n  const bbox = element.node().getBBox();\n  node.width = bbox.width;\n  node.height = bbox.height;\n}, \"updateNodeBounds\");\nvar getNodeClasses = /* @__PURE__ */ __name((node, extra) => (node.look === \"handDrawn\" ? \"rough-node\" : \"node\") + \" \" + node.cssClasses + \" \" + (extra || \"\"), \"getNodeClasses\");\nfunction createPathFromPoints(points) {\n  const pointStrings = points.map((p2, i2) => `${i2 === 0 ? \"M\" : \"L\"}${p2.x},${p2.y}`);\n  pointStrings.push(\"Z\");\n  return pointStrings.join(\" \");\n}\n__name(createPathFromPoints, \"createPathFromPoints\");\nfunction generateFullSineWavePoints(x1, y1, x2, y2, amplitude, numCycles) {\n  const points = [];\n  const steps = 50;\n  const deltaX = x2 - x1;\n  const deltaY = y2 - y1;\n  const cycleLength = deltaX / numCycles;\n  const frequency = 2 * Math.PI / cycleLength;\n  const midY = y1 + deltaY / 2;\n  for (let i2 = 0; i2 <= steps; i2++) {\n    const t2 = i2 / steps;\n    const x3 = x1 + t2 * deltaX;\n    const y3 = midY + amplitude * Math.sin(frequency * (x3 - x1));\n    points.push({ x: x3, y: y3 });\n  }\n  return points;\n}\n__name(generateFullSineWavePoints, \"generateFullSineWavePoints\");\nfunction generateCirclePoints(centerX, centerY, radius, numPoints, startAngle, endAngle) {\n  const points = [];\n  const startAngleRad = startAngle * Math.PI / 180;\n  const endAngleRad = endAngle * Math.PI / 180;\n  const angleRange = endAngleRad - startAngleRad;\n  const angleStep = angleRange / (numPoints - 1);\n  for (let i2 = 0; i2 < numPoints; i2++) {\n    const angle = startAngleRad + i2 * angleStep;\n    const x2 = centerX + radius * Math.cos(angle);\n    const y2 = centerY + radius * Math.sin(angle);\n    points.push({ x: -x2, y: -y2 });\n  }\n  return points;\n}\n__name(generateCirclePoints, \"generateCirclePoints\");\n\n// ../../node_modules/.pnpm/roughjs@4.6.6_patch_hash=3543d47108cb41b68ec6a671c0e1f9d0cfe2ce524fea5b0992511ae84c3c6b64/node_modules/roughjs/bundled/rough.esm.js\nfunction t(t2, e2, s2) {\n  if (t2 && t2.length) {\n    const [n2, o2] = e2, a2 = Math.PI / 180 * s2, h2 = Math.cos(a2), r2 = Math.sin(a2);\n    for (const e3 of t2) {\n      const [t3, s3] = e3;\n      e3[0] = (t3 - n2) * h2 - (s3 - o2) * r2 + n2, e3[1] = (t3 - n2) * r2 + (s3 - o2) * h2 + o2;\n    }\n  }\n}\n__name(t, \"t\");\nfunction e(t2, e2) {\n  return t2[0] === e2[0] && t2[1] === e2[1];\n}\n__name(e, \"e\");\nfunction s(s2, n2, o2, a2 = 1) {\n  const h2 = o2, r2 = Math.max(n2, 0.1), i2 = s2[0] && s2[0][0] && \"number\" == typeof s2[0][0] ? [s2] : s2, c2 = [0, 0];\n  if (h2) for (const e2 of i2) t(e2, c2, h2);\n  const l2 = function(t2, s3, n3) {\n    const o3 = [];\n    for (const s4 of t2) {\n      const t3 = [...s4];\n      e(t3[0], t3[t3.length - 1]) || t3.push([t3[0][0], t3[0][1]]), t3.length > 2 && o3.push(t3);\n    }\n    const a3 = [];\n    s3 = Math.max(s3, 0.1);\n    const h3 = [];\n    for (const t3 of o3) for (let e2 = 0; e2 < t3.length - 1; e2++) {\n      const s4 = t3[e2], n4 = t3[e2 + 1];\n      if (s4[1] !== n4[1]) {\n        const t4 = Math.min(s4[1], n4[1]);\n        h3.push({ ymin: t4, ymax: Math.max(s4[1], n4[1]), x: t4 === s4[1] ? s4[0] : n4[0], islope: (n4[0] - s4[0]) / (n4[1] - s4[1]) });\n      }\n    }\n    if (h3.sort((t3, e2) => t3.ymin < e2.ymin ? -1 : t3.ymin > e2.ymin ? 1 : t3.x < e2.x ? -1 : t3.x > e2.x ? 1 : t3.ymax === e2.ymax ? 0 : (t3.ymax - e2.ymax) / Math.abs(t3.ymax - e2.ymax)), !h3.length) return a3;\n    let r3 = [], i3 = h3[0].ymin, c3 = 0;\n    for (; r3.length || h3.length; ) {\n      if (h3.length) {\n        let t3 = -1;\n        for (let e2 = 0; e2 < h3.length && !(h3[e2].ymin > i3); e2++) t3 = e2;\n        h3.splice(0, t3 + 1).forEach((t4) => {\n          r3.push({ s: i3, edge: t4 });\n        });\n      }\n      if (r3 = r3.filter((t3) => !(t3.edge.ymax <= i3)), r3.sort((t3, e2) => t3.edge.x === e2.edge.x ? 0 : (t3.edge.x - e2.edge.x) / Math.abs(t3.edge.x - e2.edge.x)), (1 !== n3 || c3 % s3 == 0) && r3.length > 1) for (let t3 = 0; t3 < r3.length; t3 += 2) {\n        const e2 = t3 + 1;\n        if (e2 >= r3.length) break;\n        const s4 = r3[t3].edge, n4 = r3[e2].edge;\n        a3.push([[Math.round(s4.x), i3], [Math.round(n4.x), i3]]);\n      }\n      i3 += n3, r3.forEach((t3) => {\n        t3.edge.x = t3.edge.x + n3 * t3.edge.islope;\n      }), c3++;\n    }\n    return a3;\n  }(i2, r2, a2);\n  if (h2) {\n    for (const e2 of i2) t(e2, c2, -h2);\n    !function(e2, s3, n3) {\n      const o3 = [];\n      e2.forEach((t2) => o3.push(...t2)), t(o3, s3, n3);\n    }(l2, c2, -h2);\n  }\n  return l2;\n}\n__name(s, \"s\");\nfunction n(t2, e2) {\n  var n2;\n  const o2 = e2.hachureAngle + 90;\n  let a2 = e2.hachureGap;\n  a2 < 0 && (a2 = 4 * e2.strokeWidth), a2 = Math.round(Math.max(a2, 0.1));\n  let h2 = 1;\n  return e2.roughness >= 1 && ((null === (n2 = e2.randomizer) || void 0 === n2 ? void 0 : n2.next()) || Math.random()) > 0.7 && (h2 = a2), s(t2, a2, o2, h2 || 1);\n}\n__name(n, \"n\");\nvar o = class {\n  static {\n    __name(this, \"o\");\n  }\n  constructor(t2) {\n    this.helper = t2;\n  }\n  fillPolygons(t2, e2) {\n    return this._fillPolygons(t2, e2);\n  }\n  _fillPolygons(t2, e2) {\n    const s2 = n(t2, e2);\n    return { type: \"fillSketch\", ops: this.renderLines(s2, e2) };\n  }\n  renderLines(t2, e2) {\n    const s2 = [];\n    for (const n2 of t2) s2.push(...this.helper.doubleLineOps(n2[0][0], n2[0][1], n2[1][0], n2[1][1], e2));\n    return s2;\n  }\n};\nfunction a(t2) {\n  const e2 = t2[0], s2 = t2[1];\n  return Math.sqrt(Math.pow(e2[0] - s2[0], 2) + Math.pow(e2[1] - s2[1], 2));\n}\n__name(a, \"a\");\nvar h = class extends o {\n  static {\n    __name(this, \"h\");\n  }\n  fillPolygons(t2, e2) {\n    let s2 = e2.hachureGap;\n    s2 < 0 && (s2 = 4 * e2.strokeWidth), s2 = Math.max(s2, 0.1);\n    const o2 = n(t2, Object.assign({}, e2, { hachureGap: s2 })), h2 = Math.PI / 180 * e2.hachureAngle, r2 = [], i2 = 0.5 * s2 * Math.cos(h2), c2 = 0.5 * s2 * Math.sin(h2);\n    for (const [t3, e3] of o2) a([t3, e3]) && r2.push([[t3[0] - i2, t3[1] + c2], [...e3]], [[t3[0] + i2, t3[1] - c2], [...e3]]);\n    return { type: \"fillSketch\", ops: this.renderLines(r2, e2) };\n  }\n};\nvar r = class extends o {\n  static {\n    __name(this, \"r\");\n  }\n  fillPolygons(t2, e2) {\n    const s2 = this._fillPolygons(t2, e2), n2 = Object.assign({}, e2, { hachureAngle: e2.hachureAngle + 90 }), o2 = this._fillPolygons(t2, n2);\n    return s2.ops = s2.ops.concat(o2.ops), s2;\n  }\n};\nvar i = class {\n  static {\n    __name(this, \"i\");\n  }\n  constructor(t2) {\n    this.helper = t2;\n  }\n  fillPolygons(t2, e2) {\n    const s2 = n(t2, e2 = Object.assign({}, e2, { hachureAngle: 0 }));\n    return this.dotsOnLines(s2, e2);\n  }\n  dotsOnLines(t2, e2) {\n    const s2 = [];\n    let n2 = e2.hachureGap;\n    n2 < 0 && (n2 = 4 * e2.strokeWidth), n2 = Math.max(n2, 0.1);\n    let o2 = e2.fillWeight;\n    o2 < 0 && (o2 = e2.strokeWidth / 2);\n    const h2 = n2 / 4;\n    for (const r2 of t2) {\n      const t3 = a(r2), i2 = t3 / n2, c2 = Math.ceil(i2) - 1, l2 = t3 - c2 * n2, u2 = (r2[0][0] + r2[1][0]) / 2 - n2 / 4, p2 = Math.min(r2[0][1], r2[1][1]);\n      for (let t4 = 0; t4 < c2; t4++) {\n        const a2 = p2 + l2 + t4 * n2, r3 = u2 - h2 + 2 * Math.random() * h2, i3 = a2 - h2 + 2 * Math.random() * h2, c3 = this.helper.ellipse(r3, i3, o2, o2, e2);\n        s2.push(...c3.ops);\n      }\n    }\n    return { type: \"fillSketch\", ops: s2 };\n  }\n};\nvar c = class {\n  static {\n    __name(this, \"c\");\n  }\n  constructor(t2) {\n    this.helper = t2;\n  }\n  fillPolygons(t2, e2) {\n    const s2 = n(t2, e2);\n    return { type: \"fillSketch\", ops: this.dashedLine(s2, e2) };\n  }\n  dashedLine(t2, e2) {\n    const s2 = e2.dashOffset < 0 ? e2.hachureGap < 0 ? 4 * e2.strokeWidth : e2.hachureGap : e2.dashOffset, n2 = e2.dashGap < 0 ? e2.hachureGap < 0 ? 4 * e2.strokeWidth : e2.hachureGap : e2.dashGap, o2 = [];\n    return t2.forEach((t3) => {\n      const h2 = a(t3), r2 = Math.floor(h2 / (s2 + n2)), i2 = (h2 + n2 - r2 * (s2 + n2)) / 2;\n      let c2 = t3[0], l2 = t3[1];\n      c2[0] > l2[0] && (c2 = t3[1], l2 = t3[0]);\n      const u2 = Math.atan((l2[1] - c2[1]) / (l2[0] - c2[0]));\n      for (let t4 = 0; t4 < r2; t4++) {\n        const a2 = t4 * (s2 + n2), h3 = a2 + s2, r3 = [c2[0] + a2 * Math.cos(u2) + i2 * Math.cos(u2), c2[1] + a2 * Math.sin(u2) + i2 * Math.sin(u2)], l3 = [c2[0] + h3 * Math.cos(u2) + i2 * Math.cos(u2), c2[1] + h3 * Math.sin(u2) + i2 * Math.sin(u2)];\n        o2.push(...this.helper.doubleLineOps(r3[0], r3[1], l3[0], l3[1], e2));\n      }\n    }), o2;\n  }\n};\nvar l = class {\n  static {\n    __name(this, \"l\");\n  }\n  constructor(t2) {\n    this.helper = t2;\n  }\n  fillPolygons(t2, e2) {\n    const s2 = e2.hachureGap < 0 ? 4 * e2.strokeWidth : e2.hachureGap, o2 = e2.zigzagOffset < 0 ? s2 : e2.zigzagOffset, a2 = n(t2, e2 = Object.assign({}, e2, { hachureGap: s2 + o2 }));\n    return { type: \"fillSketch\", ops: this.zigzagLines(a2, o2, e2) };\n  }\n  zigzagLines(t2, e2, s2) {\n    const n2 = [];\n    return t2.forEach((t3) => {\n      const o2 = a(t3), h2 = Math.round(o2 / (2 * e2));\n      let r2 = t3[0], i2 = t3[1];\n      r2[0] > i2[0] && (r2 = t3[1], i2 = t3[0]);\n      const c2 = Math.atan((i2[1] - r2[1]) / (i2[0] - r2[0]));\n      for (let t4 = 0; t4 < h2; t4++) {\n        const o3 = 2 * t4 * e2, a2 = 2 * (t4 + 1) * e2, h3 = Math.sqrt(2 * Math.pow(e2, 2)), i3 = [r2[0] + o3 * Math.cos(c2), r2[1] + o3 * Math.sin(c2)], l2 = [r2[0] + a2 * Math.cos(c2), r2[1] + a2 * Math.sin(c2)], u2 = [i3[0] + h3 * Math.cos(c2 + Math.PI / 4), i3[1] + h3 * Math.sin(c2 + Math.PI / 4)];\n        n2.push(...this.helper.doubleLineOps(i3[0], i3[1], u2[0], u2[1], s2), ...this.helper.doubleLineOps(u2[0], u2[1], l2[0], l2[1], s2));\n      }\n    }), n2;\n  }\n};\nvar u = {};\nvar p = class {\n  static {\n    __name(this, \"p\");\n  }\n  constructor(t2) {\n    this.seed = t2;\n  }\n  next() {\n    return this.seed ? (2 ** 31 - 1 & (this.seed = Math.imul(48271, this.seed))) / 2 ** 31 : Math.random();\n  }\n};\nvar f = 0;\nvar d = 1;\nvar g = 2;\nvar M = { A: 7, a: 7, C: 6, c: 6, H: 1, h: 1, L: 2, l: 2, M: 2, m: 2, Q: 4, q: 4, S: 4, s: 4, T: 2, t: 2, V: 1, v: 1, Z: 0, z: 0 };\nfunction k(t2, e2) {\n  return t2.type === e2;\n}\n__name(k, \"k\");\nfunction b(t2) {\n  const e2 = [], s2 = function(t3) {\n    const e3 = new Array();\n    for (; \"\" !== t3; ) if (t3.match(/^([ \\t\\r\\n,]+)/)) t3 = t3.substr(RegExp.$1.length);\n    else if (t3.match(/^([aAcChHlLmMqQsStTvVzZ])/)) e3[e3.length] = { type: f, text: RegExp.$1 }, t3 = t3.substr(RegExp.$1.length);\n    else {\n      if (!t3.match(/^(([-+]?[0-9]+(\\.[0-9]*)?|[-+]?\\.[0-9]+)([eE][-+]?[0-9]+)?)/)) return [];\n      e3[e3.length] = { type: d, text: `${parseFloat(RegExp.$1)}` }, t3 = t3.substr(RegExp.$1.length);\n    }\n    return e3[e3.length] = { type: g, text: \"\" }, e3;\n  }(t2);\n  let n2 = \"BOD\", o2 = 0, a2 = s2[o2];\n  for (; !k(a2, g); ) {\n    let h2 = 0;\n    const r2 = [];\n    if (\"BOD\" === n2) {\n      if (\"M\" !== a2.text && \"m\" !== a2.text) return b(\"M0,0\" + t2);\n      o2++, h2 = M[a2.text], n2 = a2.text;\n    } else k(a2, d) ? h2 = M[n2] : (o2++, h2 = M[a2.text], n2 = a2.text);\n    if (!(o2 + h2 < s2.length)) throw new Error(\"Path data ended short\");\n    for (let t3 = o2; t3 < o2 + h2; t3++) {\n      const e3 = s2[t3];\n      if (!k(e3, d)) throw new Error(\"Param not a number: \" + n2 + \",\" + e3.text);\n      r2[r2.length] = +e3.text;\n    }\n    if (\"number\" != typeof M[n2]) throw new Error(\"Bad segment: \" + n2);\n    {\n      const t3 = { key: n2, data: r2 };\n      e2.push(t3), o2 += h2, a2 = s2[o2], \"M\" === n2 && (n2 = \"L\"), \"m\" === n2 && (n2 = \"l\");\n    }\n  }\n  return e2;\n}\n__name(b, \"b\");\nfunction y(t2) {\n  let e2 = 0, s2 = 0, n2 = 0, o2 = 0;\n  const a2 = [];\n  for (const { key: h2, data: r2 } of t2) switch (h2) {\n    case \"M\":\n      a2.push({ key: \"M\", data: [...r2] }), [e2, s2] = r2, [n2, o2] = r2;\n      break;\n    case \"m\":\n      e2 += r2[0], s2 += r2[1], a2.push({ key: \"M\", data: [e2, s2] }), n2 = e2, o2 = s2;\n      break;\n    case \"L\":\n      a2.push({ key: \"L\", data: [...r2] }), [e2, s2] = r2;\n      break;\n    case \"l\":\n      e2 += r2[0], s2 += r2[1], a2.push({ key: \"L\", data: [e2, s2] });\n      break;\n    case \"C\":\n      a2.push({ key: \"C\", data: [...r2] }), e2 = r2[4], s2 = r2[5];\n      break;\n    case \"c\": {\n      const t3 = r2.map((t4, n3) => n3 % 2 ? t4 + s2 : t4 + e2);\n      a2.push({ key: \"C\", data: t3 }), e2 = t3[4], s2 = t3[5];\n      break;\n    }\n    case \"Q\":\n      a2.push({ key: \"Q\", data: [...r2] }), e2 = r2[2], s2 = r2[3];\n      break;\n    case \"q\": {\n      const t3 = r2.map((t4, n3) => n3 % 2 ? t4 + s2 : t4 + e2);\n      a2.push({ key: \"Q\", data: t3 }), e2 = t3[2], s2 = t3[3];\n      break;\n    }\n    case \"A\":\n      a2.push({ key: \"A\", data: [...r2] }), e2 = r2[5], s2 = r2[6];\n      break;\n    case \"a\":\n      e2 += r2[5], s2 += r2[6], a2.push({ key: \"A\", data: [r2[0], r2[1], r2[2], r2[3], r2[4], e2, s2] });\n      break;\n    case \"H\":\n      a2.push({ key: \"H\", data: [...r2] }), e2 = r2[0];\n      break;\n    case \"h\":\n      e2 += r2[0], a2.push({ key: \"H\", data: [e2] });\n      break;\n    case \"V\":\n      a2.push({ key: \"V\", data: [...r2] }), s2 = r2[0];\n      break;\n    case \"v\":\n      s2 += r2[0], a2.push({ key: \"V\", data: [s2] });\n      break;\n    case \"S\":\n      a2.push({ key: \"S\", data: [...r2] }), e2 = r2[2], s2 = r2[3];\n      break;\n    case \"s\": {\n      const t3 = r2.map((t4, n3) => n3 % 2 ? t4 + s2 : t4 + e2);\n      a2.push({ key: \"S\", data: t3 }), e2 = t3[2], s2 = t3[3];\n      break;\n    }\n    case \"T\":\n      a2.push({ key: \"T\", data: [...r2] }), e2 = r2[0], s2 = r2[1];\n      break;\n    case \"t\":\n      e2 += r2[0], s2 += r2[1], a2.push({ key: \"T\", data: [e2, s2] });\n      break;\n    case \"Z\":\n    case \"z\":\n      a2.push({ key: \"Z\", data: [] }), e2 = n2, s2 = o2;\n  }\n  return a2;\n}\n__name(y, \"y\");\nfunction m(t2) {\n  const e2 = [];\n  let s2 = \"\", n2 = 0, o2 = 0, a2 = 0, h2 = 0, r2 = 0, i2 = 0;\n  for (const { key: c2, data: l2 } of t2) {\n    switch (c2) {\n      case \"M\":\n        e2.push({ key: \"M\", data: [...l2] }), [n2, o2] = l2, [a2, h2] = l2;\n        break;\n      case \"C\":\n        e2.push({ key: \"C\", data: [...l2] }), n2 = l2[4], o2 = l2[5], r2 = l2[2], i2 = l2[3];\n        break;\n      case \"L\":\n        e2.push({ key: \"L\", data: [...l2] }), [n2, o2] = l2;\n        break;\n      case \"H\":\n        n2 = l2[0], e2.push({ key: \"L\", data: [n2, o2] });\n        break;\n      case \"V\":\n        o2 = l2[0], e2.push({ key: \"L\", data: [n2, o2] });\n        break;\n      case \"S\": {\n        let t3 = 0, a3 = 0;\n        \"C\" === s2 || \"S\" === s2 ? (t3 = n2 + (n2 - r2), a3 = o2 + (o2 - i2)) : (t3 = n2, a3 = o2), e2.push({ key: \"C\", data: [t3, a3, ...l2] }), r2 = l2[0], i2 = l2[1], n2 = l2[2], o2 = l2[3];\n        break;\n      }\n      case \"T\": {\n        const [t3, a3] = l2;\n        let h3 = 0, c3 = 0;\n        \"Q\" === s2 || \"T\" === s2 ? (h3 = n2 + (n2 - r2), c3 = o2 + (o2 - i2)) : (h3 = n2, c3 = o2);\n        const u2 = n2 + 2 * (h3 - n2) / 3, p2 = o2 + 2 * (c3 - o2) / 3, f2 = t3 + 2 * (h3 - t3) / 3, d2 = a3 + 2 * (c3 - a3) / 3;\n        e2.push({ key: \"C\", data: [u2, p2, f2, d2, t3, a3] }), r2 = h3, i2 = c3, n2 = t3, o2 = a3;\n        break;\n      }\n      case \"Q\": {\n        const [t3, s3, a3, h3] = l2, c3 = n2 + 2 * (t3 - n2) / 3, u2 = o2 + 2 * (s3 - o2) / 3, p2 = a3 + 2 * (t3 - a3) / 3, f2 = h3 + 2 * (s3 - h3) / 3;\n        e2.push({ key: \"C\", data: [c3, u2, p2, f2, a3, h3] }), r2 = t3, i2 = s3, n2 = a3, o2 = h3;\n        break;\n      }\n      case \"A\": {\n        const t3 = Math.abs(l2[0]), s3 = Math.abs(l2[1]), a3 = l2[2], h3 = l2[3], r3 = l2[4], i3 = l2[5], c3 = l2[6];\n        if (0 === t3 || 0 === s3) e2.push({ key: \"C\", data: [n2, o2, i3, c3, i3, c3] }), n2 = i3, o2 = c3;\n        else if (n2 !== i3 || o2 !== c3) {\n          x(n2, o2, i3, c3, t3, s3, a3, h3, r3).forEach(function(t4) {\n            e2.push({ key: \"C\", data: t4 });\n          }), n2 = i3, o2 = c3;\n        }\n        break;\n      }\n      case \"Z\":\n        e2.push({ key: \"Z\", data: [] }), n2 = a2, o2 = h2;\n    }\n    s2 = c2;\n  }\n  return e2;\n}\n__name(m, \"m\");\nfunction w(t2, e2, s2) {\n  return [t2 * Math.cos(s2) - e2 * Math.sin(s2), t2 * Math.sin(s2) + e2 * Math.cos(s2)];\n}\n__name(w, \"w\");\nfunction x(t2, e2, s2, n2, o2, a2, h2, r2, i2, c2) {\n  const l2 = (u2 = h2, Math.PI * u2 / 180);\n  var u2;\n  let p2 = [], f2 = 0, d2 = 0, g2 = 0, M2 = 0;\n  if (c2) [f2, d2, g2, M2] = c2;\n  else {\n    [t2, e2] = w(t2, e2, -l2), [s2, n2] = w(s2, n2, -l2);\n    const h3 = (t2 - s2) / 2, c3 = (e2 - n2) / 2;\n    let u3 = h3 * h3 / (o2 * o2) + c3 * c3 / (a2 * a2);\n    u3 > 1 && (u3 = Math.sqrt(u3), o2 *= u3, a2 *= u3);\n    const p3 = o2 * o2, k3 = a2 * a2, b3 = p3 * k3 - p3 * c3 * c3 - k3 * h3 * h3, y3 = p3 * c3 * c3 + k3 * h3 * h3, m3 = (r2 === i2 ? -1 : 1) * Math.sqrt(Math.abs(b3 / y3));\n    g2 = m3 * o2 * c3 / a2 + (t2 + s2) / 2, M2 = m3 * -a2 * h3 / o2 + (e2 + n2) / 2, f2 = Math.asin(parseFloat(((e2 - M2) / a2).toFixed(9))), d2 = Math.asin(parseFloat(((n2 - M2) / a2).toFixed(9))), t2 < g2 && (f2 = Math.PI - f2), s2 < g2 && (d2 = Math.PI - d2), f2 < 0 && (f2 = 2 * Math.PI + f2), d2 < 0 && (d2 = 2 * Math.PI + d2), i2 && f2 > d2 && (f2 -= 2 * Math.PI), !i2 && d2 > f2 && (d2 -= 2 * Math.PI);\n  }\n  let k2 = d2 - f2;\n  if (Math.abs(k2) > 120 * Math.PI / 180) {\n    const t3 = d2, e3 = s2, r3 = n2;\n    d2 = i2 && d2 > f2 ? f2 + 120 * Math.PI / 180 * 1 : f2 + 120 * Math.PI / 180 * -1, p2 = x(s2 = g2 + o2 * Math.cos(d2), n2 = M2 + a2 * Math.sin(d2), e3, r3, o2, a2, h2, 0, i2, [d2, t3, g2, M2]);\n  }\n  k2 = d2 - f2;\n  const b2 = Math.cos(f2), y2 = Math.sin(f2), m2 = Math.cos(d2), P2 = Math.sin(d2), v2 = Math.tan(k2 / 4), S2 = 4 / 3 * o2 * v2, O2 = 4 / 3 * a2 * v2, L2 = [t2, e2], T2 = [t2 + S2 * y2, e2 - O2 * b2], D2 = [s2 + S2 * P2, n2 - O2 * m2], A2 = [s2, n2];\n  if (T2[0] = 2 * L2[0] - T2[0], T2[1] = 2 * L2[1] - T2[1], c2) return [T2, D2, A2].concat(p2);\n  {\n    p2 = [T2, D2, A2].concat(p2);\n    const t3 = [];\n    for (let e3 = 0; e3 < p2.length; e3 += 3) {\n      const s3 = w(p2[e3][0], p2[e3][1], l2), n3 = w(p2[e3 + 1][0], p2[e3 + 1][1], l2), o3 = w(p2[e3 + 2][0], p2[e3 + 2][1], l2);\n      t3.push([s3[0], s3[1], n3[0], n3[1], o3[0], o3[1]]);\n    }\n    return t3;\n  }\n}\n__name(x, \"x\");\nvar P = { randOffset: /* @__PURE__ */ __name(function(t2, e2) {\n  return G(t2, e2);\n}, \"randOffset\"), randOffsetWithRange: /* @__PURE__ */ __name(function(t2, e2, s2) {\n  return E(t2, e2, s2);\n}, \"randOffsetWithRange\"), ellipse: /* @__PURE__ */ __name(function(t2, e2, s2, n2, o2) {\n  const a2 = T(s2, n2, o2);\n  return D(t2, e2, o2, a2).opset;\n}, \"ellipse\"), doubleLineOps: /* @__PURE__ */ __name(function(t2, e2, s2, n2, o2) {\n  return $(t2, e2, s2, n2, o2, true);\n}, \"doubleLineOps\") };\nfunction v(t2, e2, s2, n2, o2) {\n  return { type: \"path\", ops: $(t2, e2, s2, n2, o2) };\n}\n__name(v, \"v\");\nfunction S(t2, e2, s2) {\n  const n2 = (t2 || []).length;\n  if (n2 > 2) {\n    const o2 = [];\n    for (let e3 = 0; e3 < n2 - 1; e3++) o2.push(...$(t2[e3][0], t2[e3][1], t2[e3 + 1][0], t2[e3 + 1][1], s2));\n    return e2 && o2.push(...$(t2[n2 - 1][0], t2[n2 - 1][1], t2[0][0], t2[0][1], s2)), { type: \"path\", ops: o2 };\n  }\n  return 2 === n2 ? v(t2[0][0], t2[0][1], t2[1][0], t2[1][1], s2) : { type: \"path\", ops: [] };\n}\n__name(S, \"S\");\nfunction O(t2, e2, s2, n2, o2) {\n  return function(t3, e3) {\n    return S(t3, true, e3);\n  }([[t2, e2], [t2 + s2, e2], [t2 + s2, e2 + n2], [t2, e2 + n2]], o2);\n}\n__name(O, \"O\");\nfunction L(t2, e2) {\n  if (t2.length) {\n    const s2 = \"number\" == typeof t2[0][0] ? [t2] : t2, n2 = j(s2[0], 1 * (1 + 0.2 * e2.roughness), e2), o2 = e2.disableMultiStroke ? [] : j(s2[0], 1.5 * (1 + 0.22 * e2.roughness), z(e2));\n    for (let t3 = 1; t3 < s2.length; t3++) {\n      const a2 = s2[t3];\n      if (a2.length) {\n        const t4 = j(a2, 1 * (1 + 0.2 * e2.roughness), e2), s3 = e2.disableMultiStroke ? [] : j(a2, 1.5 * (1 + 0.22 * e2.roughness), z(e2));\n        for (const e3 of t4) \"move\" !== e3.op && n2.push(e3);\n        for (const t5 of s3) \"move\" !== t5.op && o2.push(t5);\n      }\n    }\n    return { type: \"path\", ops: n2.concat(o2) };\n  }\n  return { type: \"path\", ops: [] };\n}\n__name(L, \"L\");\nfunction T(t2, e2, s2) {\n  const n2 = Math.sqrt(2 * Math.PI * Math.sqrt((Math.pow(t2 / 2, 2) + Math.pow(e2 / 2, 2)) / 2)), o2 = Math.ceil(Math.max(s2.curveStepCount, s2.curveStepCount / Math.sqrt(200) * n2)), a2 = 2 * Math.PI / o2;\n  let h2 = Math.abs(t2 / 2), r2 = Math.abs(e2 / 2);\n  const i2 = 1 - s2.curveFitting;\n  return h2 += G(h2 * i2, s2), r2 += G(r2 * i2, s2), { increment: a2, rx: h2, ry: r2 };\n}\n__name(T, \"T\");\nfunction D(t2, e2, s2, n2) {\n  const [o2, a2] = F(n2.increment, t2, e2, n2.rx, n2.ry, 1, n2.increment * E(0.1, E(0.4, 1, s2), s2), s2);\n  let h2 = q(o2, null, s2);\n  if (!s2.disableMultiStroke && 0 !== s2.roughness) {\n    const [o3] = F(n2.increment, t2, e2, n2.rx, n2.ry, 1.5, 0, s2), a3 = q(o3, null, s2);\n    h2 = h2.concat(a3);\n  }\n  return { estimatedPoints: a2, opset: { type: \"path\", ops: h2 } };\n}\n__name(D, \"D\");\nfunction A(t2, e2, s2, n2, o2, a2, h2, r2, i2) {\n  const c2 = t2, l2 = e2;\n  let u2 = Math.abs(s2 / 2), p2 = Math.abs(n2 / 2);\n  u2 += G(0.01 * u2, i2), p2 += G(0.01 * p2, i2);\n  let f2 = o2, d2 = a2;\n  for (; f2 < 0; ) f2 += 2 * Math.PI, d2 += 2 * Math.PI;\n  d2 - f2 > 2 * Math.PI && (f2 = 0, d2 = 2 * Math.PI);\n  const g2 = 2 * Math.PI / i2.curveStepCount, M2 = Math.min(g2 / 2, (d2 - f2) / 2), k2 = V(M2, c2, l2, u2, p2, f2, d2, 1, i2);\n  if (!i2.disableMultiStroke) {\n    const t3 = V(M2, c2, l2, u2, p2, f2, d2, 1.5, i2);\n    k2.push(...t3);\n  }\n  return h2 && (r2 ? k2.push(...$(c2, l2, c2 + u2 * Math.cos(f2), l2 + p2 * Math.sin(f2), i2), ...$(c2, l2, c2 + u2 * Math.cos(d2), l2 + p2 * Math.sin(d2), i2)) : k2.push({ op: \"lineTo\", data: [c2, l2] }, { op: \"lineTo\", data: [c2 + u2 * Math.cos(f2), l2 + p2 * Math.sin(f2)] })), { type: \"path\", ops: k2 };\n}\n__name(A, \"A\");\nfunction _(t2, e2) {\n  const s2 = m(y(b(t2))), n2 = [];\n  let o2 = [0, 0], a2 = [0, 0];\n  for (const { key: t3, data: h2 } of s2) switch (t3) {\n    case \"M\":\n      a2 = [h2[0], h2[1]], o2 = [h2[0], h2[1]];\n      break;\n    case \"L\":\n      n2.push(...$(a2[0], a2[1], h2[0], h2[1], e2)), a2 = [h2[0], h2[1]];\n      break;\n    case \"C\": {\n      const [t4, s3, o3, r2, i2, c2] = h2;\n      n2.push(...Z(t4, s3, o3, r2, i2, c2, a2, e2)), a2 = [i2, c2];\n      break;\n    }\n    case \"Z\":\n      n2.push(...$(a2[0], a2[1], o2[0], o2[1], e2)), a2 = [o2[0], o2[1]];\n  }\n  return { type: \"path\", ops: n2 };\n}\n__name(_, \"_\");\nfunction I(t2, e2) {\n  const s2 = [];\n  for (const n2 of t2) if (n2.length) {\n    const t3 = e2.maxRandomnessOffset || 0, o2 = n2.length;\n    if (o2 > 2) {\n      s2.push({ op: \"move\", data: [n2[0][0] + G(t3, e2), n2[0][1] + G(t3, e2)] });\n      for (let a2 = 1; a2 < o2; a2++) s2.push({ op: \"lineTo\", data: [n2[a2][0] + G(t3, e2), n2[a2][1] + G(t3, e2)] });\n    }\n  }\n  return { type: \"fillPath\", ops: s2 };\n}\n__name(I, \"I\");\nfunction C(t2, e2) {\n  return function(t3, e3) {\n    let s2 = t3.fillStyle || \"hachure\";\n    if (!u[s2]) switch (s2) {\n      case \"zigzag\":\n        u[s2] || (u[s2] = new h(e3));\n        break;\n      case \"cross-hatch\":\n        u[s2] || (u[s2] = new r(e3));\n        break;\n      case \"dots\":\n        u[s2] || (u[s2] = new i(e3));\n        break;\n      case \"dashed\":\n        u[s2] || (u[s2] = new c(e3));\n        break;\n      case \"zigzag-line\":\n        u[s2] || (u[s2] = new l(e3));\n        break;\n      default:\n        s2 = \"hachure\", u[s2] || (u[s2] = new o(e3));\n    }\n    return u[s2];\n  }(e2, P).fillPolygons(t2, e2);\n}\n__name(C, \"C\");\nfunction z(t2) {\n  const e2 = Object.assign({}, t2);\n  return e2.randomizer = void 0, t2.seed && (e2.seed = t2.seed + 1), e2;\n}\n__name(z, \"z\");\nfunction W(t2) {\n  return t2.randomizer || (t2.randomizer = new p(t2.seed || 0)), t2.randomizer.next();\n}\n__name(W, \"W\");\nfunction E(t2, e2, s2, n2 = 1) {\n  return s2.roughness * n2 * (W(s2) * (e2 - t2) + t2);\n}\n__name(E, \"E\");\nfunction G(t2, e2, s2 = 1) {\n  return E(-t2, t2, e2, s2);\n}\n__name(G, \"G\");\nfunction $(t2, e2, s2, n2, o2, a2 = false) {\n  const h2 = a2 ? o2.disableMultiStrokeFill : o2.disableMultiStroke, r2 = R(t2, e2, s2, n2, o2, true, false);\n  if (h2) return r2;\n  const i2 = R(t2, e2, s2, n2, o2, true, true);\n  return r2.concat(i2);\n}\n__name($, \"$\");\nfunction R(t2, e2, s2, n2, o2, a2, h2) {\n  const r2 = Math.pow(t2 - s2, 2) + Math.pow(e2 - n2, 2), i2 = Math.sqrt(r2);\n  let c2 = 1;\n  c2 = i2 < 200 ? 1 : i2 > 500 ? 0.4 : -16668e-7 * i2 + 1.233334;\n  let l2 = o2.maxRandomnessOffset || 0;\n  l2 * l2 * 100 > r2 && (l2 = i2 / 10);\n  const u2 = l2 / 2, p2 = 0.2 + 0.2 * W(o2);\n  let f2 = o2.bowing * o2.maxRandomnessOffset * (n2 - e2) / 200, d2 = o2.bowing * o2.maxRandomnessOffset * (t2 - s2) / 200;\n  f2 = G(f2, o2, c2), d2 = G(d2, o2, c2);\n  const g2 = [], M2 = /* @__PURE__ */ __name(() => G(u2, o2, c2), \"M\"), k2 = /* @__PURE__ */ __name(() => G(l2, o2, c2), \"k\"), b2 = o2.preserveVertices;\n  return a2 && (h2 ? g2.push({ op: \"move\", data: [t2 + (b2 ? 0 : M2()), e2 + (b2 ? 0 : M2())] }) : g2.push({ op: \"move\", data: [t2 + (b2 ? 0 : G(l2, o2, c2)), e2 + (b2 ? 0 : G(l2, o2, c2))] })), h2 ? g2.push({ op: \"bcurveTo\", data: [f2 + t2 + (s2 - t2) * p2 + M2(), d2 + e2 + (n2 - e2) * p2 + M2(), f2 + t2 + 2 * (s2 - t2) * p2 + M2(), d2 + e2 + 2 * (n2 - e2) * p2 + M2(), s2 + (b2 ? 0 : M2()), n2 + (b2 ? 0 : M2())] }) : g2.push({ op: \"bcurveTo\", data: [f2 + t2 + (s2 - t2) * p2 + k2(), d2 + e2 + (n2 - e2) * p2 + k2(), f2 + t2 + 2 * (s2 - t2) * p2 + k2(), d2 + e2 + 2 * (n2 - e2) * p2 + k2(), s2 + (b2 ? 0 : k2()), n2 + (b2 ? 0 : k2())] }), g2;\n}\n__name(R, \"R\");\nfunction j(t2, e2, s2) {\n  if (!t2.length) return [];\n  const n2 = [];\n  n2.push([t2[0][0] + G(e2, s2), t2[0][1] + G(e2, s2)]), n2.push([t2[0][0] + G(e2, s2), t2[0][1] + G(e2, s2)]);\n  for (let o2 = 1; o2 < t2.length; o2++) n2.push([t2[o2][0] + G(e2, s2), t2[o2][1] + G(e2, s2)]), o2 === t2.length - 1 && n2.push([t2[o2][0] + G(e2, s2), t2[o2][1] + G(e2, s2)]);\n  return q(n2, null, s2);\n}\n__name(j, \"j\");\nfunction q(t2, e2, s2) {\n  const n2 = t2.length, o2 = [];\n  if (n2 > 3) {\n    const a2 = [], h2 = 1 - s2.curveTightness;\n    o2.push({ op: \"move\", data: [t2[1][0], t2[1][1]] });\n    for (let e3 = 1; e3 + 2 < n2; e3++) {\n      const s3 = t2[e3];\n      a2[0] = [s3[0], s3[1]], a2[1] = [s3[0] + (h2 * t2[e3 + 1][0] - h2 * t2[e3 - 1][0]) / 6, s3[1] + (h2 * t2[e3 + 1][1] - h2 * t2[e3 - 1][1]) / 6], a2[2] = [t2[e3 + 1][0] + (h2 * t2[e3][0] - h2 * t2[e3 + 2][0]) / 6, t2[e3 + 1][1] + (h2 * t2[e3][1] - h2 * t2[e3 + 2][1]) / 6], a2[3] = [t2[e3 + 1][0], t2[e3 + 1][1]], o2.push({ op: \"bcurveTo\", data: [a2[1][0], a2[1][1], a2[2][0], a2[2][1], a2[3][0], a2[3][1]] });\n    }\n    if (e2 && 2 === e2.length) {\n      const t3 = s2.maxRandomnessOffset;\n      o2.push({ op: \"lineTo\", data: [e2[0] + G(t3, s2), e2[1] + G(t3, s2)] });\n    }\n  } else 3 === n2 ? (o2.push({ op: \"move\", data: [t2[1][0], t2[1][1]] }), o2.push({ op: \"bcurveTo\", data: [t2[1][0], t2[1][1], t2[2][0], t2[2][1], t2[2][0], t2[2][1]] })) : 2 === n2 && o2.push(...R(t2[0][0], t2[0][1], t2[1][0], t2[1][1], s2, true, true));\n  return o2;\n}\n__name(q, \"q\");\nfunction F(t2, e2, s2, n2, o2, a2, h2, r2) {\n  const i2 = [], c2 = [];\n  if (0 === r2.roughness) {\n    t2 /= 4, c2.push([e2 + n2 * Math.cos(-t2), s2 + o2 * Math.sin(-t2)]);\n    for (let a3 = 0; a3 <= 2 * Math.PI; a3 += t2) {\n      const t3 = [e2 + n2 * Math.cos(a3), s2 + o2 * Math.sin(a3)];\n      i2.push(t3), c2.push(t3);\n    }\n    c2.push([e2 + n2 * Math.cos(0), s2 + o2 * Math.sin(0)]), c2.push([e2 + n2 * Math.cos(t2), s2 + o2 * Math.sin(t2)]);\n  } else {\n    const l2 = G(0.5, r2) - Math.PI / 2;\n    c2.push([G(a2, r2) + e2 + 0.9 * n2 * Math.cos(l2 - t2), G(a2, r2) + s2 + 0.9 * o2 * Math.sin(l2 - t2)]);\n    const u2 = 2 * Math.PI + l2 - 0.01;\n    for (let h3 = l2; h3 < u2; h3 += t2) {\n      const t3 = [G(a2, r2) + e2 + n2 * Math.cos(h3), G(a2, r2) + s2 + o2 * Math.sin(h3)];\n      i2.push(t3), c2.push(t3);\n    }\n    c2.push([G(a2, r2) + e2 + n2 * Math.cos(l2 + 2 * Math.PI + 0.5 * h2), G(a2, r2) + s2 + o2 * Math.sin(l2 + 2 * Math.PI + 0.5 * h2)]), c2.push([G(a2, r2) + e2 + 0.98 * n2 * Math.cos(l2 + h2), G(a2, r2) + s2 + 0.98 * o2 * Math.sin(l2 + h2)]), c2.push([G(a2, r2) + e2 + 0.9 * n2 * Math.cos(l2 + 0.5 * h2), G(a2, r2) + s2 + 0.9 * o2 * Math.sin(l2 + 0.5 * h2)]);\n  }\n  return [c2, i2];\n}\n__name(F, \"F\");\nfunction V(t2, e2, s2, n2, o2, a2, h2, r2, i2) {\n  const c2 = a2 + G(0.1, i2), l2 = [];\n  l2.push([G(r2, i2) + e2 + 0.9 * n2 * Math.cos(c2 - t2), G(r2, i2) + s2 + 0.9 * o2 * Math.sin(c2 - t2)]);\n  for (let a3 = c2; a3 <= h2; a3 += t2) l2.push([G(r2, i2) + e2 + n2 * Math.cos(a3), G(r2, i2) + s2 + o2 * Math.sin(a3)]);\n  return l2.push([e2 + n2 * Math.cos(h2), s2 + o2 * Math.sin(h2)]), l2.push([e2 + n2 * Math.cos(h2), s2 + o2 * Math.sin(h2)]), q(l2, null, i2);\n}\n__name(V, \"V\");\nfunction Z(t2, e2, s2, n2, o2, a2, h2, r2) {\n  const i2 = [], c2 = [r2.maxRandomnessOffset || 1, (r2.maxRandomnessOffset || 1) + 0.3];\n  let l2 = [0, 0];\n  const u2 = r2.disableMultiStroke ? 1 : 2, p2 = r2.preserveVertices;\n  for (let f2 = 0; f2 < u2; f2++) 0 === f2 ? i2.push({ op: \"move\", data: [h2[0], h2[1]] }) : i2.push({ op: \"move\", data: [h2[0] + (p2 ? 0 : G(c2[0], r2)), h2[1] + (p2 ? 0 : G(c2[0], r2))] }), l2 = p2 ? [o2, a2] : [o2 + G(c2[f2], r2), a2 + G(c2[f2], r2)], i2.push({ op: \"bcurveTo\", data: [t2 + G(c2[f2], r2), e2 + G(c2[f2], r2), s2 + G(c2[f2], r2), n2 + G(c2[f2], r2), l2[0], l2[1]] });\n  return i2;\n}\n__name(Z, \"Z\");\nfunction Q(t2) {\n  return [...t2];\n}\n__name(Q, \"Q\");\nfunction H(t2, e2 = 0) {\n  const s2 = t2.length;\n  if (s2 < 3) throw new Error(\"A curve must have at least three points.\");\n  const n2 = [];\n  if (3 === s2) n2.push(Q(t2[0]), Q(t2[1]), Q(t2[2]), Q(t2[2]));\n  else {\n    const s3 = [];\n    s3.push(t2[0], t2[0]);\n    for (let e3 = 1; e3 < t2.length; e3++) s3.push(t2[e3]), e3 === t2.length - 1 && s3.push(t2[e3]);\n    const o2 = [], a2 = 1 - e2;\n    n2.push(Q(s3[0]));\n    for (let t3 = 1; t3 + 2 < s3.length; t3++) {\n      const e3 = s3[t3];\n      o2[0] = [e3[0], e3[1]], o2[1] = [e3[0] + (a2 * s3[t3 + 1][0] - a2 * s3[t3 - 1][0]) / 6, e3[1] + (a2 * s3[t3 + 1][1] - a2 * s3[t3 - 1][1]) / 6], o2[2] = [s3[t3 + 1][0] + (a2 * s3[t3][0] - a2 * s3[t3 + 2][0]) / 6, s3[t3 + 1][1] + (a2 * s3[t3][1] - a2 * s3[t3 + 2][1]) / 6], o2[3] = [s3[t3 + 1][0], s3[t3 + 1][1]], n2.push(o2[1], o2[2], o2[3]);\n    }\n  }\n  return n2;\n}\n__name(H, \"H\");\nfunction N(t2, e2) {\n  return Math.pow(t2[0] - e2[0], 2) + Math.pow(t2[1] - e2[1], 2);\n}\n__name(N, \"N\");\nfunction B(t2, e2, s2) {\n  const n2 = N(e2, s2);\n  if (0 === n2) return N(t2, e2);\n  let o2 = ((t2[0] - e2[0]) * (s2[0] - e2[0]) + (t2[1] - e2[1]) * (s2[1] - e2[1])) / n2;\n  return o2 = Math.max(0, Math.min(1, o2)), N(t2, J(e2, s2, o2));\n}\n__name(B, \"B\");\nfunction J(t2, e2, s2) {\n  return [t2[0] + (e2[0] - t2[0]) * s2, t2[1] + (e2[1] - t2[1]) * s2];\n}\n__name(J, \"J\");\nfunction K(t2, e2, s2, n2) {\n  const o2 = n2 || [];\n  if (function(t3, e3) {\n    const s3 = t3[e3 + 0], n3 = t3[e3 + 1], o3 = t3[e3 + 2], a3 = t3[e3 + 3];\n    let h3 = 3 * n3[0] - 2 * s3[0] - a3[0];\n    h3 *= h3;\n    let r2 = 3 * n3[1] - 2 * s3[1] - a3[1];\n    r2 *= r2;\n    let i2 = 3 * o3[0] - 2 * a3[0] - s3[0];\n    i2 *= i2;\n    let c2 = 3 * o3[1] - 2 * a3[1] - s3[1];\n    return c2 *= c2, h3 < i2 && (h3 = i2), r2 < c2 && (r2 = c2), h3 + r2;\n  }(t2, e2) < s2) {\n    const s3 = t2[e2 + 0];\n    if (o2.length) {\n      (a2 = o2[o2.length - 1], h2 = s3, Math.sqrt(N(a2, h2))) > 1 && o2.push(s3);\n    } else o2.push(s3);\n    o2.push(t2[e2 + 3]);\n  } else {\n    const n3 = 0.5, a3 = t2[e2 + 0], h3 = t2[e2 + 1], r2 = t2[e2 + 2], i2 = t2[e2 + 3], c2 = J(a3, h3, n3), l2 = J(h3, r2, n3), u2 = J(r2, i2, n3), p2 = J(c2, l2, n3), f2 = J(l2, u2, n3), d2 = J(p2, f2, n3);\n    K([a3, c2, p2, d2], 0, s2, o2), K([d2, f2, u2, i2], 0, s2, o2);\n  }\n  var a2, h2;\n  return o2;\n}\n__name(K, \"K\");\nfunction U(t2, e2) {\n  return X(t2, 0, t2.length, e2);\n}\n__name(U, \"U\");\nfunction X(t2, e2, s2, n2, o2) {\n  const a2 = o2 || [], h2 = t2[e2], r2 = t2[s2 - 1];\n  let i2 = 0, c2 = 1;\n  for (let n3 = e2 + 1; n3 < s2 - 1; ++n3) {\n    const e3 = B(t2[n3], h2, r2);\n    e3 > i2 && (i2 = e3, c2 = n3);\n  }\n  return Math.sqrt(i2) > n2 ? (X(t2, e2, c2 + 1, n2, a2), X(t2, c2, s2, n2, a2)) : (a2.length || a2.push(h2), a2.push(r2)), a2;\n}\n__name(X, \"X\");\nfunction Y(t2, e2 = 0.15, s2) {\n  const n2 = [], o2 = (t2.length - 1) / 3;\n  for (let s3 = 0; s3 < o2; s3++) {\n    K(t2, 3 * s3, e2, n2);\n  }\n  return s2 && s2 > 0 ? X(n2, 0, n2.length, s2) : n2;\n}\n__name(Y, \"Y\");\nvar tt = \"none\";\nvar et = class {\n  static {\n    __name(this, \"et\");\n  }\n  constructor(t2) {\n    this.defaultOptions = { maxRandomnessOffset: 2, roughness: 1, bowing: 1, stroke: \"#000\", strokeWidth: 1, curveTightness: 0, curveFitting: 0.95, curveStepCount: 9, fillStyle: \"hachure\", fillWeight: -1, hachureAngle: -41, hachureGap: -1, dashOffset: -1, dashGap: -1, zigzagOffset: -1, seed: 0, disableMultiStroke: false, disableMultiStrokeFill: false, preserveVertices: false, fillShapeRoughnessGain: 0.8 }, this.config = t2 || {}, this.config.options && (this.defaultOptions = this._o(this.config.options));\n  }\n  static newSeed() {\n    return Math.floor(Math.random() * 2 ** 31);\n  }\n  _o(t2) {\n    return t2 ? Object.assign({}, this.defaultOptions, t2) : this.defaultOptions;\n  }\n  _d(t2, e2, s2) {\n    return { shape: t2, sets: e2 || [], options: s2 || this.defaultOptions };\n  }\n  line(t2, e2, s2, n2, o2) {\n    const a2 = this._o(o2);\n    return this._d(\"line\", [v(t2, e2, s2, n2, a2)], a2);\n  }\n  rectangle(t2, e2, s2, n2, o2) {\n    const a2 = this._o(o2), h2 = [], r2 = O(t2, e2, s2, n2, a2);\n    if (a2.fill) {\n      const o3 = [[t2, e2], [t2 + s2, e2], [t2 + s2, e2 + n2], [t2, e2 + n2]];\n      \"solid\" === a2.fillStyle ? h2.push(I([o3], a2)) : h2.push(C([o3], a2));\n    }\n    return a2.stroke !== tt && h2.push(r2), this._d(\"rectangle\", h2, a2);\n  }\n  ellipse(t2, e2, s2, n2, o2) {\n    const a2 = this._o(o2), h2 = [], r2 = T(s2, n2, a2), i2 = D(t2, e2, a2, r2);\n    if (a2.fill) if (\"solid\" === a2.fillStyle) {\n      const s3 = D(t2, e2, a2, r2).opset;\n      s3.type = \"fillPath\", h2.push(s3);\n    } else h2.push(C([i2.estimatedPoints], a2));\n    return a2.stroke !== tt && h2.push(i2.opset), this._d(\"ellipse\", h2, a2);\n  }\n  circle(t2, e2, s2, n2) {\n    const o2 = this.ellipse(t2, e2, s2, s2, n2);\n    return o2.shape = \"circle\", o2;\n  }\n  linearPath(t2, e2) {\n    const s2 = this._o(e2);\n    return this._d(\"linearPath\", [S(t2, false, s2)], s2);\n  }\n  arc(t2, e2, s2, n2, o2, a2, h2 = false, r2) {\n    const i2 = this._o(r2), c2 = [], l2 = A(t2, e2, s2, n2, o2, a2, h2, true, i2);\n    if (h2 && i2.fill) if (\"solid\" === i2.fillStyle) {\n      const h3 = Object.assign({}, i2);\n      h3.disableMultiStroke = true;\n      const r3 = A(t2, e2, s2, n2, o2, a2, true, false, h3);\n      r3.type = \"fillPath\", c2.push(r3);\n    } else c2.push(function(t3, e3, s3, n3, o3, a3, h3) {\n      const r3 = t3, i3 = e3;\n      let c3 = Math.abs(s3 / 2), l3 = Math.abs(n3 / 2);\n      c3 += G(0.01 * c3, h3), l3 += G(0.01 * l3, h3);\n      let u2 = o3, p2 = a3;\n      for (; u2 < 0; ) u2 += 2 * Math.PI, p2 += 2 * Math.PI;\n      p2 - u2 > 2 * Math.PI && (u2 = 0, p2 = 2 * Math.PI);\n      const f2 = (p2 - u2) / h3.curveStepCount, d2 = [];\n      for (let t4 = u2; t4 <= p2; t4 += f2) d2.push([r3 + c3 * Math.cos(t4), i3 + l3 * Math.sin(t4)]);\n      return d2.push([r3 + c3 * Math.cos(p2), i3 + l3 * Math.sin(p2)]), d2.push([r3, i3]), C([d2], h3);\n    }(t2, e2, s2, n2, o2, a2, i2));\n    return i2.stroke !== tt && c2.push(l2), this._d(\"arc\", c2, i2);\n  }\n  curve(t2, e2) {\n    const s2 = this._o(e2), n2 = [], o2 = L(t2, s2);\n    if (s2.fill && s2.fill !== tt) if (\"solid\" === s2.fillStyle) {\n      const e3 = L(t2, Object.assign(Object.assign({}, s2), { disableMultiStroke: true, roughness: s2.roughness ? s2.roughness + s2.fillShapeRoughnessGain : 0 }));\n      n2.push({ type: \"fillPath\", ops: this._mergedShape(e3.ops) });\n    } else {\n      const e3 = [], o3 = t2;\n      if (o3.length) {\n        const t3 = \"number\" == typeof o3[0][0] ? [o3] : o3;\n        for (const n3 of t3) n3.length < 3 ? e3.push(...n3) : 3 === n3.length ? e3.push(...Y(H([n3[0], n3[0], n3[1], n3[2]]), 10, (1 + s2.roughness) / 2)) : e3.push(...Y(H(n3), 10, (1 + s2.roughness) / 2));\n      }\n      e3.length && n2.push(C([e3], s2));\n    }\n    return s2.stroke !== tt && n2.push(o2), this._d(\"curve\", n2, s2);\n  }\n  polygon(t2, e2) {\n    const s2 = this._o(e2), n2 = [], o2 = S(t2, true, s2);\n    return s2.fill && (\"solid\" === s2.fillStyle ? n2.push(I([t2], s2)) : n2.push(C([t2], s2))), s2.stroke !== tt && n2.push(o2), this._d(\"polygon\", n2, s2);\n  }\n  path(t2, e2) {\n    const s2 = this._o(e2), n2 = [];\n    if (!t2) return this._d(\"path\", n2, s2);\n    t2 = (t2 || \"\").replace(/\\n/g, \" \").replace(/(-\\s)/g, \"-\").replace(\"/(ss)/g\", \" \");\n    const o2 = s2.fill && \"transparent\" !== s2.fill && s2.fill !== tt, a2 = s2.stroke !== tt, h2 = !!(s2.simplification && s2.simplification < 1), r2 = function(t3, e3, s3) {\n      const n3 = m(y(b(t3))), o3 = [];\n      let a3 = [], h3 = [0, 0], r3 = [];\n      const i3 = /* @__PURE__ */ __name(() => {\n        r3.length >= 4 && a3.push(...Y(r3, e3)), r3 = [];\n      }, \"i\"), c2 = /* @__PURE__ */ __name(() => {\n        i3(), a3.length && (o3.push(a3), a3 = []);\n      }, \"c\");\n      for (const { key: t4, data: e4 } of n3) switch (t4) {\n        case \"M\":\n          c2(), h3 = [e4[0], e4[1]], a3.push(h3);\n          break;\n        case \"L\":\n          i3(), a3.push([e4[0], e4[1]]);\n          break;\n        case \"C\":\n          if (!r3.length) {\n            const t5 = a3.length ? a3[a3.length - 1] : h3;\n            r3.push([t5[0], t5[1]]);\n          }\n          r3.push([e4[0], e4[1]]), r3.push([e4[2], e4[3]]), r3.push([e4[4], e4[5]]);\n          break;\n        case \"Z\":\n          i3(), a3.push([h3[0], h3[1]]);\n      }\n      if (c2(), !s3) return o3;\n      const l2 = [];\n      for (const t4 of o3) {\n        const e4 = U(t4, s3);\n        e4.length && l2.push(e4);\n      }\n      return l2;\n    }(t2, 1, h2 ? 4 - 4 * (s2.simplification || 1) : (1 + s2.roughness) / 2), i2 = _(t2, s2);\n    if (o2) if (\"solid\" === s2.fillStyle) if (1 === r2.length) {\n      const e3 = _(t2, Object.assign(Object.assign({}, s2), { disableMultiStroke: true, roughness: s2.roughness ? s2.roughness + s2.fillShapeRoughnessGain : 0 }));\n      n2.push({ type: \"fillPath\", ops: this._mergedShape(e3.ops) });\n    } else n2.push(I(r2, s2));\n    else n2.push(C(r2, s2));\n    return a2 && (h2 ? r2.forEach((t3) => {\n      n2.push(S(t3, false, s2));\n    }) : n2.push(i2)), this._d(\"path\", n2, s2);\n  }\n  opsToPath(t2, e2) {\n    let s2 = \"\";\n    for (const n2 of t2.ops) {\n      const t3 = \"number\" == typeof e2 && e2 >= 0 ? n2.data.map((t4) => +t4.toFixed(e2)) : n2.data;\n      switch (n2.op) {\n        case \"move\":\n          s2 += `M${t3[0]} ${t3[1]} `;\n          break;\n        case \"bcurveTo\":\n          s2 += `C${t3[0]} ${t3[1]}, ${t3[2]} ${t3[3]}, ${t3[4]} ${t3[5]} `;\n          break;\n        case \"lineTo\":\n          s2 += `L${t3[0]} ${t3[1]} `;\n      }\n    }\n    return s2.trim();\n  }\n  toPaths(t2) {\n    const e2 = t2.sets || [], s2 = t2.options || this.defaultOptions, n2 = [];\n    for (const t3 of e2) {\n      let e3 = null;\n      switch (t3.type) {\n        case \"path\":\n          e3 = { d: this.opsToPath(t3), stroke: s2.stroke, strokeWidth: s2.strokeWidth, fill: tt };\n          break;\n        case \"fillPath\":\n          e3 = { d: this.opsToPath(t3), stroke: tt, strokeWidth: 0, fill: s2.fill || tt };\n          break;\n        case \"fillSketch\":\n          e3 = this.fillSketch(t3, s2);\n      }\n      e3 && n2.push(e3);\n    }\n    return n2;\n  }\n  fillSketch(t2, e2) {\n    let s2 = e2.fillWeight;\n    return s2 < 0 && (s2 = e2.strokeWidth / 2), { d: this.opsToPath(t2), stroke: e2.fill || tt, strokeWidth: s2, fill: tt };\n  }\n  _mergedShape(t2) {\n    return t2.filter((t3, e2) => 0 === e2 || \"move\" !== t3.op);\n  }\n};\nvar st = class {\n  static {\n    __name(this, \"st\");\n  }\n  constructor(t2, e2) {\n    this.canvas = t2, this.ctx = this.canvas.getContext(\"2d\"), this.gen = new et(e2);\n  }\n  draw(t2) {\n    const e2 = t2.sets || [], s2 = t2.options || this.getDefaultOptions(), n2 = this.ctx, o2 = t2.options.fixedDecimalPlaceDigits;\n    for (const a2 of e2) switch (a2.type) {\n      case \"path\":\n        n2.save(), n2.strokeStyle = \"none\" === s2.stroke ? \"transparent\" : s2.stroke, n2.lineWidth = s2.strokeWidth, s2.strokeLineDash && n2.setLineDash(s2.strokeLineDash), s2.strokeLineDashOffset && (n2.lineDashOffset = s2.strokeLineDashOffset), this._drawToContext(n2, a2, o2), n2.restore();\n        break;\n      case \"fillPath\": {\n        n2.save(), n2.fillStyle = s2.fill || \"\";\n        const e3 = \"curve\" === t2.shape || \"polygon\" === t2.shape || \"path\" === t2.shape ? \"evenodd\" : \"nonzero\";\n        this._drawToContext(n2, a2, o2, e3), n2.restore();\n        break;\n      }\n      case \"fillSketch\":\n        this.fillSketch(n2, a2, s2);\n    }\n  }\n  fillSketch(t2, e2, s2) {\n    let n2 = s2.fillWeight;\n    n2 < 0 && (n2 = s2.strokeWidth / 2), t2.save(), s2.fillLineDash && t2.setLineDash(s2.fillLineDash), s2.fillLineDashOffset && (t2.lineDashOffset = s2.fillLineDashOffset), t2.strokeStyle = s2.fill || \"\", t2.lineWidth = n2, this._drawToContext(t2, e2, s2.fixedDecimalPlaceDigits), t2.restore();\n  }\n  _drawToContext(t2, e2, s2, n2 = \"nonzero\") {\n    t2.beginPath();\n    for (const n3 of e2.ops) {\n      const e3 = \"number\" == typeof s2 && s2 >= 0 ? n3.data.map((t3) => +t3.toFixed(s2)) : n3.data;\n      switch (n3.op) {\n        case \"move\":\n          t2.moveTo(e3[0], e3[1]);\n          break;\n        case \"bcurveTo\":\n          t2.bezierCurveTo(e3[0], e3[1], e3[2], e3[3], e3[4], e3[5]);\n          break;\n        case \"lineTo\":\n          t2.lineTo(e3[0], e3[1]);\n      }\n    }\n    \"fillPath\" === e2.type ? t2.fill(n2) : t2.stroke();\n  }\n  get generator() {\n    return this.gen;\n  }\n  getDefaultOptions() {\n    return this.gen.defaultOptions;\n  }\n  line(t2, e2, s2, n2, o2) {\n    const a2 = this.gen.line(t2, e2, s2, n2, o2);\n    return this.draw(a2), a2;\n  }\n  rectangle(t2, e2, s2, n2, o2) {\n    const a2 = this.gen.rectangle(t2, e2, s2, n2, o2);\n    return this.draw(a2), a2;\n  }\n  ellipse(t2, e2, s2, n2, o2) {\n    const a2 = this.gen.ellipse(t2, e2, s2, n2, o2);\n    return this.draw(a2), a2;\n  }\n  circle(t2, e2, s2, n2) {\n    const o2 = this.gen.circle(t2, e2, s2, n2);\n    return this.draw(o2), o2;\n  }\n  linearPath(t2, e2) {\n    const s2 = this.gen.linearPath(t2, e2);\n    return this.draw(s2), s2;\n  }\n  polygon(t2, e2) {\n    const s2 = this.gen.polygon(t2, e2);\n    return this.draw(s2), s2;\n  }\n  arc(t2, e2, s2, n2, o2, a2, h2 = false, r2) {\n    const i2 = this.gen.arc(t2, e2, s2, n2, o2, a2, h2, r2);\n    return this.draw(i2), i2;\n  }\n  curve(t2, e2) {\n    const s2 = this.gen.curve(t2, e2);\n    return this.draw(s2), s2;\n  }\n  path(t2, e2) {\n    const s2 = this.gen.path(t2, e2);\n    return this.draw(s2), s2;\n  }\n};\nvar nt = \"http://www.w3.org/2000/svg\";\nvar ot = class {\n  static {\n    __name(this, \"ot\");\n  }\n  constructor(t2, e2) {\n    this.svg = t2, this.gen = new et(e2);\n  }\n  draw(t2) {\n    const e2 = t2.sets || [], s2 = t2.options || this.getDefaultOptions(), n2 = this.svg.ownerDocument || window.document, o2 = n2.createElementNS(nt, \"g\"), a2 = t2.options.fixedDecimalPlaceDigits;\n    for (const h2 of e2) {\n      let e3 = null;\n      switch (h2.type) {\n        case \"path\":\n          e3 = n2.createElementNS(nt, \"path\"), e3.setAttribute(\"d\", this.opsToPath(h2, a2)), e3.setAttribute(\"stroke\", s2.stroke), e3.setAttribute(\"stroke-width\", s2.strokeWidth + \"\"), e3.setAttribute(\"fill\", \"none\"), s2.strokeLineDash && e3.setAttribute(\"stroke-dasharray\", s2.strokeLineDash.join(\" \").trim()), s2.strokeLineDashOffset && e3.setAttribute(\"stroke-dashoffset\", `${s2.strokeLineDashOffset}`);\n          break;\n        case \"fillPath\":\n          e3 = n2.createElementNS(nt, \"path\"), e3.setAttribute(\"d\", this.opsToPath(h2, a2)), e3.setAttribute(\"stroke\", \"none\"), e3.setAttribute(\"stroke-width\", \"0\"), e3.setAttribute(\"fill\", s2.fill || \"\"), \"curve\" !== t2.shape && \"polygon\" !== t2.shape || e3.setAttribute(\"fill-rule\", \"evenodd\");\n          break;\n        case \"fillSketch\":\n          e3 = this.fillSketch(n2, h2, s2);\n      }\n      e3 && o2.appendChild(e3);\n    }\n    return o2;\n  }\n  fillSketch(t2, e2, s2) {\n    let n2 = s2.fillWeight;\n    n2 < 0 && (n2 = s2.strokeWidth / 2);\n    const o2 = t2.createElementNS(nt, \"path\");\n    return o2.setAttribute(\"d\", this.opsToPath(e2, s2.fixedDecimalPlaceDigits)), o2.setAttribute(\"stroke\", s2.fill || \"\"), o2.setAttribute(\"stroke-width\", n2 + \"\"), o2.setAttribute(\"fill\", \"none\"), s2.fillLineDash && o2.setAttribute(\"stroke-dasharray\", s2.fillLineDash.join(\" \").trim()), s2.fillLineDashOffset && o2.setAttribute(\"stroke-dashoffset\", `${s2.fillLineDashOffset}`), o2;\n  }\n  get generator() {\n    return this.gen;\n  }\n  getDefaultOptions() {\n    return this.gen.defaultOptions;\n  }\n  opsToPath(t2, e2) {\n    return this.gen.opsToPath(t2, e2);\n  }\n  line(t2, e2, s2, n2, o2) {\n    const a2 = this.gen.line(t2, e2, s2, n2, o2);\n    return this.draw(a2);\n  }\n  rectangle(t2, e2, s2, n2, o2) {\n    const a2 = this.gen.rectangle(t2, e2, s2, n2, o2);\n    return this.draw(a2);\n  }\n  ellipse(t2, e2, s2, n2, o2) {\n    const a2 = this.gen.ellipse(t2, e2, s2, n2, o2);\n    return this.draw(a2);\n  }\n  circle(t2, e2, s2, n2) {\n    const o2 = this.gen.circle(t2, e2, s2, n2);\n    return this.draw(o2);\n  }\n  linearPath(t2, e2) {\n    const s2 = this.gen.linearPath(t2, e2);\n    return this.draw(s2);\n  }\n  polygon(t2, e2) {\n    const s2 = this.gen.polygon(t2, e2);\n    return this.draw(s2);\n  }\n  arc(t2, e2, s2, n2, o2, a2, h2 = false, r2) {\n    const i2 = this.gen.arc(t2, e2, s2, n2, o2, a2, h2, r2);\n    return this.draw(i2);\n  }\n  curve(t2, e2) {\n    const s2 = this.gen.curve(t2, e2);\n    return this.draw(s2);\n  }\n  path(t2, e2) {\n    const s2 = this.gen.path(t2, e2);\n    return this.draw(s2);\n  }\n};\nvar at = { canvas: /* @__PURE__ */ __name((t2, e2) => new st(t2, e2), \"canvas\"), svg: /* @__PURE__ */ __name((t2, e2) => new ot(t2, e2), \"svg\"), generator: /* @__PURE__ */ __name((t2) => new et(t2), \"generator\"), newSeed: /* @__PURE__ */ __name(() => et.newSeed(), \"newSeed\") };\n\n// src/rendering-util/rendering-elements/intersect/intersect-rect.js\nvar intersectRect = /* @__PURE__ */ __name((node, point) => {\n  var x2 = node.x;\n  var y2 = node.y;\n  var dx = point.x - x2;\n  var dy = point.y - y2;\n  var w2 = node.width / 2;\n  var h2 = node.height / 2;\n  var sx, sy;\n  if (Math.abs(dy) * w2 > Math.abs(dx) * h2) {\n    if (dy < 0) {\n      h2 = -h2;\n    }\n    sx = dy === 0 ? 0 : h2 * dx / dy;\n    sy = h2;\n  } else {\n    if (dx < 0) {\n      w2 = -w2;\n    }\n    sx = w2;\n    sy = dx === 0 ? 0 : w2 * dy / dx;\n  }\n  return { x: x2 + sx, y: y2 + sy };\n}, \"intersectRect\");\nvar intersect_rect_default = intersectRect;\n\n// src/rendering-util/rendering-elements/createLabel.js\nfunction applyStyle(dom, styleFn) {\n  if (styleFn) {\n    dom.attr(\"style\", styleFn);\n  }\n}\n__name(applyStyle, \"applyStyle\");\nasync function addHtmlLabel(node) {\n  const fo = select_default(document.createElementNS(\"http://www.w3.org/2000/svg\", \"foreignObject\"));\n  const div = fo.append(\"xhtml:div\");\n  let label = node.label;\n  if (node.label && hasKatex(node.label)) {\n    label = await renderKatex(node.label.replace(common_default.lineBreakRegex, \"\\n\"), getConfig2());\n  }\n  const labelClass = node.isNode ? \"nodeLabel\" : \"edgeLabel\";\n  div.html(\n    '<span class=\"' + labelClass + '\" ' + (node.labelStyle ? 'style=\"' + node.labelStyle + '\"' : \"\") + // codeql [js/html-constructed-from-input] : false positive\n    \">\" + label + \"</span>\"\n  );\n  applyStyle(div, node.labelStyle);\n  div.style(\"display\", \"inline-block\");\n  div.style(\"padding-right\", \"1px\");\n  div.style(\"white-space\", \"nowrap\");\n  div.attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\");\n  return fo.node();\n}\n__name(addHtmlLabel, \"addHtmlLabel\");\nvar createLabel = /* @__PURE__ */ __name(async (_vertexText, style, isTitle, isNode) => {\n  let vertexText = _vertexText || \"\";\n  if (typeof vertexText === \"object\") {\n    vertexText = vertexText[0];\n  }\n  if (evaluate(getConfig2().flowchart.htmlLabels)) {\n    vertexText = vertexText.replace(/\\\\n|\\n/g, \"<br />\");\n    log.info(\"vertexText\" + vertexText);\n    const node = {\n      isNode,\n      label: decodeEntities(vertexText).replace(\n        /fa[blrs]?:fa-[\\w-]+/g,\n        (s2) => `<i class='${s2.replace(\":\", \" \")}'></i>`\n      ),\n      labelStyle: style ? style.replace(\"fill:\", \"color:\") : style\n    };\n    let vertexNode = await addHtmlLabel(node);\n    return vertexNode;\n  } else {\n    const svgLabel = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n    svgLabel.setAttribute(\"style\", style.replace(\"color:\", \"fill:\"));\n    let rows = [];\n    if (typeof vertexText === \"string\") {\n      rows = vertexText.split(/\\\\n|\\n|<br\\s*\\/?>/gi);\n    } else if (Array.isArray(vertexText)) {\n      rows = vertexText;\n    } else {\n      rows = [];\n    }\n    for (const row of rows) {\n      const tspan = document.createElementNS(\"http://www.w3.org/2000/svg\", \"tspan\");\n      tspan.setAttributeNS(\"http://www.w3.org/XML/1998/namespace\", \"xml:space\", \"preserve\");\n      tspan.setAttribute(\"dy\", \"1em\");\n      tspan.setAttribute(\"x\", \"0\");\n      if (isTitle) {\n        tspan.setAttribute(\"class\", \"title-row\");\n      } else {\n        tspan.setAttribute(\"class\", \"row\");\n      }\n      tspan.textContent = row.trim();\n      svgLabel.appendChild(tspan);\n    }\n    return svgLabel;\n  }\n}, \"createLabel\");\nvar createLabel_default = createLabel;\n\n// src/rendering-util/rendering-elements/shapes/roundedRectPath.ts\nvar createRoundedRectPathD = /* @__PURE__ */ __name((x2, y2, totalWidth, totalHeight, radius) => [\n  \"M\",\n  x2 + radius,\n  y2,\n  // Move to the first point\n  \"H\",\n  x2 + totalWidth - radius,\n  // Draw horizontal line to the beginning of the right corner\n  \"A\",\n  radius,\n  radius,\n  0,\n  0,\n  1,\n  x2 + totalWidth,\n  y2 + radius,\n  // Draw arc to the right top corner\n  \"V\",\n  y2 + totalHeight - radius,\n  // Draw vertical line down to the beginning of the right bottom corner\n  \"A\",\n  radius,\n  radius,\n  0,\n  0,\n  1,\n  x2 + totalWidth - radius,\n  y2 + totalHeight,\n  // Draw arc to the right bottom corner\n  \"H\",\n  x2 + radius,\n  // Draw horizontal line to the beginning of the left bottom corner\n  \"A\",\n  radius,\n  radius,\n  0,\n  0,\n  1,\n  x2,\n  y2 + totalHeight - radius,\n  // Draw arc to the left bottom corner\n  \"V\",\n  y2 + radius,\n  // Draw vertical line up to the beginning of the left top corner\n  \"A\",\n  radius,\n  radius,\n  0,\n  0,\n  1,\n  x2 + radius,\n  y2,\n  // Draw arc to the left top corner\n  \"Z\"\n  // Close the path\n].join(\" \"), \"createRoundedRectPathD\");\n\n// src/rendering-util/rendering-elements/shapes/handDrawnShapeStyles.ts\nvar solidStateFill = /* @__PURE__ */ __name((color) => {\n  const { handDrawnSeed } = getConfig2();\n  return {\n    fill: color,\n    hachureAngle: 120,\n    // angle of hachure,\n    hachureGap: 4,\n    fillWeight: 2,\n    roughness: 0.7,\n    stroke: color,\n    seed: handDrawnSeed\n  };\n}, \"solidStateFill\");\nvar compileStyles = /* @__PURE__ */ __name((node) => {\n  const stylesMap = styles2Map([...node.cssCompiledStyles || [], ...node.cssStyles || []]);\n  return { stylesMap, stylesArray: [...stylesMap] };\n}, \"compileStyles\");\nvar styles2Map = /* @__PURE__ */ __name((styles) => {\n  const styleMap = /* @__PURE__ */ new Map();\n  styles.forEach((style) => {\n    const [key, value] = style.split(\":\");\n    styleMap.set(key.trim(), value?.trim());\n  });\n  return styleMap;\n}, \"styles2Map\");\nvar isLabelStyle = /* @__PURE__ */ __name((key) => {\n  return key === \"color\" || key === \"font-size\" || key === \"font-family\" || key === \"font-weight\" || key === \"font-style\" || key === \"text-decoration\" || key === \"text-align\" || key === \"text-transform\" || key === \"line-height\" || key === \"letter-spacing\" || key === \"word-spacing\" || key === \"text-shadow\" || key === \"text-overflow\" || key === \"white-space\" || key === \"word-wrap\" || key === \"word-break\" || key === \"overflow-wrap\" || key === \"hyphens\";\n}, \"isLabelStyle\");\nvar styles2String = /* @__PURE__ */ __name((node) => {\n  const { stylesArray } = compileStyles(node);\n  const labelStyles = [];\n  const nodeStyles = [];\n  const borderStyles = [];\n  const backgroundStyles = [];\n  stylesArray.forEach((style) => {\n    const key = style[0];\n    if (isLabelStyle(key)) {\n      labelStyles.push(style.join(\":\") + \" !important\");\n    } else {\n      nodeStyles.push(style.join(\":\") + \" !important\");\n      if (key.includes(\"stroke\")) {\n        borderStyles.push(style.join(\":\") + \" !important\");\n      }\n      if (key === \"fill\") {\n        backgroundStyles.push(style.join(\":\") + \" !important\");\n      }\n    }\n  });\n  return {\n    labelStyles: labelStyles.join(\";\"),\n    nodeStyles: nodeStyles.join(\";\"),\n    stylesArray,\n    borderStyles,\n    backgroundStyles\n  };\n}, \"styles2String\");\nvar userNodeOverrides = /* @__PURE__ */ __name((node, options) => {\n  const { themeVariables, handDrawnSeed } = getConfig2();\n  const { nodeBorder, mainBkg } = themeVariables;\n  const { stylesMap } = compileStyles(node);\n  const result = Object.assign(\n    {\n      roughness: 0.7,\n      fill: stylesMap.get(\"fill\") || mainBkg,\n      fillStyle: \"hachure\",\n      // solid fill\n      fillWeight: 4,\n      hachureGap: 5.2,\n      stroke: stylesMap.get(\"stroke\") || nodeBorder,\n      seed: handDrawnSeed,\n      strokeWidth: stylesMap.get(\"stroke-width\")?.replace(\"px\", \"\") || 1.3,\n      fillLineDash: [0, 0]\n    },\n    options\n  );\n  return result;\n}, \"userNodeOverrides\");\n\n// src/rendering-util/rendering-elements/clusters.js\nvar rect = /* @__PURE__ */ __name(async (parent, node) => {\n  log.info(\"Creating subgraph rect for \", node.id, node);\n  const siteConfig = getConfig2();\n  const { themeVariables, handDrawnSeed } = siteConfig;\n  const { clusterBkg, clusterBorder } = themeVariables;\n  const { labelStyles, nodeStyles, borderStyles, backgroundStyles } = styles2String(node);\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"cluster \" + node.cssClasses).attr(\"id\", node.id).attr(\"data-look\", node.look);\n  const useHtmlLabels = evaluate(siteConfig.flowchart.htmlLabels);\n  const labelEl = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label \");\n  const text2 = await createText(labelEl, node.label, {\n    style: node.labelStyle,\n    useHtmlLabels,\n    isNode: true\n  });\n  let bbox = text2.getBBox();\n  if (evaluate(siteConfig.flowchart.htmlLabels)) {\n    const div = text2.children[0];\n    const dv = select_default(text2);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  const width = node.width <= bbox.width + node.padding ? bbox.width + node.padding : node.width;\n  if (node.width <= bbox.width + node.padding) {\n    node.diff = (width - node.width) / 2 - node.padding;\n  } else {\n    node.diff = -node.padding;\n  }\n  const height = node.height;\n  const x2 = node.x - width / 2;\n  const y2 = node.y - height / 2;\n  log.trace(\"Data \", node, JSON.stringify(node));\n  let rect2;\n  if (node.look === \"handDrawn\") {\n    const rc = at.svg(shapeSvg);\n    const options = userNodeOverrides(node, {\n      roughness: 0.7,\n      fill: clusterBkg,\n      // fill: 'red',\n      stroke: clusterBorder,\n      fillWeight: 3,\n      seed: handDrawnSeed\n    });\n    const roughNode = rc.path(createRoundedRectPathD(x2, y2, width, height, 0), options);\n    rect2 = shapeSvg.insert(() => {\n      log.debug(\"Rough node insert CXC\", roughNode);\n      return roughNode;\n    }, \":first-child\");\n    rect2.select(\"path:nth-child(2)\").attr(\"style\", borderStyles.join(\";\"));\n    rect2.select(\"path\").attr(\"style\", backgroundStyles.join(\";\").replace(\"fill\", \"stroke\"));\n  } else {\n    rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n    rect2.attr(\"style\", nodeStyles).attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", x2).attr(\"y\", y2).attr(\"width\", width).attr(\"height\", height);\n  }\n  const { subGraphTitleTopMargin } = getSubGraphTitleMargins(siteConfig);\n  labelEl.attr(\n    \"transform\",\n    // This puts the label on top of the box instead of inside it\n    `translate(${node.x - bbox.width / 2}, ${node.y - node.height / 2 + subGraphTitleTopMargin})`\n  );\n  if (labelStyles) {\n    const span = labelEl.select(\"span\");\n    if (span) {\n      span.attr(\"style\", labelStyles);\n    }\n  }\n  const rectBox = rect2.node().getBBox();\n  node.offsetX = 0;\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.offsetY = bbox.height - node.padding / 2;\n  node.intersect = function(point) {\n    return intersect_rect_default(node, point);\n  };\n  return { cluster: shapeSvg, labelBBox: bbox };\n}, \"rect\");\nvar noteGroup = /* @__PURE__ */ __name((parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"note-cluster\").attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding).attr(\"fill\", \"none\");\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersect_rect_default(node, point);\n  };\n  return { cluster: shapeSvg, labelBBox: { width: 0, height: 0 } };\n}, \"noteGroup\");\nvar roundedWithTitle = /* @__PURE__ */ __name(async (parent, node) => {\n  const siteConfig = getConfig2();\n  const { themeVariables, handDrawnSeed } = siteConfig;\n  const { altBackground, compositeBackground, compositeTitleBackground, nodeBorder } = themeVariables;\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.cssClasses).attr(\"id\", node.id).attr(\"data-id\", node.id).attr(\"data-look\", node.look);\n  const outerRectG = shapeSvg.insert(\"g\", \":first-child\");\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  let innerRect = shapeSvg.append(\"rect\");\n  const text2 = label.node().appendChild(await createLabel_default(node.label, node.labelStyle, void 0, true));\n  let bbox = text2.getBBox();\n  if (evaluate(siteConfig.flowchart.htmlLabels)) {\n    const div = text2.children[0];\n    const dv = select_default(text2);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = (node.width <= bbox.width + node.padding ? bbox.width + node.padding : node.width) + padding;\n  if (node.width <= bbox.width + node.padding) {\n    node.diff = (width - node.width) / 2 - node.padding;\n  } else {\n    node.diff = -node.padding;\n  }\n  const height = node.height + padding;\n  const innerHeight = node.height + padding - bbox.height - 6;\n  const x2 = node.x - width / 2;\n  const y2 = node.y - height / 2;\n  node.width = width;\n  const innerY = node.y - node.height / 2 - halfPadding + bbox.height + 2;\n  let rect2;\n  if (node.look === \"handDrawn\") {\n    const isAlt = node.cssClasses.includes(\"statediagram-cluster-alt\");\n    const rc = at.svg(shapeSvg);\n    const roughOuterNode = node.rx || node.ry ? rc.path(createRoundedRectPathD(x2, y2, width, height, 10), {\n      roughness: 0.7,\n      fill: compositeTitleBackground,\n      fillStyle: \"solid\",\n      stroke: nodeBorder,\n      seed: handDrawnSeed\n    }) : rc.rectangle(x2, y2, width, height, { seed: handDrawnSeed });\n    rect2 = shapeSvg.insert(() => roughOuterNode, \":first-child\");\n    const roughInnerNode = rc.rectangle(x2, innerY, width, innerHeight, {\n      fill: isAlt ? altBackground : compositeBackground,\n      fillStyle: isAlt ? \"hachure\" : \"solid\",\n      stroke: nodeBorder,\n      seed: handDrawnSeed\n    });\n    rect2 = shapeSvg.insert(() => roughOuterNode, \":first-child\");\n    innerRect = shapeSvg.insert(() => roughInnerNode);\n  } else {\n    rect2 = outerRectG.insert(\"rect\", \":first-child\");\n    const outerRectClass = \"outer\";\n    rect2.attr(\"class\", outerRectClass).attr(\"x\", x2).attr(\"y\", y2).attr(\"width\", width).attr(\"height\", height).attr(\"data-look\", node.look);\n    innerRect.attr(\"class\", \"inner\").attr(\"x\", x2).attr(\"y\", innerY).attr(\"width\", width).attr(\"height\", innerHeight);\n  }\n  label.attr(\n    \"transform\",\n    `translate(${node.x - bbox.width / 2}, ${y2 + 1 - (evaluate(siteConfig.flowchart.htmlLabels) ? 0 : 3)})`\n  );\n  const rectBox = rect2.node().getBBox();\n  node.height = rectBox.height;\n  node.offsetX = 0;\n  node.offsetY = bbox.height - node.padding / 2;\n  node.labelBBox = bbox;\n  node.intersect = function(point) {\n    return intersect_rect_default(node, point);\n  };\n  return { cluster: shapeSvg, labelBBox: bbox };\n}, \"roundedWithTitle\");\nvar kanbanSection = /* @__PURE__ */ __name(async (parent, node) => {\n  log.info(\"Creating subgraph rect for \", node.id, node);\n  const siteConfig = getConfig2();\n  const { themeVariables, handDrawnSeed } = siteConfig;\n  const { clusterBkg, clusterBorder } = themeVariables;\n  const { labelStyles, nodeStyles, borderStyles, backgroundStyles } = styles2String(node);\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"cluster \" + node.cssClasses).attr(\"id\", node.id).attr(\"data-look\", node.look);\n  const useHtmlLabels = evaluate(siteConfig.flowchart.htmlLabels);\n  const labelEl = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label \");\n  const text2 = await createText(labelEl, node.label, {\n    style: node.labelStyle,\n    useHtmlLabels,\n    isNode: true,\n    width: node.width\n  });\n  let bbox = text2.getBBox();\n  if (evaluate(siteConfig.flowchart.htmlLabels)) {\n    const div = text2.children[0];\n    const dv = select_default(text2);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  const width = node.width <= bbox.width + node.padding ? bbox.width + node.padding : node.width;\n  if (node.width <= bbox.width + node.padding) {\n    node.diff = (width - node.width) / 2 - node.padding;\n  } else {\n    node.diff = -node.padding;\n  }\n  const height = node.height;\n  const x2 = node.x - width / 2;\n  const y2 = node.y - height / 2;\n  log.trace(\"Data \", node, JSON.stringify(node));\n  let rect2;\n  if (node.look === \"handDrawn\") {\n    const rc = at.svg(shapeSvg);\n    const options = userNodeOverrides(node, {\n      roughness: 0.7,\n      fill: clusterBkg,\n      // fill: 'red',\n      stroke: clusterBorder,\n      fillWeight: 4,\n      seed: handDrawnSeed\n    });\n    const roughNode = rc.path(createRoundedRectPathD(x2, y2, width, height, node.rx), options);\n    rect2 = shapeSvg.insert(() => {\n      log.debug(\"Rough node insert CXC\", roughNode);\n      return roughNode;\n    }, \":first-child\");\n    rect2.select(\"path:nth-child(2)\").attr(\"style\", borderStyles.join(\";\"));\n    rect2.select(\"path\").attr(\"style\", backgroundStyles.join(\";\").replace(\"fill\", \"stroke\"));\n  } else {\n    rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n    rect2.attr(\"style\", nodeStyles).attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", x2).attr(\"y\", y2).attr(\"width\", width).attr(\"height\", height);\n  }\n  const { subGraphTitleTopMargin } = getSubGraphTitleMargins(siteConfig);\n  labelEl.attr(\n    \"transform\",\n    // This puts the label on top of the box instead of inside it\n    `translate(${node.x - bbox.width / 2}, ${node.y - node.height / 2 + subGraphTitleTopMargin})`\n  );\n  if (labelStyles) {\n    const span = labelEl.select(\"span\");\n    if (span) {\n      span.attr(\"style\", labelStyles);\n    }\n  }\n  const rectBox = rect2.node().getBBox();\n  node.offsetX = 0;\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.offsetY = bbox.height - node.padding / 2;\n  node.intersect = function(point) {\n    return intersect_rect_default(node, point);\n  };\n  return { cluster: shapeSvg, labelBBox: bbox };\n}, \"kanbanSection\");\nvar divider = /* @__PURE__ */ __name((parent, node) => {\n  const siteConfig = getConfig2();\n  const { themeVariables, handDrawnSeed } = siteConfig;\n  const { nodeBorder } = themeVariables;\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.cssClasses).attr(\"id\", node.id).attr(\"data-look\", node.look);\n  const outerRectG = shapeSvg.insert(\"g\", \":first-child\");\n  const padding = 0 * node.padding;\n  const width = node.width + padding;\n  node.diff = -node.padding;\n  const height = node.height + padding;\n  const x2 = node.x - width / 2;\n  const y2 = node.y - height / 2;\n  node.width = width;\n  let rect2;\n  if (node.look === \"handDrawn\") {\n    const rc = at.svg(shapeSvg);\n    const roughOuterNode = rc.rectangle(x2, y2, width, height, {\n      fill: \"lightgrey\",\n      roughness: 0.5,\n      strokeLineDash: [5],\n      stroke: nodeBorder,\n      seed: handDrawnSeed\n    });\n    rect2 = shapeSvg.insert(() => roughOuterNode, \":first-child\");\n  } else {\n    rect2 = outerRectG.insert(\"rect\", \":first-child\");\n    const outerRectClass = \"divider\";\n    rect2.attr(\"class\", outerRectClass).attr(\"x\", x2).attr(\"y\", y2).attr(\"width\", width).attr(\"height\", height).attr(\"data-look\", node.look);\n  }\n  const rectBox = rect2.node().getBBox();\n  node.height = rectBox.height;\n  node.offsetX = 0;\n  node.offsetY = 0;\n  node.intersect = function(point) {\n    return intersect_rect_default(node, point);\n  };\n  return { cluster: shapeSvg, labelBBox: {} };\n}, \"divider\");\nvar squareRect = rect;\nvar shapes = {\n  rect,\n  squareRect,\n  roundedWithTitle,\n  noteGroup,\n  divider,\n  kanbanSection\n};\nvar clusterElems = /* @__PURE__ */ new Map();\nvar insertCluster = /* @__PURE__ */ __name(async (elem, node) => {\n  const shape = node.shape || \"rect\";\n  const cluster = await shapes[shape](elem, node);\n  clusterElems.set(node.id, cluster);\n  return cluster;\n}, \"insertCluster\");\nvar clear = /* @__PURE__ */ __name(() => {\n  clusterElems = /* @__PURE__ */ new Map();\n}, \"clear\");\n\n// src/rendering-util/rendering-elements/intersect/intersect-node.js\nfunction intersectNode(node, point) {\n  return node.intersect(point);\n}\n__name(intersectNode, \"intersectNode\");\nvar intersect_node_default = intersectNode;\n\n// src/rendering-util/rendering-elements/intersect/intersect-ellipse.js\nfunction intersectEllipse(node, rx, ry, point) {\n  var cx = node.x;\n  var cy = node.y;\n  var px = cx - point.x;\n  var py = cy - point.y;\n  var det = Math.sqrt(rx * rx * py * py + ry * ry * px * px);\n  var dx = Math.abs(rx * ry * px / det);\n  if (point.x < cx) {\n    dx = -dx;\n  }\n  var dy = Math.abs(rx * ry * py / det);\n  if (point.y < cy) {\n    dy = -dy;\n  }\n  return { x: cx + dx, y: cy + dy };\n}\n__name(intersectEllipse, \"intersectEllipse\");\nvar intersect_ellipse_default = intersectEllipse;\n\n// src/rendering-util/rendering-elements/intersect/intersect-circle.js\nfunction intersectCircle(node, rx, point) {\n  return intersect_ellipse_default(node, rx, rx, point);\n}\n__name(intersectCircle, \"intersectCircle\");\nvar intersect_circle_default = intersectCircle;\n\n// src/rendering-util/rendering-elements/intersect/intersect-line.js\nfunction intersectLine(p1, p2, q1, q2) {\n  var a1, a2, b1, b2, c1, c2;\n  var r1, r2, r3, r4;\n  var denom, offset, num;\n  var x2, y2;\n  a1 = p2.y - p1.y;\n  b1 = p1.x - p2.x;\n  c1 = p2.x * p1.y - p1.x * p2.y;\n  r3 = a1 * q1.x + b1 * q1.y + c1;\n  r4 = a1 * q2.x + b1 * q2.y + c1;\n  if (r3 !== 0 && r4 !== 0 && sameSign(r3, r4)) {\n    return;\n  }\n  a2 = q2.y - q1.y;\n  b2 = q1.x - q2.x;\n  c2 = q2.x * q1.y - q1.x * q2.y;\n  r1 = a2 * p1.x + b2 * p1.y + c2;\n  r2 = a2 * p2.x + b2 * p2.y + c2;\n  if (r1 !== 0 && r2 !== 0 && sameSign(r1, r2)) {\n    return;\n  }\n  denom = a1 * b2 - a2 * b1;\n  if (denom === 0) {\n    return;\n  }\n  offset = Math.abs(denom / 2);\n  num = b1 * c2 - b2 * c1;\n  x2 = num < 0 ? (num - offset) / denom : (num + offset) / denom;\n  num = a2 * c1 - a1 * c2;\n  y2 = num < 0 ? (num - offset) / denom : (num + offset) / denom;\n  return { x: x2, y: y2 };\n}\n__name(intersectLine, \"intersectLine\");\nfunction sameSign(r1, r2) {\n  return r1 * r2 > 0;\n}\n__name(sameSign, \"sameSign\");\nvar intersect_line_default = intersectLine;\n\n// src/rendering-util/rendering-elements/intersect/intersect-polygon.js\nfunction intersectPolygon(node, polyPoints, point) {\n  let x1 = node.x;\n  let y1 = node.y;\n  let intersections = [];\n  let minX = Number.POSITIVE_INFINITY;\n  let minY = Number.POSITIVE_INFINITY;\n  if (typeof polyPoints.forEach === \"function\") {\n    polyPoints.forEach(function(entry) {\n      minX = Math.min(minX, entry.x);\n      minY = Math.min(minY, entry.y);\n    });\n  } else {\n    minX = Math.min(minX, polyPoints.x);\n    minY = Math.min(minY, polyPoints.y);\n  }\n  let left = x1 - node.width / 2 - minX;\n  let top = y1 - node.height / 2 - minY;\n  for (let i2 = 0; i2 < polyPoints.length; i2++) {\n    let p1 = polyPoints[i2];\n    let p2 = polyPoints[i2 < polyPoints.length - 1 ? i2 + 1 : 0];\n    let intersect = intersect_line_default(\n      node,\n      point,\n      { x: left + p1.x, y: top + p1.y },\n      { x: left + p2.x, y: top + p2.y }\n    );\n    if (intersect) {\n      intersections.push(intersect);\n    }\n  }\n  if (!intersections.length) {\n    return node;\n  }\n  if (intersections.length > 1) {\n    intersections.sort(function(p2, q2) {\n      let pdx = p2.x - point.x;\n      let pdy = p2.y - point.y;\n      let distp = Math.sqrt(pdx * pdx + pdy * pdy);\n      let qdx = q2.x - point.x;\n      let qdy = q2.y - point.y;\n      let distq = Math.sqrt(qdx * qdx + qdy * qdy);\n      return distp < distq ? -1 : distp === distq ? 0 : 1;\n    });\n  }\n  return intersections[0];\n}\n__name(intersectPolygon, \"intersectPolygon\");\nvar intersect_polygon_default = intersectPolygon;\n\n// src/rendering-util/rendering-elements/intersect/index.js\nvar intersect_default = {\n  node: intersect_node_default,\n  circle: intersect_circle_default,\n  ellipse: intersect_ellipse_default,\n  polygon: intersect_polygon_default,\n  rect: intersect_rect_default\n};\n\n// src/rendering-util/rendering-elements/shapes/anchor.ts\nfunction anchor(parent, node) {\n  const { labelStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const classes = getNodeClasses(node);\n  let cssClasses = classes;\n  if (!classes) {\n    cssClasses = \"anchor\";\n  }\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", cssClasses).attr(\"id\", node.domId || node.id);\n  const radius = 1;\n  const { cssStyles } = node;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, { fill: \"black\", stroke: \"none\", fillStyle: \"solid\" });\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n  }\n  const roughNode = rc.circle(0, 0, radius * 2, options);\n  const circleElem = shapeSvg.insert(() => roughNode, \":first-child\");\n  circleElem.attr(\"class\", \"anchor\").attr(\"style\", handleUndefinedAttr(cssStyles));\n  updateNodeBounds(node, circleElem);\n  node.intersect = function(point) {\n    log.info(\"Circle intersect\", node, radius, point);\n    return intersect_default.circle(node, radius, point);\n  };\n  return shapeSvg;\n}\n__name(anchor, \"anchor\");\n\n// src/rendering-util/rendering-elements/shapes/bowTieRect.ts\nfunction generateArcPoints(x1, y1, x2, y2, rx, ry, clockwise) {\n  const numPoints = 20;\n  const midX = (x1 + x2) / 2;\n  const midY = (y1 + y2) / 2;\n  const angle = Math.atan2(y2 - y1, x2 - x1);\n  const dx = (x2 - x1) / 2;\n  const dy = (y2 - y1) / 2;\n  const transformedX = dx / rx;\n  const transformedY = dy / ry;\n  const distance = Math.sqrt(transformedX ** 2 + transformedY ** 2);\n  if (distance > 1) {\n    throw new Error(\"The given radii are too small to create an arc between the points.\");\n  }\n  const scaledCenterDistance = Math.sqrt(1 - distance ** 2);\n  const centerX = midX + scaledCenterDistance * ry * Math.sin(angle) * (clockwise ? -1 : 1);\n  const centerY = midY - scaledCenterDistance * rx * Math.cos(angle) * (clockwise ? -1 : 1);\n  const startAngle = Math.atan2((y1 - centerY) / ry, (x1 - centerX) / rx);\n  const endAngle = Math.atan2((y2 - centerY) / ry, (x2 - centerX) / rx);\n  let angleRange = endAngle - startAngle;\n  if (clockwise && angleRange < 0) {\n    angleRange += 2 * Math.PI;\n  }\n  if (!clockwise && angleRange > 0) {\n    angleRange -= 2 * Math.PI;\n  }\n  const points = [];\n  for (let i2 = 0; i2 < numPoints; i2++) {\n    const t2 = i2 / (numPoints - 1);\n    const angle2 = startAngle + t2 * angleRange;\n    const x3 = centerX + rx * Math.cos(angle2);\n    const y3 = centerY + ry * Math.sin(angle2);\n    points.push({ x: x3, y: y3 });\n  }\n  return points;\n}\n__name(generateArcPoints, \"generateArcPoints\");\nasync function bowTieRect(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));\n  const w2 = bbox.width + node.padding + 20;\n  const h2 = bbox.height + node.padding;\n  const ry = h2 / 2;\n  const rx = ry / (2.5 + h2 / 50);\n  const { cssStyles } = node;\n  const points = [\n    { x: w2 / 2, y: -h2 / 2 },\n    { x: -w2 / 2, y: -h2 / 2 },\n    ...generateArcPoints(-w2 / 2, -h2 / 2, -w2 / 2, h2 / 2, rx, ry, false),\n    { x: w2 / 2, y: h2 / 2 },\n    ...generateArcPoints(w2 / 2, h2 / 2, w2 / 2, -h2 / 2, rx, ry, true)\n  ];\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const bowTieRectPath = createPathFromPoints(points);\n  const bowTieRectShapePath = rc.path(bowTieRectPath, options);\n  const bowTieRectShape = shapeSvg.insert(() => bowTieRectShapePath, \":first-child\");\n  bowTieRectShape.attr(\"class\", \"basic label-container\");\n  if (cssStyles && node.look !== \"handDrawn\") {\n    bowTieRectShape.selectAll(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    bowTieRectShape.selectAll(\"path\").attr(\"style\", nodeStyles);\n  }\n  bowTieRectShape.attr(\"transform\", `translate(${rx / 2}, 0)`);\n  updateNodeBounds(node, bowTieRectShape);\n  node.intersect = function(point) {\n    const pos = intersect_default.polygon(node, points, point);\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(bowTieRect, \"bowTieRect\");\n\n// src/rendering-util/rendering-elements/shapes/insertPolygonShape.ts\nfunction insertPolygonShape(parent, w2, h2, points) {\n  return parent.insert(\"polygon\", \":first-child\").attr(\n    \"points\",\n    points.map(function(d2) {\n      return d2.x + \",\" + d2.y;\n    }).join(\" \")\n  ).attr(\"class\", \"label-container\").attr(\"transform\", \"translate(\" + -w2 / 2 + \",\" + h2 / 2 + \")\");\n}\n__name(insertPolygonShape, \"insertPolygonShape\");\n\n// src/rendering-util/rendering-elements/shapes/card.ts\nasync function card(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));\n  const h2 = bbox.height + node.padding;\n  const padding = 12;\n  const w2 = bbox.width + node.padding + padding;\n  const left = 0;\n  const right = w2;\n  const top = -h2;\n  const bottom = 0;\n  const points = [\n    { x: left + padding, y: top },\n    { x: right, y: top },\n    { x: right, y: bottom },\n    { x: left, y: bottom },\n    { x: left, y: top + padding },\n    { x: left + padding, y: top }\n  ];\n  let polygon;\n  const { cssStyles } = node;\n  if (node.look === \"handDrawn\") {\n    const rc = at.svg(shapeSvg);\n    const options = userNodeOverrides(node, {});\n    const pathData = createPathFromPoints(points);\n    const roughNode = rc.path(pathData, options);\n    polygon = shapeSvg.insert(() => roughNode, \":first-child\").attr(\"transform\", `translate(${-w2 / 2}, ${h2 / 2})`);\n    if (cssStyles) {\n      polygon.attr(\"style\", cssStyles);\n    }\n  } else {\n    polygon = insertPolygonShape(shapeSvg, w2, h2, points);\n  }\n  if (nodeStyles) {\n    polygon.attr(\"style\", nodeStyles);\n  }\n  updateNodeBounds(node, polygon);\n  node.intersect = function(point) {\n    return intersect_default.polygon(node, points, point);\n  };\n  return shapeSvg;\n}\n__name(card, \"card\");\n\n// src/rendering-util/rendering-elements/shapes/choice.ts\nfunction choice(parent, node) {\n  const { nodeStyles } = styles2String(node);\n  node.label = \"\";\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", getNodeClasses(node)).attr(\"id\", node.domId ?? node.id);\n  const { cssStyles } = node;\n  const s2 = Math.max(28, node.width ?? 0);\n  const points = [\n    { x: 0, y: s2 / 2 },\n    { x: s2 / 2, y: 0 },\n    { x: 0, y: -s2 / 2 },\n    { x: -s2 / 2, y: 0 }\n  ];\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const choicePath = createPathFromPoints(points);\n  const roughNode = rc.path(choicePath, options);\n  const choiceShape = shapeSvg.insert(() => roughNode, \":first-child\");\n  if (cssStyles && node.look !== \"handDrawn\") {\n    choiceShape.selectAll(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    choiceShape.selectAll(\"path\").attr(\"style\", nodeStyles);\n  }\n  node.width = 28;\n  node.height = 28;\n  node.intersect = function(point) {\n    return intersect_default.polygon(node, points, point);\n  };\n  return shapeSvg;\n}\n__name(choice, \"choice\");\n\n// src/rendering-util/rendering-elements/shapes/circle.ts\nasync function circle(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox, halfPadding } = await labelHelper(parent, node, getNodeClasses(node));\n  const radius = bbox.width / 2 + halfPadding;\n  let circleElem;\n  const { cssStyles } = node;\n  if (node.look === \"handDrawn\") {\n    const rc = at.svg(shapeSvg);\n    const options = userNodeOverrides(node, {});\n    const roughNode = rc.circle(0, 0, radius * 2, options);\n    circleElem = shapeSvg.insert(() => roughNode, \":first-child\");\n    circleElem.attr(\"class\", \"basic label-container\").attr(\"style\", handleUndefinedAttr(cssStyles));\n  } else {\n    circleElem = shapeSvg.insert(\"circle\", \":first-child\").attr(\"class\", \"basic label-container\").attr(\"style\", nodeStyles).attr(\"r\", radius).attr(\"cx\", 0).attr(\"cy\", 0);\n  }\n  updateNodeBounds(node, circleElem);\n  node.intersect = function(point) {\n    log.info(\"Circle intersect\", node, radius, point);\n    return intersect_default.circle(node, radius, point);\n  };\n  return shapeSvg;\n}\n__name(circle, \"circle\");\n\n// src/rendering-util/rendering-elements/shapes/crossedCircle.ts\nfunction createLine(r2) {\n  const xAxis45 = Math.cos(Math.PI / 4);\n  const yAxis45 = Math.sin(Math.PI / 4);\n  const lineLength = r2 * 2;\n  const pointQ1 = { x: lineLength / 2 * xAxis45, y: lineLength / 2 * yAxis45 };\n  const pointQ2 = { x: -(lineLength / 2) * xAxis45, y: lineLength / 2 * yAxis45 };\n  const pointQ3 = { x: -(lineLength / 2) * xAxis45, y: -(lineLength / 2) * yAxis45 };\n  const pointQ4 = { x: lineLength / 2 * xAxis45, y: -(lineLength / 2) * yAxis45 };\n  return `M ${pointQ2.x},${pointQ2.y} L ${pointQ4.x},${pointQ4.y}\n                   M ${pointQ1.x},${pointQ1.y} L ${pointQ3.x},${pointQ3.y}`;\n}\n__name(createLine, \"createLine\");\nfunction crossedCircle(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  node.label = \"\";\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", getNodeClasses(node)).attr(\"id\", node.domId ?? node.id);\n  const radius = Math.max(30, node?.width ?? 0);\n  const { cssStyles } = node;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const circleNode = rc.circle(0, 0, radius * 2, options);\n  const linePath = createLine(radius);\n  const lineNode = rc.path(linePath, options);\n  const crossedCircle2 = shapeSvg.insert(() => circleNode, \":first-child\");\n  crossedCircle2.insert(() => lineNode);\n  if (cssStyles && node.look !== \"handDrawn\") {\n    crossedCircle2.selectAll(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    crossedCircle2.selectAll(\"path\").attr(\"style\", nodeStyles);\n  }\n  updateNodeBounds(node, crossedCircle2);\n  node.intersect = function(point) {\n    log.info(\"crossedCircle intersect\", node, { radius, point });\n    const pos = intersect_default.circle(node, radius, point);\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(crossedCircle, \"crossedCircle\");\n\n// src/rendering-util/rendering-elements/shapes/curlyBraceLeft.ts\nfunction generateCirclePoints2(centerX, centerY, radius, numPoints = 100, startAngle = 0, endAngle = 180) {\n  const points = [];\n  const startAngleRad = startAngle * Math.PI / 180;\n  const endAngleRad = endAngle * Math.PI / 180;\n  const angleRange = endAngleRad - startAngleRad;\n  const angleStep = angleRange / (numPoints - 1);\n  for (let i2 = 0; i2 < numPoints; i2++) {\n    const angle = startAngleRad + i2 * angleStep;\n    const x2 = centerX + radius * Math.cos(angle);\n    const y2 = centerY + radius * Math.sin(angle);\n    points.push({ x: -x2, y: -y2 });\n  }\n  return points;\n}\n__name(generateCirclePoints2, \"generateCirclePoints\");\nasync function curlyBraceLeft(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));\n  const w2 = bbox.width + (node.padding ?? 0);\n  const h2 = bbox.height + (node.padding ?? 0);\n  const radius = Math.max(5, h2 * 0.1);\n  const { cssStyles } = node;\n  const points = [\n    ...generateCirclePoints2(w2 / 2, -h2 / 2, radius, 30, -90, 0),\n    { x: -w2 / 2 - radius, y: radius },\n    ...generateCirclePoints2(w2 / 2 + radius * 2, -radius, radius, 20, -180, -270),\n    ...generateCirclePoints2(w2 / 2 + radius * 2, radius, radius, 20, -90, -180),\n    { x: -w2 / 2 - radius, y: -h2 / 2 },\n    ...generateCirclePoints2(w2 / 2, h2 / 2, radius, 20, 0, 90)\n  ];\n  const rectPoints = [\n    { x: w2 / 2, y: -h2 / 2 - radius },\n    { x: -w2 / 2, y: -h2 / 2 - radius },\n    ...generateCirclePoints2(w2 / 2, -h2 / 2, radius, 20, -90, 0),\n    { x: -w2 / 2 - radius, y: -radius },\n    ...generateCirclePoints2(w2 / 2 + w2 * 0.1, -radius, radius, 20, -180, -270),\n    ...generateCirclePoints2(w2 / 2 + w2 * 0.1, radius, radius, 20, -90, -180),\n    { x: -w2 / 2 - radius, y: h2 / 2 },\n    ...generateCirclePoints2(w2 / 2, h2 / 2, radius, 20, 0, 90),\n    { x: -w2 / 2, y: h2 / 2 + radius },\n    { x: w2 / 2, y: h2 / 2 + radius }\n  ];\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, { fill: \"none\" });\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const curlyBraceLeftPath = createPathFromPoints(points);\n  const newCurlyBracePath = curlyBraceLeftPath.replace(\"Z\", \"\");\n  const curlyBraceLeftNode = rc.path(newCurlyBracePath, options);\n  const rectPath = createPathFromPoints(rectPoints);\n  const rectShape = rc.path(rectPath, { ...options });\n  const curlyBraceLeftShape = shapeSvg.insert(\"g\", \":first-child\");\n  curlyBraceLeftShape.insert(() => rectShape, \":first-child\").attr(\"stroke-opacity\", 0);\n  curlyBraceLeftShape.insert(() => curlyBraceLeftNode, \":first-child\");\n  curlyBraceLeftShape.attr(\"class\", \"text\");\n  if (cssStyles && node.look !== \"handDrawn\") {\n    curlyBraceLeftShape.selectAll(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    curlyBraceLeftShape.selectAll(\"path\").attr(\"style\", nodeStyles);\n  }\n  curlyBraceLeftShape.attr(\"transform\", `translate(${radius}, 0)`);\n  label.attr(\n    \"transform\",\n    `translate(${-w2 / 2 + radius - (bbox.x - (bbox.left ?? 0))},${-h2 / 2 + (node.padding ?? 0) / 2 - (bbox.y - (bbox.top ?? 0))})`\n  );\n  updateNodeBounds(node, curlyBraceLeftShape);\n  node.intersect = function(point) {\n    const pos = intersect_default.polygon(node, rectPoints, point);\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(curlyBraceLeft, \"curlyBraceLeft\");\n\n// src/rendering-util/rendering-elements/shapes/curlyBraceRight.ts\nfunction generateCirclePoints3(centerX, centerY, radius, numPoints = 100, startAngle = 0, endAngle = 180) {\n  const points = [];\n  const startAngleRad = startAngle * Math.PI / 180;\n  const endAngleRad = endAngle * Math.PI / 180;\n  const angleRange = endAngleRad - startAngleRad;\n  const angleStep = angleRange / (numPoints - 1);\n  for (let i2 = 0; i2 < numPoints; i2++) {\n    const angle = startAngleRad + i2 * angleStep;\n    const x2 = centerX + radius * Math.cos(angle);\n    const y2 = centerY + radius * Math.sin(angle);\n    points.push({ x: x2, y: y2 });\n  }\n  return points;\n}\n__name(generateCirclePoints3, \"generateCirclePoints\");\nasync function curlyBraceRight(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));\n  const w2 = bbox.width + (node.padding ?? 0);\n  const h2 = bbox.height + (node.padding ?? 0);\n  const radius = Math.max(5, h2 * 0.1);\n  const { cssStyles } = node;\n  const points = [\n    ...generateCirclePoints3(w2 / 2, -h2 / 2, radius, 20, -90, 0),\n    { x: w2 / 2 + radius, y: -radius },\n    ...generateCirclePoints3(w2 / 2 + radius * 2, -radius, radius, 20, -180, -270),\n    ...generateCirclePoints3(w2 / 2 + radius * 2, radius, radius, 20, -90, -180),\n    { x: w2 / 2 + radius, y: h2 / 2 },\n    ...generateCirclePoints3(w2 / 2, h2 / 2, radius, 20, 0, 90)\n  ];\n  const rectPoints = [\n    { x: -w2 / 2, y: -h2 / 2 - radius },\n    { x: w2 / 2, y: -h2 / 2 - radius },\n    ...generateCirclePoints3(w2 / 2, -h2 / 2, radius, 20, -90, 0),\n    { x: w2 / 2 + radius, y: -radius },\n    ...generateCirclePoints3(w2 / 2 + radius * 2, -radius, radius, 20, -180, -270),\n    ...generateCirclePoints3(w2 / 2 + radius * 2, radius, radius, 20, -90, -180),\n    { x: w2 / 2 + radius, y: h2 / 2 },\n    ...generateCirclePoints3(w2 / 2, h2 / 2, radius, 20, 0, 90),\n    { x: w2 / 2, y: h2 / 2 + radius },\n    { x: -w2 / 2, y: h2 / 2 + radius }\n  ];\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, { fill: \"none\" });\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const curlyBraceRightPath = createPathFromPoints(points);\n  const newCurlyBracePath = curlyBraceRightPath.replace(\"Z\", \"\");\n  const curlyBraceRightNode = rc.path(newCurlyBracePath, options);\n  const rectPath = createPathFromPoints(rectPoints);\n  const rectShape = rc.path(rectPath, { ...options });\n  const curlyBraceRightShape = shapeSvg.insert(\"g\", \":first-child\");\n  curlyBraceRightShape.insert(() => rectShape, \":first-child\").attr(\"stroke-opacity\", 0);\n  curlyBraceRightShape.insert(() => curlyBraceRightNode, \":first-child\");\n  curlyBraceRightShape.attr(\"class\", \"text\");\n  if (cssStyles && node.look !== \"handDrawn\") {\n    curlyBraceRightShape.selectAll(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    curlyBraceRightShape.selectAll(\"path\").attr(\"style\", nodeStyles);\n  }\n  curlyBraceRightShape.attr(\"transform\", `translate(${-radius}, 0)`);\n  label.attr(\n    \"transform\",\n    `translate(${-w2 / 2 + (node.padding ?? 0) / 2 - (bbox.x - (bbox.left ?? 0))},${-h2 / 2 + (node.padding ?? 0) / 2 - (bbox.y - (bbox.top ?? 0))})`\n  );\n  updateNodeBounds(node, curlyBraceRightShape);\n  node.intersect = function(point) {\n    const pos = intersect_default.polygon(node, rectPoints, point);\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(curlyBraceRight, \"curlyBraceRight\");\n\n// src/rendering-util/rendering-elements/shapes/curlyBraces.ts\nfunction generateCirclePoints4(centerX, centerY, radius, numPoints = 100, startAngle = 0, endAngle = 180) {\n  const points = [];\n  const startAngleRad = startAngle * Math.PI / 180;\n  const endAngleRad = endAngle * Math.PI / 180;\n  const angleRange = endAngleRad - startAngleRad;\n  const angleStep = angleRange / (numPoints - 1);\n  for (let i2 = 0; i2 < numPoints; i2++) {\n    const angle = startAngleRad + i2 * angleStep;\n    const x2 = centerX + radius * Math.cos(angle);\n    const y2 = centerY + radius * Math.sin(angle);\n    points.push({ x: -x2, y: -y2 });\n  }\n  return points;\n}\n__name(generateCirclePoints4, \"generateCirclePoints\");\nasync function curlyBraces(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));\n  const w2 = bbox.width + (node.padding ?? 0);\n  const h2 = bbox.height + (node.padding ?? 0);\n  const radius = Math.max(5, h2 * 0.1);\n  const { cssStyles } = node;\n  const leftCurlyBracePoints = [\n    ...generateCirclePoints4(w2 / 2, -h2 / 2, radius, 30, -90, 0),\n    { x: -w2 / 2 - radius, y: radius },\n    ...generateCirclePoints4(w2 / 2 + radius * 2, -radius, radius, 20, -180, -270),\n    ...generateCirclePoints4(w2 / 2 + radius * 2, radius, radius, 20, -90, -180),\n    { x: -w2 / 2 - radius, y: -h2 / 2 },\n    ...generateCirclePoints4(w2 / 2, h2 / 2, radius, 20, 0, 90)\n  ];\n  const rightCurlyBracePoints = [\n    ...generateCirclePoints4(-w2 / 2 + radius + radius / 2, -h2 / 2, radius, 20, -90, -180),\n    { x: w2 / 2 - radius / 2, y: radius },\n    ...generateCirclePoints4(-w2 / 2 - radius / 2, -radius, radius, 20, 0, 90),\n    ...generateCirclePoints4(-w2 / 2 - radius / 2, radius, radius, 20, -90, 0),\n    { x: w2 / 2 - radius / 2, y: -radius },\n    ...generateCirclePoints4(-w2 / 2 + radius + radius / 2, h2 / 2, radius, 30, -180, -270)\n  ];\n  const rectPoints = [\n    { x: w2 / 2, y: -h2 / 2 - radius },\n    { x: -w2 / 2, y: -h2 / 2 - radius },\n    ...generateCirclePoints4(w2 / 2, -h2 / 2, radius, 20, -90, 0),\n    { x: -w2 / 2 - radius, y: -radius },\n    ...generateCirclePoints4(w2 / 2 + radius * 2, -radius, radius, 20, -180, -270),\n    ...generateCirclePoints4(w2 / 2 + radius * 2, radius, radius, 20, -90, -180),\n    { x: -w2 / 2 - radius, y: h2 / 2 },\n    ...generateCirclePoints4(w2 / 2, h2 / 2, radius, 20, 0, 90),\n    { x: -w2 / 2, y: h2 / 2 + radius },\n    { x: w2 / 2 - radius - radius / 2, y: h2 / 2 + radius },\n    ...generateCirclePoints4(-w2 / 2 + radius + radius / 2, -h2 / 2, radius, 20, -90, -180),\n    { x: w2 / 2 - radius / 2, y: radius },\n    ...generateCirclePoints4(-w2 / 2 - radius / 2, -radius, radius, 20, 0, 90),\n    ...generateCirclePoints4(-w2 / 2 - radius / 2, radius, radius, 20, -90, 0),\n    { x: w2 / 2 - radius / 2, y: -radius },\n    ...generateCirclePoints4(-w2 / 2 + radius + radius / 2, h2 / 2, radius, 30, -180, -270)\n  ];\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, { fill: \"none\" });\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const leftCurlyBracePath = createPathFromPoints(leftCurlyBracePoints);\n  const newLeftCurlyBracePath = leftCurlyBracePath.replace(\"Z\", \"\");\n  const leftCurlyBraceNode = rc.path(newLeftCurlyBracePath, options);\n  const rightCurlyBracePath = createPathFromPoints(rightCurlyBracePoints);\n  const newRightCurlyBracePath = rightCurlyBracePath.replace(\"Z\", \"\");\n  const rightCurlyBraceNode = rc.path(newRightCurlyBracePath, options);\n  const rectPath = createPathFromPoints(rectPoints);\n  const rectShape = rc.path(rectPath, { ...options });\n  const curlyBracesShape = shapeSvg.insert(\"g\", \":first-child\");\n  curlyBracesShape.insert(() => rectShape, \":first-child\").attr(\"stroke-opacity\", 0);\n  curlyBracesShape.insert(() => leftCurlyBraceNode, \":first-child\");\n  curlyBracesShape.insert(() => rightCurlyBraceNode, \":first-child\");\n  curlyBracesShape.attr(\"class\", \"text\");\n  if (cssStyles && node.look !== \"handDrawn\") {\n    curlyBracesShape.selectAll(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    curlyBracesShape.selectAll(\"path\").attr(\"style\", nodeStyles);\n  }\n  curlyBracesShape.attr(\"transform\", `translate(${radius - radius / 4}, 0)`);\n  label.attr(\n    \"transform\",\n    `translate(${-w2 / 2 + (node.padding ?? 0) / 2 - (bbox.x - (bbox.left ?? 0))},${-h2 / 2 + (node.padding ?? 0) / 2 - (bbox.y - (bbox.top ?? 0))})`\n  );\n  updateNodeBounds(node, curlyBracesShape);\n  node.intersect = function(point) {\n    const pos = intersect_default.polygon(node, rectPoints, point);\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(curlyBraces, \"curlyBraces\");\n\n// src/rendering-util/rendering-elements/shapes/curvedTrapezoid.ts\nasync function curvedTrapezoid(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));\n  const minWidth = 80, minHeight = 20;\n  const w2 = Math.max(minWidth, (bbox.width + (node.padding ?? 0) * 2) * 1.25, node?.width ?? 0);\n  const h2 = Math.max(minHeight, bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);\n  const radius = h2 / 2;\n  const { cssStyles } = node;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const totalWidth = w2, totalHeight = h2;\n  const rw = totalWidth - radius;\n  const tw = totalHeight / 4;\n  const points = [\n    { x: rw, y: 0 },\n    { x: tw, y: 0 },\n    { x: 0, y: totalHeight / 2 },\n    { x: tw, y: totalHeight },\n    { x: rw, y: totalHeight },\n    ...generateCirclePoints(-rw, -totalHeight / 2, radius, 50, 270, 90)\n  ];\n  const pathData = createPathFromPoints(points);\n  const shapeNode = rc.path(pathData, options);\n  const polygon = shapeSvg.insert(() => shapeNode, \":first-child\");\n  polygon.attr(\"class\", \"basic label-container\");\n  if (cssStyles && node.look !== \"handDrawn\") {\n    polygon.selectChildren(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    polygon.selectChildren(\"path\").attr(\"style\", nodeStyles);\n  }\n  polygon.attr(\"transform\", `translate(${-w2 / 2}, ${-h2 / 2})`);\n  updateNodeBounds(node, polygon);\n  node.intersect = function(point) {\n    const pos = intersect_default.polygon(node, points, point);\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(curvedTrapezoid, \"curvedTrapezoid\");\n\n// src/rendering-util/rendering-elements/shapes/cylinder.ts\nvar createCylinderPathD = /* @__PURE__ */ __name((x2, y2, width, height, rx, ry) => {\n  return [\n    `M${x2},${y2 + ry}`,\n    `a${rx},${ry} 0,0,0 ${width},0`,\n    `a${rx},${ry} 0,0,0 ${-width},0`,\n    `l0,${height}`,\n    `a${rx},${ry} 0,0,0 ${width},0`,\n    `l0,${-height}`\n  ].join(\" \");\n}, \"createCylinderPathD\");\nvar createOuterCylinderPathD = /* @__PURE__ */ __name((x2, y2, width, height, rx, ry) => {\n  return [\n    `M${x2},${y2 + ry}`,\n    `M${x2 + width},${y2 + ry}`,\n    `a${rx},${ry} 0,0,0 ${-width},0`,\n    `l0,${height}`,\n    `a${rx},${ry} 0,0,0 ${width},0`,\n    `l0,${-height}`\n  ].join(\" \");\n}, \"createOuterCylinderPathD\");\nvar createInnerCylinderPathD = /* @__PURE__ */ __name((x2, y2, width, height, rx, ry) => {\n  return [`M${x2 - width / 2},${-height / 2}`, `a${rx},${ry} 0,0,0 ${width},0`].join(\" \");\n}, \"createInnerCylinderPathD\");\nasync function cylinder(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));\n  const w2 = Math.max(bbox.width + node.padding, node.width ?? 0);\n  const rx = w2 / 2;\n  const ry = rx / (2.5 + w2 / 50);\n  const h2 = Math.max(bbox.height + ry + node.padding, node.height ?? 0);\n  let cylinder2;\n  const { cssStyles } = node;\n  if (node.look === \"handDrawn\") {\n    const rc = at.svg(shapeSvg);\n    const outerPathData = createOuterCylinderPathD(0, 0, w2, h2, rx, ry);\n    const innerPathData = createInnerCylinderPathD(0, ry, w2, h2, rx, ry);\n    const outerNode = rc.path(outerPathData, userNodeOverrides(node, {}));\n    const innerLine = rc.path(innerPathData, userNodeOverrides(node, { fill: \"none\" }));\n    cylinder2 = shapeSvg.insert(() => innerLine, \":first-child\");\n    cylinder2 = shapeSvg.insert(() => outerNode, \":first-child\");\n    cylinder2.attr(\"class\", \"basic label-container\");\n    if (cssStyles) {\n      cylinder2.attr(\"style\", cssStyles);\n    }\n  } else {\n    const pathData = createCylinderPathD(0, 0, w2, h2, rx, ry);\n    cylinder2 = shapeSvg.insert(\"path\", \":first-child\").attr(\"d\", pathData).attr(\"class\", \"basic label-container\").attr(\"style\", handleUndefinedAttr(cssStyles)).attr(\"style\", nodeStyles);\n  }\n  cylinder2.attr(\"label-offset-y\", ry);\n  cylinder2.attr(\"transform\", `translate(${-w2 / 2}, ${-(h2 / 2 + ry)})`);\n  updateNodeBounds(node, cylinder2);\n  label.attr(\n    \"transform\",\n    `translate(${-(bbox.width / 2) - (bbox.x - (bbox.left ?? 0))}, ${-(bbox.height / 2) + (node.padding ?? 0) / 1.5 - (bbox.y - (bbox.top ?? 0))})`\n  );\n  node.intersect = function(point) {\n    const pos = intersect_default.rect(node, point);\n    const x2 = pos.x - (node.x ?? 0);\n    if (rx != 0 && (Math.abs(x2) < (node.width ?? 0) / 2 || Math.abs(x2) == (node.width ?? 0) / 2 && Math.abs(pos.y - (node.y ?? 0)) > (node.height ?? 0) / 2 - ry)) {\n      let y2 = ry * ry * (1 - x2 * x2 / (rx * rx));\n      if (y2 > 0) {\n        y2 = Math.sqrt(y2);\n      }\n      y2 = ry - y2;\n      if (point.y - (node.y ?? 0) > 0) {\n        y2 = -y2;\n      }\n      pos.y += y2;\n    }\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(cylinder, \"cylinder\");\n\n// src/rendering-util/rendering-elements/shapes/dividedRect.ts\nasync function dividedRectangle(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));\n  const w2 = bbox.width + node.padding;\n  const h2 = bbox.height + node.padding;\n  const rectOffset = h2 * 0.2;\n  const x2 = -w2 / 2;\n  const y2 = -h2 / 2 - rectOffset / 2;\n  const { cssStyles } = node;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const pts = [\n    { x: x2, y: y2 + rectOffset },\n    { x: -x2, y: y2 + rectOffset },\n    { x: -x2, y: -y2 },\n    { x: x2, y: -y2 },\n    { x: x2, y: y2 },\n    { x: -x2, y: y2 },\n    { x: -x2, y: y2 + rectOffset }\n  ];\n  const poly = rc.polygon(\n    pts.map((p2) => [p2.x, p2.y]),\n    options\n  );\n  const polygon = shapeSvg.insert(() => poly, \":first-child\");\n  polygon.attr(\"class\", \"basic label-container\");\n  if (cssStyles && node.look !== \"handDrawn\") {\n    polygon.selectAll(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    polygon.selectAll(\"path\").attr(\"style\", nodeStyles);\n  }\n  label.attr(\n    \"transform\",\n    `translate(${x2 + (node.padding ?? 0) / 2 - (bbox.x - (bbox.left ?? 0))}, ${y2 + rectOffset + (node.padding ?? 0) / 2 - (bbox.y - (bbox.top ?? 0))})`\n  );\n  updateNodeBounds(node, polygon);\n  node.intersect = function(point) {\n    const pos = intersect_default.rect(node, point);\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(dividedRectangle, \"dividedRectangle\");\n\n// src/rendering-util/rendering-elements/shapes/doubleCircle.ts\nasync function doublecircle(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox, halfPadding } = await labelHelper(parent, node, getNodeClasses(node));\n  const gap = 5;\n  const outerRadius = bbox.width / 2 + halfPadding + gap;\n  const innerRadius = bbox.width / 2 + halfPadding;\n  let circleGroup;\n  const { cssStyles } = node;\n  if (node.look === \"handDrawn\") {\n    const rc = at.svg(shapeSvg);\n    const outerOptions = userNodeOverrides(node, { roughness: 0.2, strokeWidth: 2.5 });\n    const innerOptions = userNodeOverrides(node, { roughness: 0.2, strokeWidth: 1.5 });\n    const outerRoughNode = rc.circle(0, 0, outerRadius * 2, outerOptions);\n    const innerRoughNode = rc.circle(0, 0, innerRadius * 2, innerOptions);\n    circleGroup = shapeSvg.insert(\"g\", \":first-child\");\n    circleGroup.attr(\"class\", handleUndefinedAttr(node.cssClasses)).attr(\"style\", handleUndefinedAttr(cssStyles));\n    circleGroup.node()?.appendChild(outerRoughNode);\n    circleGroup.node()?.appendChild(innerRoughNode);\n  } else {\n    circleGroup = shapeSvg.insert(\"g\", \":first-child\");\n    const outerCircle = circleGroup.insert(\"circle\", \":first-child\");\n    const innerCircle = circleGroup.insert(\"circle\");\n    circleGroup.attr(\"class\", \"basic label-container\").attr(\"style\", nodeStyles);\n    outerCircle.attr(\"class\", \"outer-circle\").attr(\"style\", nodeStyles).attr(\"r\", outerRadius).attr(\"cx\", 0).attr(\"cy\", 0);\n    innerCircle.attr(\"class\", \"inner-circle\").attr(\"style\", nodeStyles).attr(\"r\", innerRadius).attr(\"cx\", 0).attr(\"cy\", 0);\n  }\n  updateNodeBounds(node, circleGroup);\n  node.intersect = function(point) {\n    log.info(\"DoubleCircle intersect\", node, outerRadius, point);\n    return intersect_default.circle(node, outerRadius, point);\n  };\n  return shapeSvg;\n}\n__name(doublecircle, \"doublecircle\");\n\n// src/rendering-util/rendering-elements/shapes/filledCircle.ts\nfunction filledCircle(parent, node, { config: { themeVariables } }) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.label = \"\";\n  node.labelStyle = labelStyles;\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", getNodeClasses(node)).attr(\"id\", node.domId ?? node.id);\n  const radius = 7;\n  const { cssStyles } = node;\n  const rc = at.svg(shapeSvg);\n  const { nodeBorder } = themeVariables;\n  const options = userNodeOverrides(node, { fillStyle: \"solid\" });\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n  }\n  const circleNode = rc.circle(0, 0, radius * 2, options);\n  const filledCircle2 = shapeSvg.insert(() => circleNode, \":first-child\");\n  filledCircle2.selectAll(\"path\").attr(\"style\", `fill: ${nodeBorder} !important;`);\n  if (cssStyles && cssStyles.length > 0 && node.look !== \"handDrawn\") {\n    filledCircle2.selectAll(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    filledCircle2.selectAll(\"path\").attr(\"style\", nodeStyles);\n  }\n  updateNodeBounds(node, filledCircle2);\n  node.intersect = function(point) {\n    log.info(\"filledCircle intersect\", node, { radius, point });\n    const pos = intersect_default.circle(node, radius, point);\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(filledCircle, \"filledCircle\");\n\n// src/rendering-util/rendering-elements/shapes/flippedTriangle.ts\nasync function flippedTriangle(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));\n  const w2 = bbox.width + (node.padding ?? 0);\n  const h2 = w2 + bbox.height;\n  const tw = w2 + bbox.height;\n  const points = [\n    { x: 0, y: -h2 },\n    { x: tw, y: -h2 },\n    { x: tw / 2, y: 0 }\n  ];\n  const { cssStyles } = node;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const pathData = createPathFromPoints(points);\n  const roughNode = rc.path(pathData, options);\n  const flippedTriangle2 = shapeSvg.insert(() => roughNode, \":first-child\").attr(\"transform\", `translate(${-h2 / 2}, ${h2 / 2})`);\n  if (cssStyles && node.look !== \"handDrawn\") {\n    flippedTriangle2.selectChildren(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    flippedTriangle2.selectChildren(\"path\").attr(\"style\", nodeStyles);\n  }\n  node.width = w2;\n  node.height = h2;\n  updateNodeBounds(node, flippedTriangle2);\n  label.attr(\n    \"transform\",\n    `translate(${-bbox.width / 2 - (bbox.x - (bbox.left ?? 0))}, ${-h2 / 2 + (node.padding ?? 0) / 2 + (bbox.y - (bbox.top ?? 0))})`\n  );\n  node.intersect = function(point) {\n    log.info(\"Triangle intersect\", node, points, point);\n    return intersect_default.polygon(node, points, point);\n  };\n  return shapeSvg;\n}\n__name(flippedTriangle, \"flippedTriangle\");\n\n// src/rendering-util/rendering-elements/shapes/forkJoin.ts\nfunction forkJoin(parent, node, { dir, config: { state: state2, themeVariables } }) {\n  const { nodeStyles } = styles2String(node);\n  node.label = \"\";\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", getNodeClasses(node)).attr(\"id\", node.domId ?? node.id);\n  const { cssStyles } = node;\n  let width = Math.max(70, node?.width ?? 0);\n  let height = Math.max(10, node?.height ?? 0);\n  if (dir === \"LR\") {\n    width = Math.max(10, node?.width ?? 0);\n    height = Math.max(70, node?.height ?? 0);\n  }\n  const x2 = -1 * width / 2;\n  const y2 = -1 * height / 2;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {\n    stroke: themeVariables.lineColor,\n    fill: themeVariables.lineColor\n  });\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const roughNode = rc.rectangle(x2, y2, width, height, options);\n  const shape = shapeSvg.insert(() => roughNode, \":first-child\");\n  if (cssStyles && node.look !== \"handDrawn\") {\n    shape.selectAll(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    shape.selectAll(\"path\").attr(\"style\", nodeStyles);\n  }\n  updateNodeBounds(node, shape);\n  const padding = state2?.padding ?? 0;\n  if (node.width && node.height) {\n    node.width += padding / 2 || 0;\n    node.height += padding / 2 || 0;\n  }\n  node.intersect = function(point) {\n    return intersect_default.rect(node, point);\n  };\n  return shapeSvg;\n}\n__name(forkJoin, \"forkJoin\");\n\n// src/rendering-util/rendering-elements/shapes/halfRoundedRectangle.ts\nasync function halfRoundedRectangle(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const minWidth = 80, minHeight = 50;\n  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));\n  const w2 = Math.max(minWidth, bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);\n  const h2 = Math.max(minHeight, bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);\n  const radius = h2 / 2;\n  const { cssStyles } = node;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const points = [\n    { x: -w2 / 2, y: -h2 / 2 },\n    { x: w2 / 2 - radius, y: -h2 / 2 },\n    ...generateCirclePoints(-w2 / 2 + radius, 0, radius, 50, 90, 270),\n    { x: w2 / 2 - radius, y: h2 / 2 },\n    { x: -w2 / 2, y: h2 / 2 }\n  ];\n  const pathData = createPathFromPoints(points);\n  const shapeNode = rc.path(pathData, options);\n  const polygon = shapeSvg.insert(() => shapeNode, \":first-child\");\n  polygon.attr(\"class\", \"basic label-container\");\n  if (cssStyles && node.look !== \"handDrawn\") {\n    polygon.selectChildren(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    polygon.selectChildren(\"path\").attr(\"style\", nodeStyles);\n  }\n  updateNodeBounds(node, polygon);\n  node.intersect = function(point) {\n    log.info(\"Pill intersect\", node, { radius, point });\n    const pos = intersect_default.polygon(node, points, point);\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(halfRoundedRectangle, \"halfRoundedRectangle\");\n\n// src/rendering-util/rendering-elements/shapes/hexagon.ts\nvar createHexagonPathD = /* @__PURE__ */ __name((x2, y2, width, height, m2) => {\n  return [\n    `M${x2 + m2},${y2}`,\n    `L${x2 + width - m2},${y2}`,\n    `L${x2 + width},${y2 - height / 2}`,\n    `L${x2 + width - m2},${y2 - height}`,\n    `L${x2 + m2},${y2 - height}`,\n    `L${x2},${y2 - height / 2}`,\n    \"Z\"\n  ].join(\" \");\n}, \"createHexagonPathD\");\nasync function hexagon(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));\n  const f2 = 4;\n  const h2 = bbox.height + node.padding;\n  const m2 = h2 / f2;\n  const w2 = bbox.width + 2 * m2 + node.padding;\n  const points = [\n    { x: m2, y: 0 },\n    { x: w2 - m2, y: 0 },\n    { x: w2, y: -h2 / 2 },\n    { x: w2 - m2, y: -h2 },\n    { x: m2, y: -h2 },\n    { x: 0, y: -h2 / 2 }\n  ];\n  let polygon;\n  const { cssStyles } = node;\n  if (node.look === \"handDrawn\") {\n    const rc = at.svg(shapeSvg);\n    const options = userNodeOverrides(node, {});\n    const pathData = createHexagonPathD(0, 0, w2, h2, m2);\n    const roughNode = rc.path(pathData, options);\n    polygon = shapeSvg.insert(() => roughNode, \":first-child\").attr(\"transform\", `translate(${-w2 / 2}, ${h2 / 2})`);\n    if (cssStyles) {\n      polygon.attr(\"style\", cssStyles);\n    }\n  } else {\n    polygon = insertPolygonShape(shapeSvg, w2, h2, points);\n  }\n  if (nodeStyles) {\n    polygon.attr(\"style\", nodeStyles);\n  }\n  node.width = w2;\n  node.height = h2;\n  updateNodeBounds(node, polygon);\n  node.intersect = function(point) {\n    return intersect_default.polygon(node, points, point);\n  };\n  return shapeSvg;\n}\n__name(hexagon, \"hexagon\");\n\n// src/rendering-util/rendering-elements/shapes/hourglass.ts\nasync function hourglass(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.label = \"\";\n  node.labelStyle = labelStyles;\n  const { shapeSvg } = await labelHelper(parent, node, getNodeClasses(node));\n  const w2 = Math.max(30, node?.width ?? 0);\n  const h2 = Math.max(30, node?.height ?? 0);\n  const { cssStyles } = node;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const points = [\n    { x: 0, y: 0 },\n    { x: w2, y: 0 },\n    { x: 0, y: h2 },\n    { x: w2, y: h2 }\n  ];\n  const pathData = createPathFromPoints(points);\n  const shapeNode = rc.path(pathData, options);\n  const polygon = shapeSvg.insert(() => shapeNode, \":first-child\");\n  polygon.attr(\"class\", \"basic label-container\");\n  if (cssStyles && node.look !== \"handDrawn\") {\n    polygon.selectChildren(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    polygon.selectChildren(\"path\").attr(\"style\", nodeStyles);\n  }\n  polygon.attr(\"transform\", `translate(${-w2 / 2}, ${-h2 / 2})`);\n  updateNodeBounds(node, polygon);\n  node.intersect = function(point) {\n    log.info(\"Pill intersect\", node, { points });\n    const pos = intersect_default.polygon(node, points, point);\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(hourglass, \"hourglass\");\n\n// src/rendering-util/rendering-elements/shapes/icon.ts\nasync function icon(parent, node, { config: { themeVariables, flowchart } }) {\n  const { labelStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const assetHeight = node.assetHeight ?? 48;\n  const assetWidth = node.assetWidth ?? 48;\n  const iconSize = Math.max(assetHeight, assetWidth);\n  const defaultWidth = flowchart?.wrappingWidth;\n  node.width = Math.max(iconSize, defaultWidth ?? 0);\n  const { shapeSvg, bbox, label } = await labelHelper(parent, node, \"icon-shape default\");\n  const topLabel = node.pos === \"t\";\n  const height = iconSize;\n  const width = iconSize;\n  const { nodeBorder } = themeVariables;\n  const { stylesMap } = compileStyles(node);\n  const x2 = -width / 2;\n  const y2 = -height / 2;\n  const labelPadding = node.label ? 8 : 0;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, { stroke: \"none\", fill: \"none\" });\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const iconNode = rc.rectangle(x2, y2, width, height, options);\n  const outerWidth = Math.max(width, bbox.width);\n  const outerHeight = height + bbox.height + labelPadding;\n  const outerNode = rc.rectangle(-outerWidth / 2, -outerHeight / 2, outerWidth, outerHeight, {\n    ...options,\n    fill: \"transparent\",\n    stroke: \"none\"\n  });\n  const iconShape = shapeSvg.insert(() => iconNode, \":first-child\");\n  const outerShape = shapeSvg.insert(() => outerNode);\n  if (node.icon) {\n    const iconElem = shapeSvg.append(\"g\");\n    iconElem.html(\n      `<g>${await getIconSVG(node.icon, {\n        height: iconSize,\n        width: iconSize,\n        fallbackPrefix: \"\"\n      })}</g>`\n    );\n    const iconBBox = iconElem.node().getBBox();\n    const iconWidth = iconBBox.width;\n    const iconHeight = iconBBox.height;\n    const iconX = iconBBox.x;\n    const iconY = iconBBox.y;\n    iconElem.attr(\n      \"transform\",\n      `translate(${-iconWidth / 2 - iconX},${topLabel ? bbox.height / 2 + labelPadding / 2 - iconHeight / 2 - iconY : -bbox.height / 2 - labelPadding / 2 - iconHeight / 2 - iconY})`\n    );\n    iconElem.attr(\"style\", `color: ${stylesMap.get(\"stroke\") ?? nodeBorder};`);\n  }\n  label.attr(\n    \"transform\",\n    `translate(${-bbox.width / 2 - (bbox.x - (bbox.left ?? 0))},${topLabel ? -outerHeight / 2 : outerHeight / 2 - bbox.height})`\n  );\n  iconShape.attr(\n    \"transform\",\n    `translate(${0},${topLabel ? bbox.height / 2 + labelPadding / 2 : -bbox.height / 2 - labelPadding / 2})`\n  );\n  updateNodeBounds(node, outerShape);\n  node.intersect = function(point) {\n    log.info(\"iconSquare intersect\", node, point);\n    if (!node.label) {\n      return intersect_default.rect(node, point);\n    }\n    const dx = node.x ?? 0;\n    const dy = node.y ?? 0;\n    const nodeHeight = node.height ?? 0;\n    let points = [];\n    if (topLabel) {\n      points = [\n        { x: dx - bbox.width / 2, y: dy - nodeHeight / 2 },\n        { x: dx + bbox.width / 2, y: dy - nodeHeight / 2 },\n        { x: dx + bbox.width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding },\n        { x: dx + width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding },\n        { x: dx + width / 2, y: dy + nodeHeight / 2 },\n        { x: dx - width / 2, y: dy + nodeHeight / 2 },\n        { x: dx - width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding },\n        { x: dx - bbox.width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding }\n      ];\n    } else {\n      points = [\n        { x: dx - width / 2, y: dy - nodeHeight / 2 },\n        { x: dx + width / 2, y: dy - nodeHeight / 2 },\n        { x: dx + width / 2, y: dy - nodeHeight / 2 + height },\n        { x: dx + bbox.width / 2, y: dy - nodeHeight / 2 + height },\n        { x: dx + bbox.width / 2 / 2, y: dy + nodeHeight / 2 },\n        { x: dx - bbox.width / 2, y: dy + nodeHeight / 2 },\n        { x: dx - bbox.width / 2, y: dy - nodeHeight / 2 + height },\n        { x: dx - width / 2, y: dy - nodeHeight / 2 + height }\n      ];\n    }\n    const pos = intersect_default.polygon(node, points, point);\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(icon, \"icon\");\n\n// src/rendering-util/rendering-elements/shapes/iconCircle.ts\nasync function iconCircle(parent, node, { config: { themeVariables, flowchart } }) {\n  const { labelStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const assetHeight = node.assetHeight ?? 48;\n  const assetWidth = node.assetWidth ?? 48;\n  const iconSize = Math.max(assetHeight, assetWidth);\n  const defaultWidth = flowchart?.wrappingWidth;\n  node.width = Math.max(iconSize, defaultWidth ?? 0);\n  const { shapeSvg, bbox, label } = await labelHelper(parent, node, \"icon-shape default\");\n  const padding = 20;\n  const labelPadding = node.label ? 8 : 0;\n  const topLabel = node.pos === \"t\";\n  const { nodeBorder, mainBkg } = themeVariables;\n  const { stylesMap } = compileStyles(node);\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const fill = stylesMap.get(\"fill\");\n  options.stroke = fill ?? mainBkg;\n  const iconElem = shapeSvg.append(\"g\");\n  if (node.icon) {\n    iconElem.html(\n      `<g>${await getIconSVG(node.icon, {\n        height: iconSize,\n        width: iconSize,\n        fallbackPrefix: \"\"\n      })}</g>`\n    );\n  }\n  const iconBBox = iconElem.node().getBBox();\n  const iconWidth = iconBBox.width;\n  const iconHeight = iconBBox.height;\n  const iconX = iconBBox.x;\n  const iconY = iconBBox.y;\n  const diameter = Math.max(iconWidth, iconHeight) * Math.SQRT2 + padding * 2;\n  const iconNode = rc.circle(0, 0, diameter, options);\n  const outerWidth = Math.max(diameter, bbox.width);\n  const outerHeight = diameter + bbox.height + labelPadding;\n  const outerNode = rc.rectangle(-outerWidth / 2, -outerHeight / 2, outerWidth, outerHeight, {\n    ...options,\n    fill: \"transparent\",\n    stroke: \"none\"\n  });\n  const iconShape = shapeSvg.insert(() => iconNode, \":first-child\");\n  const outerShape = shapeSvg.insert(() => outerNode);\n  iconElem.attr(\n    \"transform\",\n    `translate(${-iconWidth / 2 - iconX},${topLabel ? bbox.height / 2 + labelPadding / 2 - iconHeight / 2 - iconY : -bbox.height / 2 - labelPadding / 2 - iconHeight / 2 - iconY})`\n  );\n  iconElem.attr(\"style\", `color: ${stylesMap.get(\"stroke\") ?? nodeBorder};`);\n  label.attr(\n    \"transform\",\n    `translate(${-bbox.width / 2 - (bbox.x - (bbox.left ?? 0))},${topLabel ? -outerHeight / 2 : outerHeight / 2 - bbox.height})`\n  );\n  iconShape.attr(\n    \"transform\",\n    `translate(${0},${topLabel ? bbox.height / 2 + labelPadding / 2 : -bbox.height / 2 - labelPadding / 2})`\n  );\n  updateNodeBounds(node, outerShape);\n  node.intersect = function(point) {\n    log.info(\"iconSquare intersect\", node, point);\n    const pos = intersect_default.rect(node, point);\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(iconCircle, \"iconCircle\");\n\n// src/rendering-util/rendering-elements/shapes/iconRounded.ts\nasync function iconRounded(parent, node, { config: { themeVariables, flowchart } }) {\n  const { labelStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const assetHeight = node.assetHeight ?? 48;\n  const assetWidth = node.assetWidth ?? 48;\n  const iconSize = Math.max(assetHeight, assetWidth);\n  const defaultWidth = flowchart?.wrappingWidth;\n  node.width = Math.max(iconSize, defaultWidth ?? 0);\n  const { shapeSvg, bbox, halfPadding, label } = await labelHelper(\n    parent,\n    node,\n    \"icon-shape default\"\n  );\n  const topLabel = node.pos === \"t\";\n  const height = iconSize + halfPadding * 2;\n  const width = iconSize + halfPadding * 2;\n  const { nodeBorder, mainBkg } = themeVariables;\n  const { stylesMap } = compileStyles(node);\n  const x2 = -width / 2;\n  const y2 = -height / 2;\n  const labelPadding = node.label ? 8 : 0;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const fill = stylesMap.get(\"fill\");\n  options.stroke = fill ?? mainBkg;\n  const iconNode = rc.path(createRoundedRectPathD(x2, y2, width, height, 5), options);\n  const outerWidth = Math.max(width, bbox.width);\n  const outerHeight = height + bbox.height + labelPadding;\n  const outerNode = rc.rectangle(-outerWidth / 2, -outerHeight / 2, outerWidth, outerHeight, {\n    ...options,\n    fill: \"transparent\",\n    stroke: \"none\"\n  });\n  const iconShape = shapeSvg.insert(() => iconNode, \":first-child\").attr(\"class\", \"icon-shape2\");\n  const outerShape = shapeSvg.insert(() => outerNode);\n  if (node.icon) {\n    const iconElem = shapeSvg.append(\"g\");\n    iconElem.html(\n      `<g>${await getIconSVG(node.icon, {\n        height: iconSize,\n        width: iconSize,\n        fallbackPrefix: \"\"\n      })}</g>`\n    );\n    const iconBBox = iconElem.node().getBBox();\n    const iconWidth = iconBBox.width;\n    const iconHeight = iconBBox.height;\n    const iconX = iconBBox.x;\n    const iconY = iconBBox.y;\n    iconElem.attr(\n      \"transform\",\n      `translate(${-iconWidth / 2 - iconX},${topLabel ? bbox.height / 2 + labelPadding / 2 - iconHeight / 2 - iconY : -bbox.height / 2 - labelPadding / 2 - iconHeight / 2 - iconY})`\n    );\n    iconElem.attr(\"style\", `color: ${stylesMap.get(\"stroke\") ?? nodeBorder};`);\n  }\n  label.attr(\n    \"transform\",\n    `translate(${-bbox.width / 2 - (bbox.x - (bbox.left ?? 0))},${topLabel ? -outerHeight / 2 : outerHeight / 2 - bbox.height})`\n  );\n  iconShape.attr(\n    \"transform\",\n    `translate(${0},${topLabel ? bbox.height / 2 + labelPadding / 2 : -bbox.height / 2 - labelPadding / 2})`\n  );\n  updateNodeBounds(node, outerShape);\n  node.intersect = function(point) {\n    log.info(\"iconSquare intersect\", node, point);\n    if (!node.label) {\n      return intersect_default.rect(node, point);\n    }\n    const dx = node.x ?? 0;\n    const dy = node.y ?? 0;\n    const nodeHeight = node.height ?? 0;\n    let points = [];\n    if (topLabel) {\n      points = [\n        { x: dx - bbox.width / 2, y: dy - nodeHeight / 2 },\n        { x: dx + bbox.width / 2, y: dy - nodeHeight / 2 },\n        { x: dx + bbox.width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding },\n        { x: dx + width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding },\n        { x: dx + width / 2, y: dy + nodeHeight / 2 },\n        { x: dx - width / 2, y: dy + nodeHeight / 2 },\n        { x: dx - width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding },\n        { x: dx - bbox.width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding }\n      ];\n    } else {\n      points = [\n        { x: dx - width / 2, y: dy - nodeHeight / 2 },\n        { x: dx + width / 2, y: dy - nodeHeight / 2 },\n        { x: dx + width / 2, y: dy - nodeHeight / 2 + height },\n        { x: dx + bbox.width / 2, y: dy - nodeHeight / 2 + height },\n        { x: dx + bbox.width / 2 / 2, y: dy + nodeHeight / 2 },\n        { x: dx - bbox.width / 2, y: dy + nodeHeight / 2 },\n        { x: dx - bbox.width / 2, y: dy - nodeHeight / 2 + height },\n        { x: dx - width / 2, y: dy - nodeHeight / 2 + height }\n      ];\n    }\n    const pos = intersect_default.polygon(node, points, point);\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(iconRounded, \"iconRounded\");\n\n// src/rendering-util/rendering-elements/shapes/iconSquare.ts\nasync function iconSquare(parent, node, { config: { themeVariables, flowchart } }) {\n  const { labelStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const assetHeight = node.assetHeight ?? 48;\n  const assetWidth = node.assetWidth ?? 48;\n  const iconSize = Math.max(assetHeight, assetWidth);\n  const defaultWidth = flowchart?.wrappingWidth;\n  node.width = Math.max(iconSize, defaultWidth ?? 0);\n  const { shapeSvg, bbox, halfPadding, label } = await labelHelper(\n    parent,\n    node,\n    \"icon-shape default\"\n  );\n  const topLabel = node.pos === \"t\";\n  const height = iconSize + halfPadding * 2;\n  const width = iconSize + halfPadding * 2;\n  const { nodeBorder, mainBkg } = themeVariables;\n  const { stylesMap } = compileStyles(node);\n  const x2 = -width / 2;\n  const y2 = -height / 2;\n  const labelPadding = node.label ? 8 : 0;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const fill = stylesMap.get(\"fill\");\n  options.stroke = fill ?? mainBkg;\n  const iconNode = rc.path(createRoundedRectPathD(x2, y2, width, height, 0.1), options);\n  const outerWidth = Math.max(width, bbox.width);\n  const outerHeight = height + bbox.height + labelPadding;\n  const outerNode = rc.rectangle(-outerWidth / 2, -outerHeight / 2, outerWidth, outerHeight, {\n    ...options,\n    fill: \"transparent\",\n    stroke: \"none\"\n  });\n  const iconShape = shapeSvg.insert(() => iconNode, \":first-child\");\n  const outerShape = shapeSvg.insert(() => outerNode);\n  if (node.icon) {\n    const iconElem = shapeSvg.append(\"g\");\n    iconElem.html(\n      `<g>${await getIconSVG(node.icon, {\n        height: iconSize,\n        width: iconSize,\n        fallbackPrefix: \"\"\n      })}</g>`\n    );\n    const iconBBox = iconElem.node().getBBox();\n    const iconWidth = iconBBox.width;\n    const iconHeight = iconBBox.height;\n    const iconX = iconBBox.x;\n    const iconY = iconBBox.y;\n    iconElem.attr(\n      \"transform\",\n      `translate(${-iconWidth / 2 - iconX},${topLabel ? bbox.height / 2 + labelPadding / 2 - iconHeight / 2 - iconY : -bbox.height / 2 - labelPadding / 2 - iconHeight / 2 - iconY})`\n    );\n    iconElem.attr(\"style\", `color: ${stylesMap.get(\"stroke\") ?? nodeBorder};`);\n  }\n  label.attr(\n    \"transform\",\n    `translate(${-bbox.width / 2 - (bbox.x - (bbox.left ?? 0))},${topLabel ? -outerHeight / 2 : outerHeight / 2 - bbox.height})`\n  );\n  iconShape.attr(\n    \"transform\",\n    `translate(${0},${topLabel ? bbox.height / 2 + labelPadding / 2 : -bbox.height / 2 - labelPadding / 2})`\n  );\n  updateNodeBounds(node, outerShape);\n  node.intersect = function(point) {\n    log.info(\"iconSquare intersect\", node, point);\n    if (!node.label) {\n      return intersect_default.rect(node, point);\n    }\n    const dx = node.x ?? 0;\n    const dy = node.y ?? 0;\n    const nodeHeight = node.height ?? 0;\n    let points = [];\n    if (topLabel) {\n      points = [\n        { x: dx - bbox.width / 2, y: dy - nodeHeight / 2 },\n        { x: dx + bbox.width / 2, y: dy - nodeHeight / 2 },\n        { x: dx + bbox.width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding },\n        { x: dx + width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding },\n        { x: dx + width / 2, y: dy + nodeHeight / 2 },\n        { x: dx - width / 2, y: dy + nodeHeight / 2 },\n        { x: dx - width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding },\n        { x: dx - bbox.width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding }\n      ];\n    } else {\n      points = [\n        { x: dx - width / 2, y: dy - nodeHeight / 2 },\n        { x: dx + width / 2, y: dy - nodeHeight / 2 },\n        { x: dx + width / 2, y: dy - nodeHeight / 2 + height },\n        { x: dx + bbox.width / 2, y: dy - nodeHeight / 2 + height },\n        { x: dx + bbox.width / 2 / 2, y: dy + nodeHeight / 2 },\n        { x: dx - bbox.width / 2, y: dy + nodeHeight / 2 },\n        { x: dx - bbox.width / 2, y: dy - nodeHeight / 2 + height },\n        { x: dx - width / 2, y: dy - nodeHeight / 2 + height }\n      ];\n    }\n    const pos = intersect_default.polygon(node, points, point);\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(iconSquare, \"iconSquare\");\n\n// src/rendering-util/rendering-elements/shapes/imageSquare.ts\nasync function imageSquare(parent, node, { config: { flowchart } }) {\n  const img = new Image();\n  img.src = node?.img ?? \"\";\n  await img.decode();\n  const imageNaturalWidth = Number(img.naturalWidth.toString().replace(\"px\", \"\"));\n  const imageNaturalHeight = Number(img.naturalHeight.toString().replace(\"px\", \"\"));\n  node.imageAspectRatio = imageNaturalWidth / imageNaturalHeight;\n  const { labelStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const defaultWidth = flowchart?.wrappingWidth;\n  node.defaultWidth = flowchart?.wrappingWidth;\n  const imageRawWidth = Math.max(\n    node.label ? defaultWidth ?? 0 : 0,\n    node?.assetWidth ?? imageNaturalWidth\n  );\n  const imageWidth = node.constraint === \"on\" ? node?.assetHeight ? node.assetHeight * node.imageAspectRatio : imageRawWidth : imageRawWidth;\n  const imageHeight = node.constraint === \"on\" ? imageWidth / node.imageAspectRatio : node?.assetHeight ?? imageNaturalHeight;\n  node.width = Math.max(imageWidth, defaultWidth ?? 0);\n  const { shapeSvg, bbox, label } = await labelHelper(parent, node, \"image-shape default\");\n  const topLabel = node.pos === \"t\";\n  const x2 = -imageWidth / 2;\n  const y2 = -imageHeight / 2;\n  const labelPadding = node.label ? 8 : 0;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const imageNode = rc.rectangle(x2, y2, imageWidth, imageHeight, options);\n  const outerWidth = Math.max(imageWidth, bbox.width);\n  const outerHeight = imageHeight + bbox.height + labelPadding;\n  const outerNode = rc.rectangle(-outerWidth / 2, -outerHeight / 2, outerWidth, outerHeight, {\n    ...options,\n    fill: \"none\",\n    stroke: \"none\"\n  });\n  const iconShape = shapeSvg.insert(() => imageNode, \":first-child\");\n  const outerShape = shapeSvg.insert(() => outerNode);\n  if (node.img) {\n    const image = shapeSvg.append(\"image\");\n    image.attr(\"href\", node.img);\n    image.attr(\"width\", imageWidth);\n    image.attr(\"height\", imageHeight);\n    image.attr(\"preserveAspectRatio\", \"none\");\n    image.attr(\n      \"transform\",\n      `translate(${-imageWidth / 2},${topLabel ? outerHeight / 2 - imageHeight : -outerHeight / 2})`\n    );\n  }\n  label.attr(\n    \"transform\",\n    `translate(${-bbox.width / 2 - (bbox.x - (bbox.left ?? 0))},${topLabel ? -imageHeight / 2 - bbox.height / 2 - labelPadding / 2 : imageHeight / 2 - bbox.height / 2 + labelPadding / 2})`\n  );\n  iconShape.attr(\n    \"transform\",\n    `translate(${0},${topLabel ? bbox.height / 2 + labelPadding / 2 : -bbox.height / 2 - labelPadding / 2})`\n  );\n  updateNodeBounds(node, outerShape);\n  node.intersect = function(point) {\n    log.info(\"iconSquare intersect\", node, point);\n    if (!node.label) {\n      return intersect_default.rect(node, point);\n    }\n    const dx = node.x ?? 0;\n    const dy = node.y ?? 0;\n    const nodeHeight = node.height ?? 0;\n    let points = [];\n    if (topLabel) {\n      points = [\n        { x: dx - bbox.width / 2, y: dy - nodeHeight / 2 },\n        { x: dx + bbox.width / 2, y: dy - nodeHeight / 2 },\n        { x: dx + bbox.width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding },\n        { x: dx + imageWidth / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding },\n        { x: dx + imageWidth / 2, y: dy + nodeHeight / 2 },\n        { x: dx - imageWidth / 2, y: dy + nodeHeight / 2 },\n        { x: dx - imageWidth / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding },\n        { x: dx - bbox.width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding }\n      ];\n    } else {\n      points = [\n        { x: dx - imageWidth / 2, y: dy - nodeHeight / 2 },\n        { x: dx + imageWidth / 2, y: dy - nodeHeight / 2 },\n        { x: dx + imageWidth / 2, y: dy - nodeHeight / 2 + imageHeight },\n        { x: dx + bbox.width / 2, y: dy - nodeHeight / 2 + imageHeight },\n        { x: dx + bbox.width / 2 / 2, y: dy + nodeHeight / 2 },\n        { x: dx - bbox.width / 2, y: dy + nodeHeight / 2 },\n        { x: dx - bbox.width / 2, y: dy - nodeHeight / 2 + imageHeight },\n        { x: dx - imageWidth / 2, y: dy - nodeHeight / 2 + imageHeight }\n      ];\n    }\n    const pos = intersect_default.polygon(node, points, point);\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(imageSquare, \"imageSquare\");\n\n// src/rendering-util/rendering-elements/shapes/invertedTrapezoid.ts\nasync function inv_trapezoid(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));\n  const w2 = Math.max(bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);\n  const h2 = Math.max(bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);\n  const points = [\n    { x: 0, y: 0 },\n    { x: w2, y: 0 },\n    { x: w2 + 3 * h2 / 6, y: -h2 },\n    { x: -3 * h2 / 6, y: -h2 }\n  ];\n  let polygon;\n  const { cssStyles } = node;\n  if (node.look === \"handDrawn\") {\n    const rc = at.svg(shapeSvg);\n    const options = userNodeOverrides(node, {});\n    const pathData = createPathFromPoints(points);\n    const roughNode = rc.path(pathData, options);\n    polygon = shapeSvg.insert(() => roughNode, \":first-child\").attr(\"transform\", `translate(${-w2 / 2}, ${h2 / 2})`);\n    if (cssStyles) {\n      polygon.attr(\"style\", cssStyles);\n    }\n  } else {\n    polygon = insertPolygonShape(shapeSvg, w2, h2, points);\n  }\n  if (nodeStyles) {\n    polygon.attr(\"style\", nodeStyles);\n  }\n  node.width = w2;\n  node.height = h2;\n  updateNodeBounds(node, polygon);\n  node.intersect = function(point) {\n    return intersect_default.polygon(node, points, point);\n  };\n  return shapeSvg;\n}\n__name(inv_trapezoid, \"inv_trapezoid\");\n\n// src/rendering-util/rendering-elements/shapes/drawRect.ts\nasync function drawRect(parent, node, options) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));\n  const totalWidth = Math.max(bbox.width + options.labelPaddingX * 2, node?.width || 0);\n  const totalHeight = Math.max(bbox.height + options.labelPaddingY * 2, node?.height || 0);\n  const x2 = -totalWidth / 2;\n  const y2 = -totalHeight / 2;\n  let rect2;\n  let { rx, ry } = node;\n  const { cssStyles } = node;\n  if (options?.rx && options.ry) {\n    rx = options.rx;\n    ry = options.ry;\n  }\n  if (node.look === \"handDrawn\") {\n    const rc = at.svg(shapeSvg);\n    const options2 = userNodeOverrides(node, {});\n    const roughNode = rx || ry ? rc.path(createRoundedRectPathD(x2, y2, totalWidth, totalHeight, rx || 0), options2) : rc.rectangle(x2, y2, totalWidth, totalHeight, options2);\n    rect2 = shapeSvg.insert(() => roughNode, \":first-child\");\n    rect2.attr(\"class\", \"basic label-container\").attr(\"style\", handleUndefinedAttr(cssStyles));\n  } else {\n    rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n    rect2.attr(\"class\", \"basic label-container\").attr(\"style\", nodeStyles).attr(\"rx\", handleUndefinedAttr(rx)).attr(\"ry\", handleUndefinedAttr(ry)).attr(\"x\", x2).attr(\"y\", y2).attr(\"width\", totalWidth).attr(\"height\", totalHeight);\n  }\n  updateNodeBounds(node, rect2);\n  node.intersect = function(point) {\n    return intersect_default.rect(node, point);\n  };\n  return shapeSvg;\n}\n__name(drawRect, \"drawRect\");\n\n// src/rendering-util/rendering-elements/shapes/labelRect.ts\nasync function labelRect(parent, node) {\n  const { shapeSvg, bbox, label } = await labelHelper(parent, node, \"label\");\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const totalWidth = 0.1;\n  const totalHeight = 0.1;\n  rect2.attr(\"width\", totalWidth).attr(\"height\", totalHeight);\n  shapeSvg.attr(\"class\", \"label edgeLabel\");\n  label.attr(\n    \"transform\",\n    `translate(${-(bbox.width / 2) - (bbox.x - (bbox.left ?? 0))}, ${-(bbox.height / 2) - (bbox.y - (bbox.top ?? 0))})`\n  );\n  updateNodeBounds(node, rect2);\n  node.intersect = function(point) {\n    return intersect_default.rect(node, point);\n  };\n  return shapeSvg;\n}\n__name(labelRect, \"labelRect\");\n\n// src/rendering-util/rendering-elements/shapes/leanLeft.ts\nasync function lean_left(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));\n  const w2 = Math.max(bbox.width + (node.padding ?? 0), node?.width ?? 0);\n  const h2 = Math.max(bbox.height + (node.padding ?? 0), node?.height ?? 0);\n  const points = [\n    { x: 0, y: 0 },\n    { x: w2 + 3 * h2 / 6, y: 0 },\n    { x: w2, y: -h2 },\n    { x: -(3 * h2) / 6, y: -h2 }\n  ];\n  let polygon;\n  const { cssStyles } = node;\n  if (node.look === \"handDrawn\") {\n    const rc = at.svg(shapeSvg);\n    const options = userNodeOverrides(node, {});\n    const pathData = createPathFromPoints(points);\n    const roughNode = rc.path(pathData, options);\n    polygon = shapeSvg.insert(() => roughNode, \":first-child\").attr(\"transform\", `translate(${-w2 / 2}, ${h2 / 2})`);\n    if (cssStyles) {\n      polygon.attr(\"style\", cssStyles);\n    }\n  } else {\n    polygon = insertPolygonShape(shapeSvg, w2, h2, points);\n  }\n  if (nodeStyles) {\n    polygon.attr(\"style\", nodeStyles);\n  }\n  node.width = w2;\n  node.height = h2;\n  updateNodeBounds(node, polygon);\n  node.intersect = function(point) {\n    return intersect_default.polygon(node, points, point);\n  };\n  return shapeSvg;\n}\n__name(lean_left, \"lean_left\");\n\n// src/rendering-util/rendering-elements/shapes/leanRight.ts\nasync function lean_right(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));\n  const w2 = Math.max(bbox.width + (node.padding ?? 0), node?.width ?? 0);\n  const h2 = Math.max(bbox.height + (node.padding ?? 0), node?.height ?? 0);\n  const points = [\n    { x: -3 * h2 / 6, y: 0 },\n    { x: w2, y: 0 },\n    { x: w2 + 3 * h2 / 6, y: -h2 },\n    { x: 0, y: -h2 }\n  ];\n  let polygon;\n  const { cssStyles } = node;\n  if (node.look === \"handDrawn\") {\n    const rc = at.svg(shapeSvg);\n    const options = userNodeOverrides(node, {});\n    const pathData = createPathFromPoints(points);\n    const roughNode = rc.path(pathData, options);\n    polygon = shapeSvg.insert(() => roughNode, \":first-child\").attr(\"transform\", `translate(${-w2 / 2}, ${h2 / 2})`);\n    if (cssStyles) {\n      polygon.attr(\"style\", cssStyles);\n    }\n  } else {\n    polygon = insertPolygonShape(shapeSvg, w2, h2, points);\n  }\n  if (nodeStyles) {\n    polygon.attr(\"style\", nodeStyles);\n  }\n  node.width = w2;\n  node.height = h2;\n  updateNodeBounds(node, polygon);\n  node.intersect = function(point) {\n    return intersect_default.polygon(node, points, point);\n  };\n  return shapeSvg;\n}\n__name(lean_right, \"lean_right\");\n\n// src/rendering-util/rendering-elements/shapes/lightningBolt.ts\nfunction lightningBolt(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.label = \"\";\n  node.labelStyle = labelStyles;\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", getNodeClasses(node)).attr(\"id\", node.domId ?? node.id);\n  const { cssStyles } = node;\n  const width = Math.max(35, node?.width ?? 0);\n  const height = Math.max(35, node?.height ?? 0);\n  const gap = 7;\n  const points = [\n    { x: width, y: 0 },\n    { x: 0, y: height + gap / 2 },\n    { x: width - 2 * gap, y: height + gap / 2 },\n    { x: 0, y: 2 * height },\n    { x: width, y: height - gap / 2 },\n    { x: 2 * gap, y: height - gap / 2 }\n  ];\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const linePath = createPathFromPoints(points);\n  const lineNode = rc.path(linePath, options);\n  const lightningBolt2 = shapeSvg.insert(() => lineNode, \":first-child\");\n  if (cssStyles && node.look !== \"handDrawn\") {\n    lightningBolt2.selectAll(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    lightningBolt2.selectAll(\"path\").attr(\"style\", nodeStyles);\n  }\n  lightningBolt2.attr(\"transform\", `translate(-${width / 2},${-height})`);\n  updateNodeBounds(node, lightningBolt2);\n  node.intersect = function(point) {\n    log.info(\"lightningBolt intersect\", node, point);\n    const pos = intersect_default.polygon(node, points, point);\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(lightningBolt, \"lightningBolt\");\n\n// src/rendering-util/rendering-elements/shapes/linedCylinder.ts\nvar createCylinderPathD2 = /* @__PURE__ */ __name((x2, y2, width, height, rx, ry, outerOffset) => {\n  return [\n    `M${x2},${y2 + ry}`,\n    `a${rx},${ry} 0,0,0 ${width},0`,\n    `a${rx},${ry} 0,0,0 ${-width},0`,\n    `l0,${height}`,\n    `a${rx},${ry} 0,0,0 ${width},0`,\n    `l0,${-height}`,\n    `M${x2},${y2 + ry + outerOffset}`,\n    `a${rx},${ry} 0,0,0 ${width},0`\n  ].join(\" \");\n}, \"createCylinderPathD\");\nvar createOuterCylinderPathD2 = /* @__PURE__ */ __name((x2, y2, width, height, rx, ry, outerOffset) => {\n  return [\n    `M${x2},${y2 + ry}`,\n    `M${x2 + width},${y2 + ry}`,\n    `a${rx},${ry} 0,0,0 ${-width},0`,\n    `l0,${height}`,\n    `a${rx},${ry} 0,0,0 ${width},0`,\n    `l0,${-height}`,\n    `M${x2},${y2 + ry + outerOffset}`,\n    `a${rx},${ry} 0,0,0 ${width},0`\n  ].join(\" \");\n}, \"createOuterCylinderPathD\");\nvar createInnerCylinderPathD2 = /* @__PURE__ */ __name((x2, y2, width, height, rx, ry) => {\n  return [`M${x2 - width / 2},${-height / 2}`, `a${rx},${ry} 0,0,0 ${width},0`].join(\" \");\n}, \"createInnerCylinderPathD\");\nasync function linedCylinder(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));\n  const w2 = Math.max(bbox.width + (node.padding ?? 0), node.width ?? 0);\n  const rx = w2 / 2;\n  const ry = rx / (2.5 + w2 / 50);\n  const h2 = Math.max(bbox.height + ry + (node.padding ?? 0), node.height ?? 0);\n  const outerOffset = h2 * 0.1;\n  let cylinder2;\n  const { cssStyles } = node;\n  if (node.look === \"handDrawn\") {\n    const rc = at.svg(shapeSvg);\n    const outerPathData = createOuterCylinderPathD2(0, 0, w2, h2, rx, ry, outerOffset);\n    const innerPathData = createInnerCylinderPathD2(0, ry, w2, h2, rx, ry);\n    const options = userNodeOverrides(node, {});\n    const outerNode = rc.path(outerPathData, options);\n    const innerLine = rc.path(innerPathData, options);\n    const innerLineEl = shapeSvg.insert(() => innerLine, \":first-child\");\n    innerLineEl.attr(\"class\", \"line\");\n    cylinder2 = shapeSvg.insert(() => outerNode, \":first-child\");\n    cylinder2.attr(\"class\", \"basic label-container\");\n    if (cssStyles) {\n      cylinder2.attr(\"style\", cssStyles);\n    }\n  } else {\n    const pathData = createCylinderPathD2(0, 0, w2, h2, rx, ry, outerOffset);\n    cylinder2 = shapeSvg.insert(\"path\", \":first-child\").attr(\"d\", pathData).attr(\"class\", \"basic label-container\").attr(\"style\", handleUndefinedAttr(cssStyles)).attr(\"style\", nodeStyles);\n  }\n  cylinder2.attr(\"label-offset-y\", ry);\n  cylinder2.attr(\"transform\", `translate(${-w2 / 2}, ${-(h2 / 2 + ry)})`);\n  updateNodeBounds(node, cylinder2);\n  label.attr(\n    \"transform\",\n    `translate(${-(bbox.width / 2) - (bbox.x - (bbox.left ?? 0))}, ${-(bbox.height / 2) + ry - (bbox.y - (bbox.top ?? 0))})`\n  );\n  node.intersect = function(point) {\n    const pos = intersect_default.rect(node, point);\n    const x2 = pos.x - (node.x ?? 0);\n    if (rx != 0 && (Math.abs(x2) < (node.width ?? 0) / 2 || Math.abs(x2) == (node.width ?? 0) / 2 && Math.abs(pos.y - (node.y ?? 0)) > (node.height ?? 0) / 2 - ry)) {\n      let y2 = ry * ry * (1 - x2 * x2 / (rx * rx));\n      if (y2 > 0) {\n        y2 = Math.sqrt(y2);\n      }\n      y2 = ry - y2;\n      if (point.y - (node.y ?? 0) > 0) {\n        y2 = -y2;\n      }\n      pos.y += y2;\n    }\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(linedCylinder, \"linedCylinder\");\n\n// src/rendering-util/rendering-elements/shapes/linedWaveEdgedRect.ts\nasync function linedWaveEdgedRect(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));\n  const w2 = Math.max(bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);\n  const h2 = Math.max(bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);\n  const waveAmplitude = h2 / 4;\n  const finalH = h2 + waveAmplitude;\n  const { cssStyles } = node;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const points = [\n    { x: -w2 / 2 - w2 / 2 * 0.1, y: -finalH / 2 },\n    { x: -w2 / 2 - w2 / 2 * 0.1, y: finalH / 2 },\n    ...generateFullSineWavePoints(\n      -w2 / 2 - w2 / 2 * 0.1,\n      finalH / 2,\n      w2 / 2 + w2 / 2 * 0.1,\n      finalH / 2,\n      waveAmplitude,\n      0.8\n    ),\n    { x: w2 / 2 + w2 / 2 * 0.1, y: -finalH / 2 },\n    { x: -w2 / 2 - w2 / 2 * 0.1, y: -finalH / 2 },\n    { x: -w2 / 2, y: -finalH / 2 },\n    { x: -w2 / 2, y: finalH / 2 * 1.1 },\n    { x: -w2 / 2, y: -finalH / 2 }\n  ];\n  const poly = rc.polygon(\n    points.map((p2) => [p2.x, p2.y]),\n    options\n  );\n  const waveEdgeRect = shapeSvg.insert(() => poly, \":first-child\");\n  waveEdgeRect.attr(\"class\", \"basic label-container\");\n  if (cssStyles && node.look !== \"handDrawn\") {\n    waveEdgeRect.selectAll(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    waveEdgeRect.selectAll(\"path\").attr(\"style\", nodeStyles);\n  }\n  waveEdgeRect.attr(\"transform\", `translate(0,${-waveAmplitude / 2})`);\n  label.attr(\n    \"transform\",\n    `translate(${-w2 / 2 + (node.padding ?? 0) + w2 / 2 * 0.1 / 2 - (bbox.x - (bbox.left ?? 0))},${-h2 / 2 + (node.padding ?? 0) - waveAmplitude / 2 - (bbox.y - (bbox.top ?? 0))})`\n  );\n  updateNodeBounds(node, waveEdgeRect);\n  node.intersect = function(point) {\n    const pos = intersect_default.polygon(node, points, point);\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(linedWaveEdgedRect, \"linedWaveEdgedRect\");\n\n// src/rendering-util/rendering-elements/shapes/multiRect.ts\nasync function multiRect(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));\n  const w2 = Math.max(bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);\n  const h2 = Math.max(bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);\n  const rectOffset = 5;\n  const x2 = -w2 / 2;\n  const y2 = -h2 / 2;\n  const { cssStyles } = node;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  const outerPathPoints = [\n    { x: x2 - rectOffset, y: y2 + rectOffset },\n    { x: x2 - rectOffset, y: y2 + h2 + rectOffset },\n    { x: x2 + w2 - rectOffset, y: y2 + h2 + rectOffset },\n    { x: x2 + w2 - rectOffset, y: y2 + h2 },\n    { x: x2 + w2, y: y2 + h2 },\n    { x: x2 + w2, y: y2 + h2 - rectOffset },\n    { x: x2 + w2 + rectOffset, y: y2 + h2 - rectOffset },\n    { x: x2 + w2 + rectOffset, y: y2 - rectOffset },\n    { x: x2 + rectOffset, y: y2 - rectOffset },\n    { x: x2 + rectOffset, y: y2 },\n    { x: x2, y: y2 },\n    { x: x2, y: y2 + rectOffset }\n  ];\n  const innerPathPoints = [\n    { x: x2, y: y2 + rectOffset },\n    { x: x2 + w2 - rectOffset, y: y2 + rectOffset },\n    { x: x2 + w2 - rectOffset, y: y2 + h2 },\n    { x: x2 + w2, y: y2 + h2 },\n    { x: x2 + w2, y: y2 },\n    { x: x2, y: y2 }\n  ];\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const outerPath = createPathFromPoints(outerPathPoints);\n  const outerNode = rc.path(outerPath, options);\n  const innerPath = createPathFromPoints(innerPathPoints);\n  const innerNode = rc.path(innerPath, { ...options, fill: \"none\" });\n  const multiRect2 = shapeSvg.insert(() => innerNode, \":first-child\");\n  multiRect2.insert(() => outerNode, \":first-child\");\n  multiRect2.attr(\"class\", \"basic label-container\");\n  if (cssStyles && node.look !== \"handDrawn\") {\n    multiRect2.selectAll(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    multiRect2.selectAll(\"path\").attr(\"style\", nodeStyles);\n  }\n  label.attr(\n    \"transform\",\n    `translate(${-(bbox.width / 2) - rectOffset - (bbox.x - (bbox.left ?? 0))}, ${-(bbox.height / 2) + rectOffset - (bbox.y - (bbox.top ?? 0))})`\n  );\n  updateNodeBounds(node, multiRect2);\n  node.intersect = function(point) {\n    const pos = intersect_default.polygon(node, outerPathPoints, point);\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(multiRect, \"multiRect\");\n\n// src/rendering-util/rendering-elements/shapes/multiWaveEdgedRectangle.ts\nasync function multiWaveEdgedRectangle(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));\n  const w2 = Math.max(bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);\n  const h2 = Math.max(bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);\n  const waveAmplitude = h2 / 4;\n  const finalH = h2 + waveAmplitude;\n  const x2 = -w2 / 2;\n  const y2 = -finalH / 2;\n  const rectOffset = 5;\n  const { cssStyles } = node;\n  const wavePoints = generateFullSineWavePoints(\n    x2 - rectOffset,\n    y2 + finalH + rectOffset,\n    x2 + w2 - rectOffset,\n    y2 + finalH + rectOffset,\n    waveAmplitude,\n    0.8\n  );\n  const lastWavePoint = wavePoints?.[wavePoints.length - 1];\n  const outerPathPoints = [\n    { x: x2 - rectOffset, y: y2 + rectOffset },\n    { x: x2 - rectOffset, y: y2 + finalH + rectOffset },\n    ...wavePoints,\n    { x: x2 + w2 - rectOffset, y: lastWavePoint.y - rectOffset },\n    { x: x2 + w2, y: lastWavePoint.y - rectOffset },\n    { x: x2 + w2, y: lastWavePoint.y - 2 * rectOffset },\n    { x: x2 + w2 + rectOffset, y: lastWavePoint.y - 2 * rectOffset },\n    { x: x2 + w2 + rectOffset, y: y2 - rectOffset },\n    { x: x2 + rectOffset, y: y2 - rectOffset },\n    { x: x2 + rectOffset, y: y2 },\n    { x: x2, y: y2 },\n    { x: x2, y: y2 + rectOffset }\n  ];\n  const innerPathPoints = [\n    { x: x2, y: y2 + rectOffset },\n    { x: x2 + w2 - rectOffset, y: y2 + rectOffset },\n    { x: x2 + w2 - rectOffset, y: lastWavePoint.y - rectOffset },\n    { x: x2 + w2, y: lastWavePoint.y - rectOffset },\n    { x: x2 + w2, y: y2 },\n    { x: x2, y: y2 }\n  ];\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const outerPath = createPathFromPoints(outerPathPoints);\n  const outerNode = rc.path(outerPath, options);\n  const innerPath = createPathFromPoints(innerPathPoints);\n  const innerNode = rc.path(innerPath, options);\n  const shape = shapeSvg.insert(() => outerNode, \":first-child\");\n  shape.insert(() => innerNode);\n  shape.attr(\"class\", \"basic label-container\");\n  if (cssStyles && node.look !== \"handDrawn\") {\n    shape.selectAll(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    shape.selectAll(\"path\").attr(\"style\", nodeStyles);\n  }\n  shape.attr(\"transform\", `translate(0,${-waveAmplitude / 2})`);\n  label.attr(\n    \"transform\",\n    `translate(${-(bbox.width / 2) - rectOffset - (bbox.x - (bbox.left ?? 0))}, ${-(bbox.height / 2) + rectOffset - waveAmplitude / 2 - (bbox.y - (bbox.top ?? 0))})`\n  );\n  updateNodeBounds(node, shape);\n  node.intersect = function(point) {\n    const pos = intersect_default.polygon(node, outerPathPoints, point);\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(multiWaveEdgedRectangle, \"multiWaveEdgedRectangle\");\n\n// src/rendering-util/rendering-elements/shapes/note.ts\nasync function note(parent, node, { config: { themeVariables } }) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const useHtmlLabels = node.useHtmlLabels || getConfig().flowchart?.htmlLabels !== false;\n  if (!useHtmlLabels) {\n    node.centerLabel = true;\n  }\n  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));\n  const totalWidth = Math.max(bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);\n  const totalHeight = Math.max(bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);\n  const x2 = -totalWidth / 2;\n  const y2 = -totalHeight / 2;\n  const { cssStyles } = node;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {\n    fill: themeVariables.noteBkgColor,\n    stroke: themeVariables.noteBorderColor\n  });\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const noteShapeNode = rc.rectangle(x2, y2, totalWidth, totalHeight, options);\n  const rect2 = shapeSvg.insert(() => noteShapeNode, \":first-child\");\n  rect2.attr(\"class\", \"basic label-container\");\n  if (cssStyles && node.look !== \"handDrawn\") {\n    rect2.selectAll(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    rect2.selectAll(\"path\").attr(\"style\", nodeStyles);\n  }\n  updateNodeBounds(node, rect2);\n  node.intersect = function(point) {\n    return intersect_default.rect(node, point);\n  };\n  return shapeSvg;\n}\n__name(note, \"note\");\n\n// src/rendering-util/rendering-elements/shapes/question.ts\nvar createDecisionBoxPathD = /* @__PURE__ */ __name((x2, y2, size) => {\n  return [\n    `M${x2 + size / 2},${y2}`,\n    `L${x2 + size},${y2 - size / 2}`,\n    `L${x2 + size / 2},${y2 - size}`,\n    `L${x2},${y2 - size / 2}`,\n    \"Z\"\n  ].join(\" \");\n}, \"createDecisionBoxPathD\");\nasync function question(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));\n  const w2 = bbox.width + node.padding;\n  const h2 = bbox.height + node.padding;\n  const s2 = w2 + h2;\n  const points = [\n    { x: s2 / 2, y: 0 },\n    { x: s2, y: -s2 / 2 },\n    { x: s2 / 2, y: -s2 },\n    { x: 0, y: -s2 / 2 }\n  ];\n  let polygon;\n  const { cssStyles } = node;\n  if (node.look === \"handDrawn\") {\n    const rc = at.svg(shapeSvg);\n    const options = userNodeOverrides(node, {});\n    const pathData = createDecisionBoxPathD(0, 0, s2);\n    const roughNode = rc.path(pathData, options);\n    polygon = shapeSvg.insert(() => roughNode, \":first-child\").attr(\"transform\", `translate(${-s2 / 2}, ${s2 / 2})`);\n    if (cssStyles) {\n      polygon.attr(\"style\", cssStyles);\n    }\n  } else {\n    polygon = insertPolygonShape(shapeSvg, s2, s2, points);\n  }\n  if (nodeStyles) {\n    polygon.attr(\"style\", nodeStyles);\n  }\n  updateNodeBounds(node, polygon);\n  node.intersect = function(point) {\n    log.debug(\n      \"APA12 Intersect called SPLIT\\npoint:\",\n      point,\n      \"\\nnode:\\n\",\n      node,\n      \"\\nres:\",\n      intersect_default.polygon(node, points, point)\n    );\n    return intersect_default.polygon(node, points, point);\n  };\n  return shapeSvg;\n}\n__name(question, \"question\");\n\n// src/rendering-util/rendering-elements/shapes/rectLeftInvArrow.ts\nasync function rect_left_inv_arrow(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));\n  const w2 = Math.max(bbox.width + (node.padding ?? 0), node?.width ?? 0);\n  const h2 = Math.max(bbox.height + (node.padding ?? 0), node?.height ?? 0);\n  const x2 = -w2 / 2;\n  const y2 = -h2 / 2;\n  const notch = y2 / 2;\n  const points = [\n    { x: x2 + notch, y: y2 },\n    { x: x2, y: 0 },\n    { x: x2 + notch, y: -y2 },\n    { x: -x2, y: -y2 },\n    { x: -x2, y: y2 }\n  ];\n  const { cssStyles } = node;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const pathData = createPathFromPoints(points);\n  const roughNode = rc.path(pathData, options);\n  const polygon = shapeSvg.insert(() => roughNode, \":first-child\");\n  polygon.attr(\"class\", \"basic label-container\");\n  if (cssStyles && node.look !== \"handDrawn\") {\n    polygon.selectAll(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    polygon.selectAll(\"path\").attr(\"style\", nodeStyles);\n  }\n  polygon.attr(\"transform\", `translate(${-notch / 2},0)`);\n  label.attr(\n    \"transform\",\n    `translate(${-notch / 2 - bbox.width / 2 - (bbox.x - (bbox.left ?? 0))}, ${-(bbox.height / 2) - (bbox.y - (bbox.top ?? 0))})`\n  );\n  updateNodeBounds(node, polygon);\n  node.intersect = function(point) {\n    return intersect_default.polygon(node, points, point);\n  };\n  return shapeSvg;\n}\n__name(rect_left_inv_arrow, \"rect_left_inv_arrow\");\n\n// src/rendering-util/rendering-elements/shapes/rectWithTitle.ts\nasync function rectWithTitle(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  let classes;\n  if (!node.cssClasses) {\n    classes = \"node default\";\n  } else {\n    classes = \"node \" + node.cssClasses;\n  }\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", classes).attr(\"id\", node.domId || node.id);\n  const g2 = shapeSvg.insert(\"g\");\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"label\").attr(\"style\", nodeStyles);\n  const description = node.description;\n  const title = node.label;\n  const text2 = label.node().appendChild(await createLabel_default(title, node.labelStyle, true, true));\n  let bbox = { width: 0, height: 0 };\n  if (evaluate(getConfig2()?.flowchart?.htmlLabels)) {\n    const div2 = text2.children[0];\n    const dv2 = select_default(text2);\n    bbox = div2.getBoundingClientRect();\n    dv2.attr(\"width\", bbox.width);\n    dv2.attr(\"height\", bbox.height);\n  }\n  log.info(\"Text 2\", description);\n  const textRows = description || [];\n  const titleBox = text2.getBBox();\n  const descr = label.node().appendChild(\n    await createLabel_default(\n      textRows.join ? textRows.join(\"<br/>\") : textRows,\n      node.labelStyle,\n      true,\n      true\n    )\n  );\n  const div = descr.children[0];\n  const dv = select_default(descr);\n  bbox = div.getBoundingClientRect();\n  dv.attr(\"width\", bbox.width);\n  dv.attr(\"height\", bbox.height);\n  const halfPadding = (node.padding || 0) / 2;\n  select_default(descr).attr(\n    \"transform\",\n    \"translate( \" + (bbox.width > titleBox.width ? 0 : (titleBox.width - bbox.width) / 2) + \", \" + (titleBox.height + halfPadding + 5) + \")\"\n  );\n  select_default(text2).attr(\n    \"transform\",\n    \"translate( \" + (bbox.width < titleBox.width ? 0 : -(titleBox.width - bbox.width) / 2) + \", 0)\"\n  );\n  bbox = label.node().getBBox();\n  label.attr(\n    \"transform\",\n    \"translate(\" + -bbox.width / 2 + \", \" + (-bbox.height / 2 - halfPadding + 3) + \")\"\n  );\n  const totalWidth = bbox.width + (node.padding || 0);\n  const totalHeight = bbox.height + (node.padding || 0);\n  const x2 = -bbox.width / 2 - halfPadding;\n  const y2 = -bbox.height / 2 - halfPadding;\n  let rect2;\n  let innerLine;\n  if (node.look === \"handDrawn\") {\n    const rc = at.svg(shapeSvg);\n    const options = userNodeOverrides(node, {});\n    const roughNode = rc.path(\n      createRoundedRectPathD(x2, y2, totalWidth, totalHeight, node.rx || 0),\n      options\n    );\n    const roughLine = rc.line(\n      -bbox.width / 2 - halfPadding,\n      -bbox.height / 2 - halfPadding + titleBox.height + halfPadding,\n      bbox.width / 2 + halfPadding,\n      -bbox.height / 2 - halfPadding + titleBox.height + halfPadding,\n      options\n    );\n    innerLine = shapeSvg.insert(() => {\n      log.debug(\"Rough node insert CXC\", roughNode);\n      return roughLine;\n    }, \":first-child\");\n    rect2 = shapeSvg.insert(() => {\n      log.debug(\"Rough node insert CXC\", roughNode);\n      return roughNode;\n    }, \":first-child\");\n  } else {\n    rect2 = g2.insert(\"rect\", \":first-child\");\n    innerLine = g2.insert(\"line\");\n    rect2.attr(\"class\", \"outer title-state\").attr(\"style\", nodeStyles).attr(\"x\", -bbox.width / 2 - halfPadding).attr(\"y\", -bbox.height / 2 - halfPadding).attr(\"width\", bbox.width + (node.padding || 0)).attr(\"height\", bbox.height + (node.padding || 0));\n    innerLine.attr(\"class\", \"divider\").attr(\"x1\", -bbox.width / 2 - halfPadding).attr(\"x2\", bbox.width / 2 + halfPadding).attr(\"y1\", -bbox.height / 2 - halfPadding + titleBox.height + halfPadding).attr(\"y2\", -bbox.height / 2 - halfPadding + titleBox.height + halfPadding);\n  }\n  updateNodeBounds(node, rect2);\n  node.intersect = function(point) {\n    return intersect_default.rect(node, point);\n  };\n  return shapeSvg;\n}\n__name(rectWithTitle, \"rectWithTitle\");\n\n// src/rendering-util/rendering-elements/shapes/roundedRect.ts\nasync function roundedRect(parent, node) {\n  const options = {\n    rx: 5,\n    ry: 5,\n    classes: \"\",\n    labelPaddingX: (node?.padding || 0) * 1,\n    labelPaddingY: (node?.padding || 0) * 1\n  };\n  return drawRect(parent, node, options);\n}\n__name(roundedRect, \"roundedRect\");\n\n// src/rendering-util/rendering-elements/shapes/shadedProcess.ts\nasync function shadedProcess(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));\n  const halfPadding = node?.padding ?? 0;\n  const w2 = Math.max(bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);\n  const h2 = Math.max(bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);\n  const x2 = -bbox.width / 2 - halfPadding;\n  const y2 = -bbox.height / 2 - halfPadding;\n  const { cssStyles } = node;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const points = [\n    { x: x2, y: y2 },\n    { x: x2 + w2 + 8, y: y2 },\n    { x: x2 + w2 + 8, y: y2 + h2 },\n    { x: x2 - 8, y: y2 + h2 },\n    { x: x2 - 8, y: y2 },\n    { x: x2, y: y2 },\n    { x: x2, y: y2 + h2 }\n  ];\n  const roughNode = rc.polygon(\n    points.map((p2) => [p2.x, p2.y]),\n    options\n  );\n  const rect2 = shapeSvg.insert(() => roughNode, \":first-child\");\n  rect2.attr(\"class\", \"basic label-container\").attr(\"style\", handleUndefinedAttr(cssStyles));\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    rect2.selectAll(\"path\").attr(\"style\", nodeStyles);\n  }\n  if (cssStyles && node.look !== \"handDrawn\") {\n    rect2.selectAll(\"path\").attr(\"style\", nodeStyles);\n  }\n  label.attr(\n    \"transform\",\n    `translate(${-w2 / 2 + 4 + (node.padding ?? 0) - (bbox.x - (bbox.left ?? 0))},${-h2 / 2 + (node.padding ?? 0) - (bbox.y - (bbox.top ?? 0))})`\n  );\n  updateNodeBounds(node, rect2);\n  node.intersect = function(point) {\n    return intersect_default.rect(node, point);\n  };\n  return shapeSvg;\n}\n__name(shadedProcess, \"shadedProcess\");\n\n// src/rendering-util/rendering-elements/shapes/slopedRect.ts\nasync function slopedRect(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));\n  const w2 = Math.max(bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);\n  const h2 = Math.max(bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);\n  const x2 = -w2 / 2;\n  const y2 = -h2 / 2;\n  const { cssStyles } = node;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const points = [\n    { x: x2, y: y2 },\n    { x: x2, y: y2 + h2 },\n    { x: x2 + w2, y: y2 + h2 },\n    { x: x2 + w2, y: y2 - h2 / 2 }\n  ];\n  const pathData = createPathFromPoints(points);\n  const shapeNode = rc.path(pathData, options);\n  const polygon = shapeSvg.insert(() => shapeNode, \":first-child\");\n  polygon.attr(\"class\", \"basic label-container\");\n  if (cssStyles && node.look !== \"handDrawn\") {\n    polygon.selectChildren(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    polygon.selectChildren(\"path\").attr(\"style\", nodeStyles);\n  }\n  polygon.attr(\"transform\", `translate(0, ${h2 / 4})`);\n  label.attr(\n    \"transform\",\n    `translate(${-w2 / 2 + (node.padding ?? 0) - (bbox.x - (bbox.left ?? 0))}, ${-h2 / 4 + (node.padding ?? 0) - (bbox.y - (bbox.top ?? 0))})`\n  );\n  updateNodeBounds(node, polygon);\n  node.intersect = function(point) {\n    const pos = intersect_default.polygon(node, points, point);\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(slopedRect, \"slopedRect\");\n\n// src/rendering-util/rendering-elements/shapes/squareRect.ts\nasync function squareRect2(parent, node) {\n  const options = {\n    rx: 0,\n    ry: 0,\n    classes: \"\",\n    labelPaddingX: (node?.padding || 0) * 2,\n    labelPaddingY: (node?.padding || 0) * 1\n  };\n  return drawRect(parent, node, options);\n}\n__name(squareRect2, \"squareRect\");\n\n// src/rendering-util/rendering-elements/shapes/stadium.ts\nasync function stadium(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));\n  const h2 = bbox.height + node.padding;\n  const w2 = bbox.width + h2 / 4 + node.padding;\n  let rect2;\n  const { cssStyles } = node;\n  if (node.look === \"handDrawn\") {\n    const rc = at.svg(shapeSvg);\n    const options = userNodeOverrides(node, {});\n    const pathData = createRoundedRectPathD(-w2 / 2, -h2 / 2, w2, h2, h2 / 2);\n    const roughNode = rc.path(pathData, options);\n    rect2 = shapeSvg.insert(() => roughNode, \":first-child\");\n    rect2.attr(\"class\", \"basic label-container\").attr(\"style\", handleUndefinedAttr(cssStyles));\n  } else {\n    rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n    rect2.attr(\"class\", \"basic label-container\").attr(\"style\", nodeStyles).attr(\"rx\", h2 / 2).attr(\"ry\", h2 / 2).attr(\"x\", -w2 / 2).attr(\"y\", -h2 / 2).attr(\"width\", w2).attr(\"height\", h2);\n  }\n  updateNodeBounds(node, rect2);\n  node.intersect = function(point) {\n    return intersect_default.rect(node, point);\n  };\n  return shapeSvg;\n}\n__name(stadium, \"stadium\");\n\n// src/rendering-util/rendering-elements/shapes/state.ts\nasync function state(parent, node) {\n  const options = {\n    rx: 5,\n    ry: 5,\n    classes: \"flowchart-node\"\n  };\n  return drawRect(parent, node, options);\n}\n__name(state, \"state\");\n\n// src/rendering-util/rendering-elements/shapes/stateEnd.ts\nfunction stateEnd(parent, node, { config: { themeVariables } }) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { cssStyles } = node;\n  const { lineColor, stateBorder, nodeBorder } = themeVariables;\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"node default\").attr(\"id\", node.domId || node.id);\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const roughNode = rc.circle(0, 0, 14, {\n    ...options,\n    stroke: lineColor,\n    strokeWidth: 2\n  });\n  const innerFill = stateBorder ?? nodeBorder;\n  const roughInnerNode = rc.circle(0, 0, 5, {\n    ...options,\n    fill: innerFill,\n    stroke: innerFill,\n    strokeWidth: 2,\n    fillStyle: \"solid\"\n  });\n  const circle2 = shapeSvg.insert(() => roughNode, \":first-child\");\n  circle2.insert(() => roughInnerNode);\n  if (cssStyles) {\n    circle2.selectAll(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles) {\n    circle2.selectAll(\"path\").attr(\"style\", nodeStyles);\n  }\n  updateNodeBounds(node, circle2);\n  node.intersect = function(point) {\n    return intersect_default.circle(node, 7, point);\n  };\n  return shapeSvg;\n}\n__name(stateEnd, \"stateEnd\");\n\n// src/rendering-util/rendering-elements/shapes/stateStart.ts\nfunction stateStart(parent, node, { config: { themeVariables } }) {\n  const { lineColor } = themeVariables;\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"node default\").attr(\"id\", node.domId || node.id);\n  let circle2;\n  if (node.look === \"handDrawn\") {\n    const rc = at.svg(shapeSvg);\n    const roughNode = rc.circle(0, 0, 14, solidStateFill(lineColor));\n    circle2 = shapeSvg.insert(() => roughNode);\n    circle2.attr(\"class\", \"state-start\").attr(\"r\", 7).attr(\"width\", 14).attr(\"height\", 14);\n  } else {\n    circle2 = shapeSvg.insert(\"circle\", \":first-child\");\n    circle2.attr(\"class\", \"state-start\").attr(\"r\", 7).attr(\"width\", 14).attr(\"height\", 14);\n  }\n  updateNodeBounds(node, circle2);\n  node.intersect = function(point) {\n    return intersect_default.circle(node, 7, point);\n  };\n  return shapeSvg;\n}\n__name(stateStart, \"stateStart\");\n\n// src/rendering-util/rendering-elements/shapes/subroutine.ts\nasync function subroutine(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));\n  const halfPadding = (node?.padding || 0) / 2;\n  const w2 = bbox.width + node.padding;\n  const h2 = bbox.height + node.padding;\n  const x2 = -bbox.width / 2 - halfPadding;\n  const y2 = -bbox.height / 2 - halfPadding;\n  const points = [\n    { x: 0, y: 0 },\n    { x: w2, y: 0 },\n    { x: w2, y: -h2 },\n    { x: 0, y: -h2 },\n    { x: 0, y: 0 },\n    { x: -8, y: 0 },\n    { x: w2 + 8, y: 0 },\n    { x: w2 + 8, y: -h2 },\n    { x: -8, y: -h2 },\n    { x: -8, y: 0 }\n  ];\n  if (node.look === \"handDrawn\") {\n    const rc = at.svg(shapeSvg);\n    const options = userNodeOverrides(node, {});\n    const roughNode = rc.rectangle(x2 - 8, y2, w2 + 16, h2, options);\n    const l1 = rc.line(x2, y2, x2, y2 + h2, options);\n    const l2 = rc.line(x2 + w2, y2, x2 + w2, y2 + h2, options);\n    shapeSvg.insert(() => l1, \":first-child\");\n    shapeSvg.insert(() => l2, \":first-child\");\n    const rect2 = shapeSvg.insert(() => roughNode, \":first-child\");\n    const { cssStyles } = node;\n    rect2.attr(\"class\", \"basic label-container\").attr(\"style\", handleUndefinedAttr(cssStyles));\n    updateNodeBounds(node, rect2);\n  } else {\n    const el = insertPolygonShape(shapeSvg, w2, h2, points);\n    if (nodeStyles) {\n      el.attr(\"style\", nodeStyles);\n    }\n    updateNodeBounds(node, el);\n  }\n  node.intersect = function(point) {\n    return intersect_default.polygon(node, points, point);\n  };\n  return shapeSvg;\n}\n__name(subroutine, \"subroutine\");\n\n// src/rendering-util/rendering-elements/shapes/taggedRect.ts\nasync function taggedRect(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));\n  const w2 = Math.max(bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);\n  const h2 = Math.max(bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);\n  const x2 = -w2 / 2;\n  const y2 = -h2 / 2;\n  const tagWidth = 0.2 * h2;\n  const tagHeight = 0.2 * h2;\n  const { cssStyles } = node;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  const rectPoints = [\n    { x: x2 - tagWidth / 2, y: y2 },\n    { x: x2 + w2 + tagWidth / 2, y: y2 },\n    { x: x2 + w2 + tagWidth / 2, y: y2 + h2 },\n    { x: x2 - tagWidth / 2, y: y2 + h2 }\n  ];\n  const tagPoints = [\n    { x: x2 + w2 - tagWidth / 2, y: y2 + h2 },\n    { x: x2 + w2 + tagWidth / 2, y: y2 + h2 },\n    { x: x2 + w2 + tagWidth / 2, y: y2 + h2 - tagHeight }\n  ];\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const rectPath = createPathFromPoints(rectPoints);\n  const rectNode = rc.path(rectPath, options);\n  const tagPath = createPathFromPoints(tagPoints);\n  const tagNode = rc.path(tagPath, { ...options, fillStyle: \"solid\" });\n  const taggedRect2 = shapeSvg.insert(() => tagNode, \":first-child\");\n  taggedRect2.insert(() => rectNode, \":first-child\");\n  taggedRect2.attr(\"class\", \"basic label-container\");\n  if (cssStyles && node.look !== \"handDrawn\") {\n    taggedRect2.selectAll(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    taggedRect2.selectAll(\"path\").attr(\"style\", nodeStyles);\n  }\n  updateNodeBounds(node, taggedRect2);\n  node.intersect = function(point) {\n    const pos = intersect_default.polygon(node, rectPoints, point);\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(taggedRect, \"taggedRect\");\n\n// src/rendering-util/rendering-elements/shapes/taggedWaveEdgedRectangle.ts\nasync function taggedWaveEdgedRectangle(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));\n  const w2 = Math.max(bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);\n  const h2 = Math.max(bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);\n  const waveAmplitude = h2 / 4;\n  const tagWidth = 0.2 * w2;\n  const tagHeight = 0.2 * h2;\n  const finalH = h2 + waveAmplitude;\n  const { cssStyles } = node;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const points = [\n    { x: -w2 / 2 - w2 / 2 * 0.1, y: finalH / 2 },\n    ...generateFullSineWavePoints(\n      -w2 / 2 - w2 / 2 * 0.1,\n      finalH / 2,\n      w2 / 2 + w2 / 2 * 0.1,\n      finalH / 2,\n      waveAmplitude,\n      0.8\n    ),\n    { x: w2 / 2 + w2 / 2 * 0.1, y: -finalH / 2 },\n    { x: -w2 / 2 - w2 / 2 * 0.1, y: -finalH / 2 }\n  ];\n  const x2 = -w2 / 2 + w2 / 2 * 0.1;\n  const y2 = -finalH / 2 - tagHeight * 0.4;\n  const tagPoints = [\n    { x: x2 + w2 - tagWidth, y: (y2 + h2) * 1.4 },\n    { x: x2 + w2, y: y2 + h2 - tagHeight },\n    { x: x2 + w2, y: (y2 + h2) * 0.9 },\n    ...generateFullSineWavePoints(\n      x2 + w2,\n      (y2 + h2) * 1.3,\n      x2 + w2 - tagWidth,\n      (y2 + h2) * 1.5,\n      -h2 * 0.03,\n      0.5\n    )\n  ];\n  const waveEdgeRectPath = createPathFromPoints(points);\n  const waveEdgeRectNode = rc.path(waveEdgeRectPath, options);\n  const taggedWaveEdgeRectPath = createPathFromPoints(tagPoints);\n  const taggedWaveEdgeRectNode = rc.path(taggedWaveEdgeRectPath, {\n    ...options,\n    fillStyle: \"solid\"\n  });\n  const waveEdgeRect = shapeSvg.insert(() => taggedWaveEdgeRectNode, \":first-child\");\n  waveEdgeRect.insert(() => waveEdgeRectNode, \":first-child\");\n  waveEdgeRect.attr(\"class\", \"basic label-container\");\n  if (cssStyles && node.look !== \"handDrawn\") {\n    waveEdgeRect.selectAll(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    waveEdgeRect.selectAll(\"path\").attr(\"style\", nodeStyles);\n  }\n  waveEdgeRect.attr(\"transform\", `translate(0,${-waveAmplitude / 2})`);\n  label.attr(\n    \"transform\",\n    `translate(${-w2 / 2 + (node.padding ?? 0) - (bbox.x - (bbox.left ?? 0))},${-h2 / 2 + (node.padding ?? 0) - waveAmplitude / 2 - (bbox.y - (bbox.top ?? 0))})`\n  );\n  updateNodeBounds(node, waveEdgeRect);\n  node.intersect = function(point) {\n    const pos = intersect_default.polygon(node, points, point);\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(taggedWaveEdgedRectangle, \"taggedWaveEdgedRectangle\");\n\n// src/rendering-util/rendering-elements/shapes/text.ts\nasync function text(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));\n  const totalWidth = Math.max(bbox.width + node.padding, node?.width || 0);\n  const totalHeight = Math.max(bbox.height + node.padding, node?.height || 0);\n  const x2 = -totalWidth / 2;\n  const y2 = -totalHeight / 2;\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  rect2.attr(\"class\", \"text\").attr(\"style\", nodeStyles).attr(\"rx\", 0).attr(\"ry\", 0).attr(\"x\", x2).attr(\"y\", y2).attr(\"width\", totalWidth).attr(\"height\", totalHeight);\n  updateNodeBounds(node, rect2);\n  node.intersect = function(point) {\n    return intersect_default.rect(node, point);\n  };\n  return shapeSvg;\n}\n__name(text, \"text\");\n\n// src/rendering-util/rendering-elements/shapes/tiltedCylinder.ts\nvar createCylinderPathD3 = /* @__PURE__ */ __name((x2, y2, width, height, rx, ry) => {\n  return `M${x2},${y2}\n    a${rx},${ry} 0,0,1 ${0},${-height}\n    l${width},${0}\n    a${rx},${ry} 0,0,1 ${0},${height}\n    M${width},${-height}\n    a${rx},${ry} 0,0,0 ${0},${height}\n    l${-width},${0}`;\n}, \"createCylinderPathD\");\nvar createOuterCylinderPathD3 = /* @__PURE__ */ __name((x2, y2, width, height, rx, ry) => {\n  return [\n    `M${x2},${y2}`,\n    `M${x2 + width},${y2}`,\n    `a${rx},${ry} 0,0,0 ${0},${-height}`,\n    `l${-width},0`,\n    `a${rx},${ry} 0,0,0 ${0},${height}`,\n    `l${width},0`\n  ].join(\" \");\n}, \"createOuterCylinderPathD\");\nvar createInnerCylinderPathD3 = /* @__PURE__ */ __name((x2, y2, width, height, rx, ry) => {\n  return [`M${x2 + width / 2},${-height / 2}`, `a${rx},${ry} 0,0,0 0,${height}`].join(\" \");\n}, \"createInnerCylinderPathD\");\nasync function tiltedCylinder(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox, label, halfPadding } = await labelHelper(\n    parent,\n    node,\n    getNodeClasses(node)\n  );\n  const labelPadding = node.look === \"neo\" ? halfPadding * 2 : halfPadding;\n  const h2 = bbox.height + labelPadding;\n  const ry = h2 / 2;\n  const rx = ry / (2.5 + h2 / 50);\n  const w2 = bbox.width + rx + labelPadding;\n  const { cssStyles } = node;\n  let cylinder2;\n  if (node.look === \"handDrawn\") {\n    const rc = at.svg(shapeSvg);\n    const outerPathData = createOuterCylinderPathD3(0, 0, w2, h2, rx, ry);\n    const innerPathData = createInnerCylinderPathD3(0, 0, w2, h2, rx, ry);\n    const outerNode = rc.path(outerPathData, userNodeOverrides(node, {}));\n    const innerLine = rc.path(innerPathData, userNodeOverrides(node, { fill: \"none\" }));\n    cylinder2 = shapeSvg.insert(() => innerLine, \":first-child\");\n    cylinder2 = shapeSvg.insert(() => outerNode, \":first-child\");\n    cylinder2.attr(\"class\", \"basic label-container\");\n    if (cssStyles) {\n      cylinder2.attr(\"style\", cssStyles);\n    }\n  } else {\n    const pathData = createCylinderPathD3(0, 0, w2, h2, rx, ry);\n    cylinder2 = shapeSvg.insert(\"path\", \":first-child\").attr(\"d\", pathData).attr(\"class\", \"basic label-container\").attr(\"style\", handleUndefinedAttr(cssStyles)).attr(\"style\", nodeStyles);\n    cylinder2.attr(\"class\", \"basic label-container\");\n    if (cssStyles) {\n      cylinder2.selectAll(\"path\").attr(\"style\", cssStyles);\n    }\n    if (nodeStyles) {\n      cylinder2.selectAll(\"path\").attr(\"style\", nodeStyles);\n    }\n  }\n  cylinder2.attr(\"label-offset-x\", rx);\n  cylinder2.attr(\"transform\", `translate(${-w2 / 2}, ${h2 / 2} )`);\n  label.attr(\n    \"transform\",\n    `translate(${-(bbox.width / 2) - rx - (bbox.x - (bbox.left ?? 0))}, ${-(bbox.height / 2) - (bbox.y - (bbox.top ?? 0))})`\n  );\n  updateNodeBounds(node, cylinder2);\n  node.intersect = function(point) {\n    const pos = intersect_default.rect(node, point);\n    const y2 = pos.y - (node.y ?? 0);\n    if (ry != 0 && (Math.abs(y2) < (node.height ?? 0) / 2 || Math.abs(y2) == (node.height ?? 0) / 2 && Math.abs(pos.x - (node.x ?? 0)) > (node.width ?? 0) / 2 - rx)) {\n      let x2 = rx * rx * (1 - y2 * y2 / (ry * ry));\n      if (x2 != 0) {\n        x2 = Math.sqrt(Math.abs(x2));\n      }\n      x2 = rx - x2;\n      if (point.x - (node.x ?? 0) > 0) {\n        x2 = -x2;\n      }\n      pos.x += x2;\n    }\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(tiltedCylinder, \"tiltedCylinder\");\n\n// src/rendering-util/rendering-elements/shapes/trapezoid.ts\nasync function trapezoid(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));\n  const w2 = bbox.width + node.padding;\n  const h2 = bbox.height + node.padding;\n  const points = [\n    { x: -3 * h2 / 6, y: 0 },\n    { x: w2 + 3 * h2 / 6, y: 0 },\n    { x: w2, y: -h2 },\n    { x: 0, y: -h2 }\n  ];\n  let polygon;\n  const { cssStyles } = node;\n  if (node.look === \"handDrawn\") {\n    const rc = at.svg(shapeSvg);\n    const options = userNodeOverrides(node, {});\n    const pathData = createPathFromPoints(points);\n    const roughNode = rc.path(pathData, options);\n    polygon = shapeSvg.insert(() => roughNode, \":first-child\").attr(\"transform\", `translate(${-w2 / 2}, ${h2 / 2})`);\n    if (cssStyles) {\n      polygon.attr(\"style\", cssStyles);\n    }\n  } else {\n    polygon = insertPolygonShape(shapeSvg, w2, h2, points);\n  }\n  if (nodeStyles) {\n    polygon.attr(\"style\", nodeStyles);\n  }\n  node.width = w2;\n  node.height = h2;\n  updateNodeBounds(node, polygon);\n  node.intersect = function(point) {\n    return intersect_default.polygon(node, points, point);\n  };\n  return shapeSvg;\n}\n__name(trapezoid, \"trapezoid\");\n\n// src/rendering-util/rendering-elements/shapes/trapezoidalPentagon.ts\nasync function trapezoidalPentagon(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));\n  const minWidth = 60, minHeight = 20;\n  const w2 = Math.max(minWidth, bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);\n  const h2 = Math.max(minHeight, bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);\n  const { cssStyles } = node;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const points = [\n    { x: -w2 / 2 * 0.8, y: -h2 / 2 },\n    { x: w2 / 2 * 0.8, y: -h2 / 2 },\n    { x: w2 / 2, y: -h2 / 2 * 0.6 },\n    { x: w2 / 2, y: h2 / 2 },\n    { x: -w2 / 2, y: h2 / 2 },\n    { x: -w2 / 2, y: -h2 / 2 * 0.6 }\n  ];\n  const pathData = createPathFromPoints(points);\n  const shapeNode = rc.path(pathData, options);\n  const polygon = shapeSvg.insert(() => shapeNode, \":first-child\");\n  polygon.attr(\"class\", \"basic label-container\");\n  if (cssStyles && node.look !== \"handDrawn\") {\n    polygon.selectChildren(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    polygon.selectChildren(\"path\").attr(\"style\", nodeStyles);\n  }\n  updateNodeBounds(node, polygon);\n  node.intersect = function(point) {\n    const pos = intersect_default.polygon(node, points, point);\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(trapezoidalPentagon, \"trapezoidalPentagon\");\n\n// src/rendering-util/rendering-elements/shapes/triangle.ts\nasync function triangle(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));\n  const useHtmlLabels = evaluate(getConfig2().flowchart?.htmlLabels);\n  const w2 = bbox.width + (node.padding ?? 0);\n  const h2 = w2 + bbox.height;\n  const tw = w2 + bbox.height;\n  const points = [\n    { x: 0, y: 0 },\n    { x: tw, y: 0 },\n    { x: tw / 2, y: -h2 }\n  ];\n  const { cssStyles } = node;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const pathData = createPathFromPoints(points);\n  const roughNode = rc.path(pathData, options);\n  const polygon = shapeSvg.insert(() => roughNode, \":first-child\").attr(\"transform\", `translate(${-h2 / 2}, ${h2 / 2})`);\n  if (cssStyles && node.look !== \"handDrawn\") {\n    polygon.selectChildren(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    polygon.selectChildren(\"path\").attr(\"style\", nodeStyles);\n  }\n  node.width = w2;\n  node.height = h2;\n  updateNodeBounds(node, polygon);\n  label.attr(\n    \"transform\",\n    `translate(${-bbox.width / 2 - (bbox.x - (bbox.left ?? 0))}, ${h2 / 2 - (bbox.height + (node.padding ?? 0) / (useHtmlLabels ? 2 : 1) - (bbox.y - (bbox.top ?? 0)))})`\n  );\n  node.intersect = function(point) {\n    log.info(\"Triangle intersect\", node, points, point);\n    return intersect_default.polygon(node, points, point);\n  };\n  return shapeSvg;\n}\n__name(triangle, \"triangle\");\n\n// src/rendering-util/rendering-elements/shapes/waveEdgedRectangle.ts\nasync function waveEdgedRectangle(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));\n  const w2 = Math.max(bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);\n  const h2 = Math.max(bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);\n  const waveAmplitude = h2 / 8;\n  const finalH = h2 + waveAmplitude;\n  const { cssStyles } = node;\n  const minWidth = 70;\n  const widthDif = minWidth - w2;\n  const extraW = widthDif > 0 ? widthDif / 2 : 0;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const points = [\n    { x: -w2 / 2 - extraW, y: finalH / 2 },\n    ...generateFullSineWavePoints(\n      -w2 / 2 - extraW,\n      finalH / 2,\n      w2 / 2 + extraW,\n      finalH / 2,\n      waveAmplitude,\n      0.8\n    ),\n    { x: w2 / 2 + extraW, y: -finalH / 2 },\n    { x: -w2 / 2 - extraW, y: -finalH / 2 }\n  ];\n  const waveEdgeRectPath = createPathFromPoints(points);\n  const waveEdgeRectNode = rc.path(waveEdgeRectPath, options);\n  const waveEdgeRect = shapeSvg.insert(() => waveEdgeRectNode, \":first-child\");\n  waveEdgeRect.attr(\"class\", \"basic label-container\");\n  if (cssStyles && node.look !== \"handDrawn\") {\n    waveEdgeRect.selectAll(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    waveEdgeRect.selectAll(\"path\").attr(\"style\", nodeStyles);\n  }\n  waveEdgeRect.attr(\"transform\", `translate(0,${-waveAmplitude / 2})`);\n  label.attr(\n    \"transform\",\n    `translate(${-w2 / 2 + (node.padding ?? 0) - (bbox.x - (bbox.left ?? 0))},${-h2 / 2 + (node.padding ?? 0) - waveAmplitude - (bbox.y - (bbox.top ?? 0))})`\n  );\n  updateNodeBounds(node, waveEdgeRect);\n  node.intersect = function(point) {\n    const pos = intersect_default.polygon(node, points, point);\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(waveEdgedRectangle, \"waveEdgedRectangle\");\n\n// src/rendering-util/rendering-elements/shapes/waveRectangle.ts\nasync function waveRectangle(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));\n  const minWidth = 100;\n  const minHeight = 50;\n  const baseWidth = Math.max(bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);\n  const baseHeight = Math.max(bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);\n  const aspectRatio = baseWidth / baseHeight;\n  let w2 = baseWidth;\n  let h2 = baseHeight;\n  if (w2 > h2 * aspectRatio) {\n    h2 = w2 / aspectRatio;\n  } else {\n    w2 = h2 * aspectRatio;\n  }\n  w2 = Math.max(w2, minWidth);\n  h2 = Math.max(h2, minHeight);\n  const waveAmplitude = Math.min(h2 * 0.2, h2 / 4);\n  const finalH = h2 + waveAmplitude * 2;\n  const { cssStyles } = node;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const points = [\n    { x: -w2 / 2, y: finalH / 2 },\n    ...generateFullSineWavePoints(-w2 / 2, finalH / 2, w2 / 2, finalH / 2, waveAmplitude, 1),\n    { x: w2 / 2, y: -finalH / 2 },\n    ...generateFullSineWavePoints(w2 / 2, -finalH / 2, -w2 / 2, -finalH / 2, waveAmplitude, -1)\n  ];\n  const waveRectPath = createPathFromPoints(points);\n  const waveRectNode = rc.path(waveRectPath, options);\n  const waveRect = shapeSvg.insert(() => waveRectNode, \":first-child\");\n  waveRect.attr(\"class\", \"basic label-container\");\n  if (cssStyles && node.look !== \"handDrawn\") {\n    waveRect.selectAll(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    waveRect.selectAll(\"path\").attr(\"style\", nodeStyles);\n  }\n  updateNodeBounds(node, waveRect);\n  node.intersect = function(point) {\n    const pos = intersect_default.polygon(node, points, point);\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(waveRectangle, \"waveRectangle\");\n\n// src/rendering-util/rendering-elements/shapes/windowPane.ts\nasync function windowPane(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));\n  const w2 = Math.max(bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);\n  const h2 = Math.max(bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);\n  const rectOffset = 5;\n  const x2 = -w2 / 2;\n  const y2 = -h2 / 2;\n  const { cssStyles } = node;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  const outerPathPoints = [\n    { x: x2 - rectOffset, y: y2 - rectOffset },\n    { x: x2 - rectOffset, y: y2 + h2 },\n    { x: x2 + w2, y: y2 + h2 },\n    { x: x2 + w2, y: y2 - rectOffset }\n  ];\n  const path = `M${x2 - rectOffset},${y2 - rectOffset} L${x2 + w2},${y2 - rectOffset} L${x2 + w2},${y2 + h2} L${x2 - rectOffset},${y2 + h2} L${x2 - rectOffset},${y2 - rectOffset}\n                M${x2 - rectOffset},${y2} L${x2 + w2},${y2}\n                M${x2},${y2 - rectOffset} L${x2},${y2 + h2}`;\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const no = rc.path(path, options);\n  const windowPane2 = shapeSvg.insert(() => no, \":first-child\");\n  windowPane2.attr(\"transform\", `translate(${rectOffset / 2}, ${rectOffset / 2})`);\n  windowPane2.attr(\"class\", \"basic label-container\");\n  if (cssStyles && node.look !== \"handDrawn\") {\n    windowPane2.selectAll(\"path\").attr(\"style\", cssStyles);\n  }\n  if (nodeStyles && node.look !== \"handDrawn\") {\n    windowPane2.selectAll(\"path\").attr(\"style\", nodeStyles);\n  }\n  label.attr(\n    \"transform\",\n    `translate(${-(bbox.width / 2) + rectOffset / 2 - (bbox.x - (bbox.left ?? 0))}, ${-(bbox.height / 2) + rectOffset / 2 - (bbox.y - (bbox.top ?? 0))})`\n  );\n  updateNodeBounds(node, windowPane2);\n  node.intersect = function(point) {\n    const pos = intersect_default.polygon(node, outerPathPoints, point);\n    return pos;\n  };\n  return shapeSvg;\n}\n__name(windowPane, \"windowPane\");\n\n// src/rendering-util/rendering-elements/shapes/erBox.ts\nasync function erBox(parent, node) {\n  const entityNode = node;\n  if (entityNode.alias) {\n    node.label = entityNode.alias;\n  }\n  if (node.look === \"handDrawn\") {\n    const { themeVariables: themeVariables2 } = getConfig();\n    const { background } = themeVariables2;\n    const backgroundNode = {\n      ...node,\n      id: node.id + \"-background\",\n      look: \"default\",\n      cssStyles: [\"stroke: none\", `fill: ${background}`]\n    };\n    await erBox(parent, backgroundNode);\n  }\n  const config = getConfig();\n  node.useHtmlLabels = config.htmlLabels;\n  let PADDING = config.er?.diagramPadding ?? 10;\n  let TEXT_PADDING = config.er?.entityPadding ?? 6;\n  const { cssStyles } = node;\n  const { labelStyles } = styles2String(node);\n  if (entityNode.attributes.length === 0 && node.label) {\n    const options2 = {\n      rx: 0,\n      ry: 0,\n      labelPaddingX: PADDING,\n      labelPaddingY: PADDING * 1.5,\n      classes: \"\"\n    };\n    if (calculateTextWidth(node.label, config) + options2.labelPaddingX * 2 < config.er.minEntityWidth) {\n      node.width = config.er.minEntityWidth;\n    }\n    const shapeSvg2 = await drawRect(parent, node, options2);\n    if (!evaluate(config.htmlLabels)) {\n      const textElement = shapeSvg2.select(\"text\");\n      const bbox = textElement.node()?.getBBox();\n      textElement.attr(\"transform\", `translate(${-bbox.width / 2}, 0)`);\n    }\n    return shapeSvg2;\n  }\n  if (!config.htmlLabels) {\n    PADDING *= 1.25;\n    TEXT_PADDING *= 1.25;\n  }\n  let cssClasses = getNodeClasses(node);\n  if (!cssClasses) {\n    cssClasses = \"node default\";\n  }\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", cssClasses).attr(\"id\", node.domId || node.id);\n  const nameBBox = await addText(shapeSvg, node.label ?? \"\", config, 0, 0, [\"name\"], labelStyles);\n  nameBBox.height += TEXT_PADDING;\n  let yOffset = 0;\n  const yOffsets = [];\n  let maxTypeWidth = 0;\n  let maxNameWidth = 0;\n  let maxKeysWidth = 0;\n  let maxCommentWidth = 0;\n  let keysPresent = true;\n  let commentPresent = true;\n  for (const attribute of entityNode.attributes) {\n    const typeBBox = await addText(\n      shapeSvg,\n      attribute.type,\n      config,\n      0,\n      yOffset,\n      [\"attribute-type\"],\n      labelStyles\n    );\n    maxTypeWidth = Math.max(maxTypeWidth, typeBBox.width + PADDING);\n    const nameBBox2 = await addText(\n      shapeSvg,\n      attribute.name,\n      config,\n      0,\n      yOffset,\n      [\"attribute-name\"],\n      labelStyles\n    );\n    maxNameWidth = Math.max(maxNameWidth, nameBBox2.width + PADDING);\n    const keysBBox = await addText(\n      shapeSvg,\n      attribute.keys.join(),\n      config,\n      0,\n      yOffset,\n      [\"attribute-keys\"],\n      labelStyles\n    );\n    maxKeysWidth = Math.max(maxKeysWidth, keysBBox.width + PADDING);\n    const commentBBox = await addText(\n      shapeSvg,\n      attribute.comment,\n      config,\n      0,\n      yOffset,\n      [\"attribute-comment\"],\n      labelStyles\n    );\n    maxCommentWidth = Math.max(maxCommentWidth, commentBBox.width + PADDING);\n    yOffset += Math.max(typeBBox.height, nameBBox2.height, keysBBox.height, commentBBox.height) + TEXT_PADDING;\n    yOffsets.push(yOffset);\n  }\n  yOffsets.pop();\n  let totalWidthSections = 4;\n  if (maxKeysWidth <= PADDING) {\n    keysPresent = false;\n    maxKeysWidth = 0;\n    totalWidthSections--;\n  }\n  if (maxCommentWidth <= PADDING) {\n    commentPresent = false;\n    maxCommentWidth = 0;\n    totalWidthSections--;\n  }\n  const shapeBBox = shapeSvg.node().getBBox();\n  if (nameBBox.width + PADDING * 2 - (maxTypeWidth + maxNameWidth + maxKeysWidth + maxCommentWidth) > 0) {\n    const difference = nameBBox.width + PADDING * 2 - (maxTypeWidth + maxNameWidth + maxKeysWidth + maxCommentWidth);\n    maxTypeWidth += difference / totalWidthSections;\n    maxNameWidth += difference / totalWidthSections;\n    if (maxKeysWidth > 0) {\n      maxKeysWidth += difference / totalWidthSections;\n    }\n    if (maxCommentWidth > 0) {\n      maxCommentWidth += difference / totalWidthSections;\n    }\n  }\n  const maxWidth = maxTypeWidth + maxNameWidth + maxKeysWidth + maxCommentWidth;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const w2 = Math.max(shapeBBox.width + PADDING * 2, node?.width || 0, maxWidth);\n  const h2 = Math.max(shapeBBox.height + (yOffsets[0] || yOffset) + TEXT_PADDING, node?.height || 0);\n  const x2 = -w2 / 2;\n  const y2 = -h2 / 2;\n  shapeSvg.selectAll(\"g:not(:first-child)\").each((_2, i2, nodes) => {\n    const text2 = select_default(nodes[i2]);\n    const transform = text2.attr(\"transform\");\n    let translateX = 0;\n    let translateY = 0;\n    if (transform) {\n      const regex = RegExp(/translate\\(([^,]+),([^)]+)\\)/);\n      const translate = regex.exec(transform);\n      if (translate) {\n        translateX = parseFloat(translate[1]);\n        translateY = parseFloat(translate[2]);\n        if (text2.attr(\"class\").includes(\"attribute-name\")) {\n          translateX += maxTypeWidth;\n        } else if (text2.attr(\"class\").includes(\"attribute-keys\")) {\n          translateX += maxTypeWidth + maxNameWidth;\n        } else if (text2.attr(\"class\").includes(\"attribute-comment\")) {\n          translateX += maxTypeWidth + maxNameWidth + maxKeysWidth;\n        }\n      }\n    }\n    text2.attr(\n      \"transform\",\n      `translate(${x2 + PADDING / 2 + translateX}, ${translateY + y2 + nameBBox.height + TEXT_PADDING / 2})`\n    );\n  });\n  shapeSvg.select(\".name\").attr(\"transform\", \"translate(\" + -nameBBox.width / 2 + \", \" + (y2 + TEXT_PADDING / 2) + \")\");\n  const roughRect = rc.rectangle(x2, y2, w2, h2, options);\n  const rect2 = shapeSvg.insert(() => roughRect, \":first-child\").attr(\"style\", cssStyles.join(\"\"));\n  const { themeVariables } = getConfig();\n  const { rowEven, rowOdd, nodeBorder } = themeVariables;\n  yOffsets.push(0);\n  for (const [i2, yOffset2] of yOffsets.entries()) {\n    if (i2 === 0 && yOffsets.length > 1) {\n      continue;\n    }\n    const isEven = i2 % 2 === 0 && yOffset2 !== 0;\n    const roughRect2 = rc.rectangle(x2, nameBBox.height + y2 + yOffset2, w2, nameBBox.height, {\n      ...options,\n      fill: isEven ? rowEven : rowOdd,\n      stroke: nodeBorder\n    });\n    shapeSvg.insert(() => roughRect2, \"g.label\").attr(\"style\", cssStyles.join(\"\")).attr(\"class\", `row-rect-${i2 % 2 === 0 ? \"even\" : \"odd\"}`);\n  }\n  let roughLine = rc.line(x2, nameBBox.height + y2, w2 + x2, nameBBox.height + y2, options);\n  shapeSvg.insert(() => roughLine).attr(\"class\", \"divider\");\n  roughLine = rc.line(maxTypeWidth + x2, nameBBox.height + y2, maxTypeWidth + x2, h2 + y2, options);\n  shapeSvg.insert(() => roughLine).attr(\"class\", \"divider\");\n  if (keysPresent) {\n    roughLine = rc.line(\n      maxTypeWidth + maxNameWidth + x2,\n      nameBBox.height + y2,\n      maxTypeWidth + maxNameWidth + x2,\n      h2 + y2,\n      options\n    );\n    shapeSvg.insert(() => roughLine).attr(\"class\", \"divider\");\n  }\n  if (commentPresent) {\n    roughLine = rc.line(\n      maxTypeWidth + maxNameWidth + maxKeysWidth + x2,\n      nameBBox.height + y2,\n      maxTypeWidth + maxNameWidth + maxKeysWidth + x2,\n      h2 + y2,\n      options\n    );\n    shapeSvg.insert(() => roughLine).attr(\"class\", \"divider\");\n  }\n  for (const yOffset2 of yOffsets) {\n    roughLine = rc.line(\n      x2,\n      nameBBox.height + y2 + yOffset2,\n      w2 + x2,\n      nameBBox.height + y2 + yOffset2,\n      options\n    );\n    shapeSvg.insert(() => roughLine).attr(\"class\", \"divider\");\n  }\n  updateNodeBounds(node, rect2);\n  node.intersect = function(point) {\n    return intersect_default.rect(node, point);\n  };\n  return shapeSvg;\n}\n__name(erBox, \"erBox\");\nasync function addText(shapeSvg, labelText, config, translateX = 0, translateY = 0, classes = [], style = \"\") {\n  const label = shapeSvg.insert(\"g\").attr(\"class\", `label ${classes.join(\" \")}`).attr(\"transform\", `translate(${translateX}, ${translateY})`).attr(\"style\", style);\n  if (labelText !== parseGenericTypes(labelText)) {\n    labelText = parseGenericTypes(labelText);\n    labelText = labelText.replaceAll(\"<\", \"&lt;\").replaceAll(\">\", \"&gt;\");\n  }\n  const text2 = label.node().appendChild(\n    await createText(\n      label,\n      labelText,\n      {\n        width: calculateTextWidth(labelText, config) + 100,\n        style,\n        useHtmlLabels: config.htmlLabels\n      },\n      config\n    )\n  );\n  if (labelText.includes(\"&lt;\") || labelText.includes(\"&gt;\")) {\n    let child = text2.children[0];\n    child.textContent = child.textContent.replaceAll(\"&lt;\", \"<\").replaceAll(\"&gt;\", \">\");\n    while (child.childNodes[0]) {\n      child = child.childNodes[0];\n      child.textContent = child.textContent.replaceAll(\"&lt;\", \"<\").replaceAll(\"&gt;\", \">\");\n    }\n  }\n  let bbox = text2.getBBox();\n  if (evaluate(config.htmlLabels)) {\n    const div = text2.children[0];\n    div.style.textAlign = \"start\";\n    const dv = select_default(text2);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  return bbox;\n}\n__name(addText, \"addText\");\n\n// src/diagrams/class/shapeUtil.ts\nasync function textHelper(parent, node, config, useHtmlLabels, GAP = config.class.padding ?? 12) {\n  const TEXT_PADDING = !useHtmlLabels ? 3 : 0;\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", getNodeClasses(node)).attr(\"id\", node.domId || node.id);\n  let annotationGroup = null;\n  let labelGroup = null;\n  let membersGroup = null;\n  let methodsGroup = null;\n  let annotationGroupHeight = 0;\n  let labelGroupHeight = 0;\n  let membersGroupHeight = 0;\n  annotationGroup = shapeSvg.insert(\"g\").attr(\"class\", \"annotation-group text\");\n  if (node.annotations.length > 0) {\n    const annotation = node.annotations[0];\n    await addText2(annotationGroup, { text: `\\xAB${annotation}\\xBB` }, 0);\n    const annotationGroupBBox = annotationGroup.node().getBBox();\n    annotationGroupHeight = annotationGroupBBox.height;\n  }\n  labelGroup = shapeSvg.insert(\"g\").attr(\"class\", \"label-group text\");\n  await addText2(labelGroup, node, 0, [\"font-weight: bolder\"]);\n  const labelGroupBBox = labelGroup.node().getBBox();\n  labelGroupHeight = labelGroupBBox.height;\n  membersGroup = shapeSvg.insert(\"g\").attr(\"class\", \"members-group text\");\n  let yOffset = 0;\n  for (const member of node.members) {\n    const height = await addText2(membersGroup, member, yOffset, [member.parseClassifier()]);\n    yOffset += height + TEXT_PADDING;\n  }\n  membersGroupHeight = membersGroup.node().getBBox().height;\n  if (membersGroupHeight <= 0) {\n    membersGroupHeight = GAP / 2;\n  }\n  methodsGroup = shapeSvg.insert(\"g\").attr(\"class\", \"methods-group text\");\n  let methodsYOffset = 0;\n  for (const method of node.methods) {\n    const height = await addText2(methodsGroup, method, methodsYOffset, [method.parseClassifier()]);\n    methodsYOffset += height + TEXT_PADDING;\n  }\n  let bbox = shapeSvg.node().getBBox();\n  if (annotationGroup !== null) {\n    const annotationGroupBBox = annotationGroup.node().getBBox();\n    annotationGroup.attr(\"transform\", `translate(${-annotationGroupBBox.width / 2})`);\n  }\n  labelGroup.attr(\"transform\", `translate(${-labelGroupBBox.width / 2}, ${annotationGroupHeight})`);\n  bbox = shapeSvg.node().getBBox();\n  membersGroup.attr(\n    \"transform\",\n    `translate(${0}, ${annotationGroupHeight + labelGroupHeight + GAP * 2})`\n  );\n  bbox = shapeSvg.node().getBBox();\n  methodsGroup.attr(\n    \"transform\",\n    `translate(${0}, ${annotationGroupHeight + labelGroupHeight + (membersGroupHeight ? membersGroupHeight + GAP * 4 : GAP * 2)})`\n  );\n  bbox = shapeSvg.node().getBBox();\n  return { shapeSvg, bbox };\n}\n__name(textHelper, \"textHelper\");\nasync function addText2(parentGroup, node, yOffset, styles = []) {\n  const textEl = parentGroup.insert(\"g\").attr(\"class\", \"label\").attr(\"style\", styles.join(\"; \"));\n  const config = getConfig();\n  let useHtmlLabels = \"useHtmlLabels\" in node ? node.useHtmlLabels : evaluate(config.htmlLabels) ?? true;\n  let textContent = \"\";\n  if (\"text\" in node) {\n    textContent = node.text;\n  } else {\n    textContent = node.label;\n  }\n  if (!useHtmlLabels && textContent.startsWith(\"\\\\\")) {\n    textContent = textContent.substring(1);\n  }\n  if (hasKatex(textContent)) {\n    useHtmlLabels = true;\n  }\n  const text2 = await createText(\n    textEl,\n    sanitizeText2(decodeEntities(textContent)),\n    {\n      width: calculateTextWidth(textContent, config) + 50,\n      // Add room for error when splitting text into multiple lines\n      classes: \"markdown-node-label\",\n      useHtmlLabels\n    },\n    config\n  );\n  let bbox;\n  let numberOfLines = 1;\n  if (!useHtmlLabels) {\n    if (styles.includes(\"font-weight: bolder\")) {\n      select_default(text2).selectAll(\"tspan\").attr(\"font-weight\", \"\");\n    }\n    numberOfLines = text2.children.length;\n    const textChild = text2.children[0];\n    if (text2.textContent === \"\" || text2.textContent.includes(\"&gt\")) {\n      textChild.textContent = textContent[0] + textContent.substring(1).replaceAll(\"&gt;\", \">\").replaceAll(\"&lt;\", \"<\").trim();\n      const preserveSpace = textContent[1] === \" \";\n      if (preserveSpace) {\n        textChild.textContent = textChild.textContent[0] + \" \" + textChild.textContent.substring(1);\n      }\n    }\n    if (textChild.textContent === \"undefined\") {\n      textChild.textContent = \"\";\n    }\n    bbox = text2.getBBox();\n  } else {\n    const div = text2.children[0];\n    const dv = select_default(text2);\n    numberOfLines = div.innerHTML.split(\"<br>\").length;\n    if (div.innerHTML.includes(\"</math>\")) {\n      numberOfLines += div.innerHTML.split(\"<mrow>\").length - 1;\n    }\n    const images = div.getElementsByTagName(\"img\");\n    if (images) {\n      const noImgText = textContent.replace(/<img[^>]*>/g, \"\").trim() === \"\";\n      await Promise.all(\n        [...images].map(\n          (img) => new Promise((res) => {\n            function setupImage() {\n              img.style.display = \"flex\";\n              img.style.flexDirection = \"column\";\n              if (noImgText) {\n                const bodyFontSize = config.fontSize?.toString() ?? window.getComputedStyle(document.body).fontSize;\n                const enlargingFactor = 5;\n                const width = parseInt(bodyFontSize, 10) * enlargingFactor + \"px\";\n                img.style.minWidth = width;\n                img.style.maxWidth = width;\n              } else {\n                img.style.width = \"100%\";\n              }\n              res(img);\n            }\n            __name(setupImage, \"setupImage\");\n            setTimeout(() => {\n              if (img.complete) {\n                setupImage();\n              }\n            });\n            img.addEventListener(\"error\", setupImage);\n            img.addEventListener(\"load\", setupImage);\n          })\n        )\n      );\n    }\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  textEl.attr(\"transform\", \"translate(0,\" + (-bbox.height / (2 * numberOfLines) + yOffset) + \")\");\n  return bbox.height;\n}\n__name(addText2, \"addText\");\n\n// src/rendering-util/rendering-elements/shapes/classBox.ts\nasync function classBox(parent, node) {\n  const config = getConfig2();\n  const PADDING = config.class.padding ?? 12;\n  const GAP = PADDING;\n  const useHtmlLabels = node.useHtmlLabels ?? evaluate(config.htmlLabels) ?? true;\n  const classNode = node;\n  classNode.annotations = classNode.annotations ?? [];\n  classNode.members = classNode.members ?? [];\n  classNode.methods = classNode.methods ?? [];\n  const { shapeSvg, bbox } = await textHelper(parent, node, config, useHtmlLabels, GAP);\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  node.cssStyles = classNode.styles || \"\";\n  const styles = classNode.styles?.join(\";\") || nodeStyles || \"\";\n  if (!node.cssStyles) {\n    node.cssStyles = styles.replaceAll(\"!important\", \"\").split(\";\");\n  }\n  const renderExtraBox = classNode.members.length === 0 && classNode.methods.length === 0 && !config.class?.hideEmptyMembersBox;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const w2 = bbox.width;\n  let h2 = bbox.height;\n  if (classNode.members.length === 0 && classNode.methods.length === 0) {\n    h2 += GAP;\n  } else if (classNode.members.length > 0 && classNode.methods.length === 0) {\n    h2 += GAP * 2;\n  }\n  const x2 = -w2 / 2;\n  const y2 = -h2 / 2;\n  const roughRect = rc.rectangle(\n    x2 - PADDING,\n    y2 - PADDING - (renderExtraBox ? PADDING : classNode.members.length === 0 && classNode.methods.length === 0 ? -PADDING / 2 : 0),\n    w2 + 2 * PADDING,\n    h2 + 2 * PADDING + (renderExtraBox ? PADDING * 2 : classNode.members.length === 0 && classNode.methods.length === 0 ? -PADDING : 0),\n    options\n  );\n  const rect2 = shapeSvg.insert(() => roughRect, \":first-child\");\n  rect2.attr(\"class\", \"basic label-container\");\n  const rectBBox = rect2.node().getBBox();\n  shapeSvg.selectAll(\".text\").each((_2, i2, nodes) => {\n    const text2 = select_default(nodes[i2]);\n    const transform = text2.attr(\"transform\");\n    let translateY = 0;\n    if (transform) {\n      const regex = RegExp(/translate\\(([^,]+),([^)]+)\\)/);\n      const translate = regex.exec(transform);\n      if (translate) {\n        translateY = parseFloat(translate[2]);\n      }\n    }\n    let newTranslateY = translateY + y2 + PADDING - (renderExtraBox ? PADDING : classNode.members.length === 0 && classNode.methods.length === 0 ? -PADDING / 2 : 0);\n    if (!useHtmlLabels) {\n      newTranslateY -= 4;\n    }\n    let newTranslateX = x2;\n    if (text2.attr(\"class\").includes(\"label-group\") || text2.attr(\"class\").includes(\"annotation-group\")) {\n      newTranslateX = -text2.node()?.getBBox().width / 2 || 0;\n      shapeSvg.selectAll(\"text\").each(function(_3, i3, nodes2) {\n        if (window.getComputedStyle(nodes2[i3]).textAnchor === \"middle\") {\n          newTranslateX = 0;\n        }\n      });\n    }\n    text2.attr(\"transform\", `translate(${newTranslateX}, ${newTranslateY})`);\n  });\n  const annotationGroupHeight = shapeSvg.select(\".annotation-group\").node().getBBox().height - (renderExtraBox ? PADDING / 2 : 0) || 0;\n  const labelGroupHeight = shapeSvg.select(\".label-group\").node().getBBox().height - (renderExtraBox ? PADDING / 2 : 0) || 0;\n  const membersGroupHeight = shapeSvg.select(\".members-group\").node().getBBox().height - (renderExtraBox ? PADDING / 2 : 0) || 0;\n  if (classNode.members.length > 0 || classNode.methods.length > 0 || renderExtraBox) {\n    const roughLine = rc.line(\n      rectBBox.x,\n      annotationGroupHeight + labelGroupHeight + y2 + PADDING,\n      rectBBox.x + rectBBox.width,\n      annotationGroupHeight + labelGroupHeight + y2 + PADDING,\n      options\n    );\n    const line = shapeSvg.insert(() => roughLine);\n    line.attr(\"class\", \"divider\").attr(\"style\", styles);\n  }\n  if (renderExtraBox || classNode.members.length > 0 || classNode.methods.length > 0) {\n    const roughLine = rc.line(\n      rectBBox.x,\n      annotationGroupHeight + labelGroupHeight + membersGroupHeight + y2 + GAP * 2 + PADDING,\n      rectBBox.x + rectBBox.width,\n      annotationGroupHeight + labelGroupHeight + membersGroupHeight + y2 + PADDING + GAP * 2,\n      options\n    );\n    const line = shapeSvg.insert(() => roughLine);\n    line.attr(\"class\", \"divider\").attr(\"style\", styles);\n  }\n  if (classNode.look !== \"handDrawn\") {\n    shapeSvg.selectAll(\"path\").attr(\"style\", styles);\n  }\n  rect2.select(\":nth-child(2)\").attr(\"style\", styles);\n  shapeSvg.selectAll(\".divider\").select(\"path\").attr(\"style\", styles);\n  if (node.labelStyle) {\n    shapeSvg.selectAll(\"span\").attr(\"style\", node.labelStyle);\n  } else {\n    shapeSvg.selectAll(\"span\").attr(\"style\", styles);\n  }\n  if (!useHtmlLabels) {\n    const colorRegex = RegExp(/color\\s*:\\s*([^;]*)/);\n    const match = colorRegex.exec(styles);\n    if (match) {\n      const colorStyle = match[0].replace(\"color\", \"fill\");\n      shapeSvg.selectAll(\"tspan\").attr(\"style\", colorStyle);\n    } else if (labelStyles) {\n      const match2 = colorRegex.exec(labelStyles);\n      if (match2) {\n        const colorStyle = match2[0].replace(\"color\", \"fill\");\n        shapeSvg.selectAll(\"tspan\").attr(\"style\", colorStyle);\n      }\n    }\n  }\n  updateNodeBounds(node, rect2);\n  node.intersect = function(point) {\n    return intersect_default.rect(node, point);\n  };\n  return shapeSvg;\n}\n__name(classBox, \"classBox\");\n\n// src/rendering-util/rendering-elements/shapes/requirementBox.ts\nasync function requirementBox(parent, node) {\n  const { labelStyles, nodeStyles } = styles2String(node);\n  node.labelStyle = labelStyles;\n  const requirementNode = node;\n  const elementNode = node;\n  const padding = 20;\n  const gap = 20;\n  const isRequirementNode = \"verifyMethod\" in node;\n  const classes = getNodeClasses(node);\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", classes).attr(\"id\", node.domId ?? node.id);\n  let typeHeight;\n  if (isRequirementNode) {\n    typeHeight = await addText3(\n      shapeSvg,\n      `&lt;&lt;${requirementNode.type}&gt;&gt;`,\n      0,\n      node.labelStyle\n    );\n  } else {\n    typeHeight = await addText3(shapeSvg, \"&lt;&lt;Element&gt;&gt;\", 0, node.labelStyle);\n  }\n  let accumulativeHeight = typeHeight;\n  const nameHeight = await addText3(\n    shapeSvg,\n    requirementNode.name,\n    accumulativeHeight,\n    node.labelStyle + \"; font-weight: bold;\"\n  );\n  accumulativeHeight += nameHeight + gap;\n  if (isRequirementNode) {\n    const idHeight = await addText3(\n      shapeSvg,\n      `${requirementNode.requirementId ? `Id: ${requirementNode.requirementId}` : \"\"}`,\n      accumulativeHeight,\n      node.labelStyle\n    );\n    accumulativeHeight += idHeight;\n    const textHeight = await addText3(\n      shapeSvg,\n      `${requirementNode.text ? `Text: ${requirementNode.text}` : \"\"}`,\n      accumulativeHeight,\n      node.labelStyle\n    );\n    accumulativeHeight += textHeight;\n    const riskHeight = await addText3(\n      shapeSvg,\n      `${requirementNode.risk ? `Risk: ${requirementNode.risk}` : \"\"}`,\n      accumulativeHeight,\n      node.labelStyle\n    );\n    accumulativeHeight += riskHeight;\n    await addText3(\n      shapeSvg,\n      `${requirementNode.verifyMethod ? `Verification: ${requirementNode.verifyMethod}` : \"\"}`,\n      accumulativeHeight,\n      node.labelStyle\n    );\n  } else {\n    const typeHeight2 = await addText3(\n      shapeSvg,\n      `${elementNode.type ? `Type: ${elementNode.type}` : \"\"}`,\n      accumulativeHeight,\n      node.labelStyle\n    );\n    accumulativeHeight += typeHeight2;\n    await addText3(\n      shapeSvg,\n      `${elementNode.docRef ? `Doc Ref: ${elementNode.docRef}` : \"\"}`,\n      accumulativeHeight,\n      node.labelStyle\n    );\n  }\n  const totalWidth = (shapeSvg.node()?.getBBox().width ?? 200) + padding;\n  const totalHeight = (shapeSvg.node()?.getBBox().height ?? 200) + padding;\n  const x2 = -totalWidth / 2;\n  const y2 = -totalHeight / 2;\n  const rc = at.svg(shapeSvg);\n  const options = userNodeOverrides(node, {});\n  if (node.look !== \"handDrawn\") {\n    options.roughness = 0;\n    options.fillStyle = \"solid\";\n  }\n  const roughRect = rc.rectangle(x2, y2, totalWidth, totalHeight, options);\n  const rect2 = shapeSvg.insert(() => roughRect, \":first-child\");\n  rect2.attr(\"class\", \"basic label-container\").attr(\"style\", nodeStyles);\n  shapeSvg.selectAll(\".label\").each((_2, i2, nodes) => {\n    const text2 = select_default(nodes[i2]);\n    const transform = text2.attr(\"transform\");\n    let translateX = 0;\n    let translateY = 0;\n    if (transform) {\n      const regex = RegExp(/translate\\(([^,]+),([^)]+)\\)/);\n      const translate = regex.exec(transform);\n      if (translate) {\n        translateX = parseFloat(translate[1]);\n        translateY = parseFloat(translate[2]);\n      }\n    }\n    const newTranslateY = translateY - totalHeight / 2;\n    let newTranslateX = x2 + padding / 2;\n    if (i2 === 0 || i2 === 1) {\n      newTranslateX = translateX;\n    }\n    text2.attr(\"transform\", `translate(${newTranslateX}, ${newTranslateY + padding})`);\n  });\n  if (accumulativeHeight > typeHeight + nameHeight + gap) {\n    const roughLine = rc.line(\n      x2,\n      y2 + typeHeight + nameHeight + gap,\n      x2 + totalWidth,\n      y2 + typeHeight + nameHeight + gap,\n      options\n    );\n    const dividerLine = shapeSvg.insert(() => roughLine);\n    dividerLine.attr(\"style\", nodeStyles);\n  }\n  updateNodeBounds(node, rect2);\n  node.intersect = function(point) {\n    return intersect_default.rect(node, point);\n  };\n  return shapeSvg;\n}\n__name(requirementBox, \"requirementBox\");\nasync function addText3(parentGroup, inputText, yOffset, style = \"\") {\n  if (inputText === \"\") {\n    return 0;\n  }\n  const textEl = parentGroup.insert(\"g\").attr(\"class\", \"label\").attr(\"style\", style);\n  const config = getConfig2();\n  const useHtmlLabels = config.htmlLabels ?? true;\n  const text2 = await createText(\n    textEl,\n    sanitizeText2(decodeEntities(inputText)),\n    {\n      width: calculateTextWidth(inputText, config) + 50,\n      // Add room for error when splitting text into multiple lines\n      classes: \"markdown-node-label\",\n      useHtmlLabels,\n      style\n    },\n    config\n  );\n  let bbox;\n  if (!useHtmlLabels) {\n    const textChild = text2.children[0];\n    for (const child of textChild.children) {\n      child.textContent = child.textContent.replaceAll(\"&gt;\", \">\").replaceAll(\"&lt;\", \"<\");\n      if (style) {\n        child.setAttribute(\"style\", style);\n      }\n    }\n    bbox = text2.getBBox();\n    bbox.height += 6;\n  } else {\n    const div = text2.children[0];\n    const dv = select_default(text2);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  textEl.attr(\"transform\", `translate(${-bbox.width / 2},${-bbox.height / 2 + yOffset})`);\n  return bbox.height;\n}\n__name(addText3, \"addText\");\n\n// src/rendering-util/rendering-elements/shapes/kanbanItem.ts\nvar colorFromPriority = /* @__PURE__ */ __name((priority) => {\n  switch (priority) {\n    case \"Very High\":\n      return \"red\";\n    case \"High\":\n      return \"orange\";\n    case \"Medium\":\n      return null;\n    // no stroke\n    case \"Low\":\n      return \"blue\";\n    case \"Very Low\":\n      return \"lightblue\";\n  }\n}, \"colorFromPriority\");\nasync function kanbanItem(parent, kanbanNode, { config }) {\n  const { labelStyles, nodeStyles } = styles2String(kanbanNode);\n  kanbanNode.labelStyle = labelStyles || \"\";\n  const labelPaddingX = 10;\n  const orgWidth = kanbanNode.width;\n  kanbanNode.width = (kanbanNode.width ?? 200) - 10;\n  const {\n    shapeSvg,\n    bbox,\n    label: labelElTitle\n  } = await labelHelper(parent, kanbanNode, getNodeClasses(kanbanNode));\n  const padding = kanbanNode.padding || 10;\n  let ticketUrl = \"\";\n  let link;\n  if (\"ticket\" in kanbanNode && kanbanNode.ticket && config?.kanban?.ticketBaseUrl) {\n    ticketUrl = config?.kanban?.ticketBaseUrl.replace(\"#TICKET#\", kanbanNode.ticket);\n    link = shapeSvg.insert(\"svg:a\", \":first-child\").attr(\"class\", \"kanban-ticket-link\").attr(\"xlink:href\", ticketUrl).attr(\"target\", \"_blank\");\n  }\n  const options = {\n    useHtmlLabels: kanbanNode.useHtmlLabels,\n    labelStyle: kanbanNode.labelStyle || \"\",\n    width: kanbanNode.width,\n    img: kanbanNode.img,\n    padding: kanbanNode.padding || 8,\n    centerLabel: false\n  };\n  let labelEl, bbox2;\n  if (link) {\n    ({ label: labelEl, bbox: bbox2 } = await insertLabel(\n      link,\n      \"ticket\" in kanbanNode && kanbanNode.ticket || \"\",\n      options\n    ));\n  } else {\n    ({ label: labelEl, bbox: bbox2 } = await insertLabel(\n      shapeSvg,\n      \"ticket\" in kanbanNode && kanbanNode.ticket || \"\",\n      options\n    ));\n  }\n  const { label: labelElAssigned, bbox: bboxAssigned } = await insertLabel(\n    shapeSvg,\n    \"assigned\" in kanbanNode && kanbanNode.assigned || \"\",\n    options\n  );\n  kanbanNode.width = orgWidth;\n  const labelPaddingY = 10;\n  const totalWidth = kanbanNode?.width || 0;\n  const heightAdj = Math.max(bbox2.height, bboxAssigned.height) / 2;\n  const totalHeight = Math.max(bbox.height + labelPaddingY * 2, kanbanNode?.height || 0) + heightAdj;\n  const x2 = -totalWidth / 2;\n  const y2 = -totalHeight / 2;\n  labelElTitle.attr(\n    \"transform\",\n    \"translate(\" + (padding - totalWidth / 2) + \", \" + (-heightAdj - bbox.height / 2) + \")\"\n  );\n  labelEl.attr(\n    \"transform\",\n    \"translate(\" + (padding - totalWidth / 2) + \", \" + (-heightAdj + bbox.height / 2) + \")\"\n  );\n  labelElAssigned.attr(\n    \"transform\",\n    \"translate(\" + (padding + totalWidth / 2 - bboxAssigned.width - 2 * labelPaddingX) + \", \" + (-heightAdj + bbox.height / 2) + \")\"\n  );\n  let rect2;\n  const { rx, ry } = kanbanNode;\n  const { cssStyles } = kanbanNode;\n  if (kanbanNode.look === \"handDrawn\") {\n    const rc = at.svg(shapeSvg);\n    const options2 = userNodeOverrides(kanbanNode, {});\n    const roughNode = rx || ry ? rc.path(createRoundedRectPathD(x2, y2, totalWidth, totalHeight, rx || 0), options2) : rc.rectangle(x2, y2, totalWidth, totalHeight, options2);\n    rect2 = shapeSvg.insert(() => roughNode, \":first-child\");\n    rect2.attr(\"class\", \"basic label-container\").attr(\"style\", cssStyles ? cssStyles : null);\n  } else {\n    rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n    rect2.attr(\"class\", \"basic label-container __APA__\").attr(\"style\", nodeStyles).attr(\"rx\", rx ?? 5).attr(\"ry\", ry ?? 5).attr(\"x\", x2).attr(\"y\", y2).attr(\"width\", totalWidth).attr(\"height\", totalHeight);\n    const priority = \"priority\" in kanbanNode && kanbanNode.priority;\n    if (priority) {\n      const line = shapeSvg.append(\"line\");\n      const lineX = x2 + 2;\n      const y1 = y2 + Math.floor((rx ?? 0) / 2);\n      const y22 = y2 + totalHeight - Math.floor((rx ?? 0) / 2);\n      line.attr(\"x1\", lineX).attr(\"y1\", y1).attr(\"x2\", lineX).attr(\"y2\", y22).attr(\"stroke-width\", \"4\").attr(\"stroke\", colorFromPriority(priority));\n    }\n  }\n  updateNodeBounds(kanbanNode, rect2);\n  kanbanNode.height = totalHeight;\n  kanbanNode.intersect = function(point) {\n    return intersect_default.rect(kanbanNode, point);\n  };\n  return shapeSvg;\n}\n__name(kanbanItem, \"kanbanItem\");\n\n// src/rendering-util/rendering-elements/shapes.ts\nvar shapesDefs = [\n  {\n    semanticName: \"Process\",\n    name: \"Rectangle\",\n    shortName: \"rect\",\n    description: \"Standard process shape\",\n    aliases: [\"proc\", \"process\", \"rectangle\"],\n    internalAliases: [\"squareRect\"],\n    handler: squareRect2\n  },\n  {\n    semanticName: \"Event\",\n    name: \"Rounded Rectangle\",\n    shortName: \"rounded\",\n    description: \"Represents an event\",\n    aliases: [\"event\"],\n    internalAliases: [\"roundedRect\"],\n    handler: roundedRect\n  },\n  {\n    semanticName: \"Terminal Point\",\n    name: \"Stadium\",\n    shortName: \"stadium\",\n    description: \"Terminal point\",\n    aliases: [\"terminal\", \"pill\"],\n    handler: stadium\n  },\n  {\n    semanticName: \"Subprocess\",\n    name: \"Framed Rectangle\",\n    shortName: \"fr-rect\",\n    description: \"Subprocess\",\n    aliases: [\"subprocess\", \"subproc\", \"framed-rectangle\", \"subroutine\"],\n    handler: subroutine\n  },\n  {\n    semanticName: \"Database\",\n    name: \"Cylinder\",\n    shortName: \"cyl\",\n    description: \"Database storage\",\n    aliases: [\"db\", \"database\", \"cylinder\"],\n    handler: cylinder\n  },\n  {\n    semanticName: \"Start\",\n    name: \"Circle\",\n    shortName: \"circle\",\n    description: \"Starting point\",\n    aliases: [\"circ\"],\n    handler: circle\n  },\n  {\n    semanticName: \"Decision\",\n    name: \"Diamond\",\n    shortName: \"diam\",\n    description: \"Decision-making step\",\n    aliases: [\"decision\", \"diamond\", \"question\"],\n    handler: question\n  },\n  {\n    semanticName: \"Prepare Conditional\",\n    name: \"Hexagon\",\n    shortName: \"hex\",\n    description: \"Preparation or condition step\",\n    aliases: [\"hexagon\", \"prepare\"],\n    handler: hexagon\n  },\n  {\n    semanticName: \"Data Input/Output\",\n    name: \"Lean Right\",\n    shortName: \"lean-r\",\n    description: \"Represents input or output\",\n    aliases: [\"lean-right\", \"in-out\"],\n    internalAliases: [\"lean_right\"],\n    handler: lean_right\n  },\n  {\n    semanticName: \"Data Input/Output\",\n    name: \"Lean Left\",\n    shortName: \"lean-l\",\n    description: \"Represents output or input\",\n    aliases: [\"lean-left\", \"out-in\"],\n    internalAliases: [\"lean_left\"],\n    handler: lean_left\n  },\n  {\n    semanticName: \"Priority Action\",\n    name: \"Trapezoid Base Bottom\",\n    shortName: \"trap-b\",\n    description: \"Priority action\",\n    aliases: [\"priority\", \"trapezoid-bottom\", \"trapezoid\"],\n    handler: trapezoid\n  },\n  {\n    semanticName: \"Manual Operation\",\n    name: \"Trapezoid Base Top\",\n    shortName: \"trap-t\",\n    description: \"Represents a manual task\",\n    aliases: [\"manual\", \"trapezoid-top\", \"inv-trapezoid\"],\n    internalAliases: [\"inv_trapezoid\"],\n    handler: inv_trapezoid\n  },\n  {\n    semanticName: \"Stop\",\n    name: \"Double Circle\",\n    shortName: \"dbl-circ\",\n    description: \"Represents a stop point\",\n    aliases: [\"double-circle\"],\n    internalAliases: [\"doublecircle\"],\n    handler: doublecircle\n  },\n  {\n    semanticName: \"Text Block\",\n    name: \"Text Block\",\n    shortName: \"text\",\n    description: \"Text block\",\n    handler: text\n  },\n  {\n    semanticName: \"Card\",\n    name: \"Notched Rectangle\",\n    shortName: \"notch-rect\",\n    description: \"Represents a card\",\n    aliases: [\"card\", \"notched-rectangle\"],\n    handler: card\n  },\n  {\n    semanticName: \"Lined/Shaded Process\",\n    name: \"Lined Rectangle\",\n    shortName: \"lin-rect\",\n    description: \"Lined process shape\",\n    aliases: [\"lined-rectangle\", \"lined-process\", \"lin-proc\", \"shaded-process\"],\n    handler: shadedProcess\n  },\n  {\n    semanticName: \"Start\",\n    name: \"Small Circle\",\n    shortName: \"sm-circ\",\n    description: \"Small starting point\",\n    aliases: [\"start\", \"small-circle\"],\n    internalAliases: [\"stateStart\"],\n    handler: stateStart\n  },\n  {\n    semanticName: \"Stop\",\n    name: \"Framed Circle\",\n    shortName: \"fr-circ\",\n    description: \"Stop point\",\n    aliases: [\"stop\", \"framed-circle\"],\n    internalAliases: [\"stateEnd\"],\n    handler: stateEnd\n  },\n  {\n    semanticName: \"Fork/Join\",\n    name: \"Filled Rectangle\",\n    shortName: \"fork\",\n    description: \"Fork or join in process flow\",\n    aliases: [\"join\"],\n    internalAliases: [\"forkJoin\"],\n    handler: forkJoin\n  },\n  {\n    semanticName: \"Collate\",\n    name: \"Hourglass\",\n    shortName: \"hourglass\",\n    description: \"Represents a collate operation\",\n    aliases: [\"hourglass\", \"collate\"],\n    handler: hourglass\n  },\n  {\n    semanticName: \"Comment\",\n    name: \"Curly Brace\",\n    shortName: \"brace\",\n    description: \"Adds a comment\",\n    aliases: [\"comment\", \"brace-l\"],\n    handler: curlyBraceLeft\n  },\n  {\n    semanticName: \"Comment Right\",\n    name: \"Curly Brace\",\n    shortName: \"brace-r\",\n    description: \"Adds a comment\",\n    handler: curlyBraceRight\n  },\n  {\n    semanticName: \"Comment with braces on both sides\",\n    name: \"Curly Braces\",\n    shortName: \"braces\",\n    description: \"Adds a comment\",\n    handler: curlyBraces\n  },\n  {\n    semanticName: \"Com Link\",\n    name: \"Lightning Bolt\",\n    shortName: \"bolt\",\n    description: \"Communication link\",\n    aliases: [\"com-link\", \"lightning-bolt\"],\n    handler: lightningBolt\n  },\n  {\n    semanticName: \"Document\",\n    name: \"Document\",\n    shortName: \"doc\",\n    description: \"Represents a document\",\n    aliases: [\"doc\", \"document\"],\n    handler: waveEdgedRectangle\n  },\n  {\n    semanticName: \"Delay\",\n    name: \"Half-Rounded Rectangle\",\n    shortName: \"delay\",\n    description: \"Represents a delay\",\n    aliases: [\"half-rounded-rectangle\"],\n    handler: halfRoundedRectangle\n  },\n  {\n    semanticName: \"Direct Access Storage\",\n    name: \"Horizontal Cylinder\",\n    shortName: \"h-cyl\",\n    description: \"Direct access storage\",\n    aliases: [\"das\", \"horizontal-cylinder\"],\n    handler: tiltedCylinder\n  },\n  {\n    semanticName: \"Disk Storage\",\n    name: \"Lined Cylinder\",\n    shortName: \"lin-cyl\",\n    description: \"Disk storage\",\n    aliases: [\"disk\", \"lined-cylinder\"],\n    handler: linedCylinder\n  },\n  {\n    semanticName: \"Display\",\n    name: \"Curved Trapezoid\",\n    shortName: \"curv-trap\",\n    description: \"Represents a display\",\n    aliases: [\"curved-trapezoid\", \"display\"],\n    handler: curvedTrapezoid\n  },\n  {\n    semanticName: \"Divided Process\",\n    name: \"Divided Rectangle\",\n    shortName: \"div-rect\",\n    description: \"Divided process shape\",\n    aliases: [\"div-proc\", \"divided-rectangle\", \"divided-process\"],\n    handler: dividedRectangle\n  },\n  {\n    semanticName: \"Extract\",\n    name: \"Triangle\",\n    shortName: \"tri\",\n    description: \"Extraction process\",\n    aliases: [\"extract\", \"triangle\"],\n    handler: triangle\n  },\n  {\n    semanticName: \"Internal Storage\",\n    name: \"Window Pane\",\n    shortName: \"win-pane\",\n    description: \"Internal storage\",\n    aliases: [\"internal-storage\", \"window-pane\"],\n    handler: windowPane\n  },\n  {\n    semanticName: \"Junction\",\n    name: \"Filled Circle\",\n    shortName: \"f-circ\",\n    description: \"Junction point\",\n    aliases: [\"junction\", \"filled-circle\"],\n    handler: filledCircle\n  },\n  {\n    semanticName: \"Loop Limit\",\n    name: \"Trapezoidal Pentagon\",\n    shortName: \"notch-pent\",\n    description: \"Loop limit step\",\n    aliases: [\"loop-limit\", \"notched-pentagon\"],\n    handler: trapezoidalPentagon\n  },\n  {\n    semanticName: \"Manual File\",\n    name: \"Flipped Triangle\",\n    shortName: \"flip-tri\",\n    description: \"Manual file operation\",\n    aliases: [\"manual-file\", \"flipped-triangle\"],\n    handler: flippedTriangle\n  },\n  {\n    semanticName: \"Manual Input\",\n    name: \"Sloped Rectangle\",\n    shortName: \"sl-rect\",\n    description: \"Manual input step\",\n    aliases: [\"manual-input\", \"sloped-rectangle\"],\n    handler: slopedRect\n  },\n  {\n    semanticName: \"Multi-Document\",\n    name: \"Stacked Document\",\n    shortName: \"docs\",\n    description: \"Multiple documents\",\n    aliases: [\"documents\", \"st-doc\", \"stacked-document\"],\n    handler: multiWaveEdgedRectangle\n  },\n  {\n    semanticName: \"Multi-Process\",\n    name: \"Stacked Rectangle\",\n    shortName: \"st-rect\",\n    description: \"Multiple processes\",\n    aliases: [\"procs\", \"processes\", \"stacked-rectangle\"],\n    handler: multiRect\n  },\n  {\n    semanticName: \"Stored Data\",\n    name: \"Bow Tie Rectangle\",\n    shortName: \"bow-rect\",\n    description: \"Stored data\",\n    aliases: [\"stored-data\", \"bow-tie-rectangle\"],\n    handler: bowTieRect\n  },\n  {\n    semanticName: \"Summary\",\n    name: \"Crossed Circle\",\n    shortName: \"cross-circ\",\n    description: \"Summary\",\n    aliases: [\"summary\", \"crossed-circle\"],\n    handler: crossedCircle\n  },\n  {\n    semanticName: \"Tagged Document\",\n    name: \"Tagged Document\",\n    shortName: \"tag-doc\",\n    description: \"Tagged document\",\n    aliases: [\"tag-doc\", \"tagged-document\"],\n    handler: taggedWaveEdgedRectangle\n  },\n  {\n    semanticName: \"Tagged Process\",\n    name: \"Tagged Rectangle\",\n    shortName: \"tag-rect\",\n    description: \"Tagged process\",\n    aliases: [\"tagged-rectangle\", \"tag-proc\", \"tagged-process\"],\n    handler: taggedRect\n  },\n  {\n    semanticName: \"Paper Tape\",\n    name: \"Flag\",\n    shortName: \"flag\",\n    description: \"Paper tape\",\n    aliases: [\"paper-tape\"],\n    handler: waveRectangle\n  },\n  {\n    semanticName: \"Odd\",\n    name: \"Odd\",\n    shortName: \"odd\",\n    description: \"Odd shape\",\n    internalAliases: [\"rect_left_inv_arrow\"],\n    handler: rect_left_inv_arrow\n  },\n  {\n    semanticName: \"Lined Document\",\n    name: \"Lined Document\",\n    shortName: \"lin-doc\",\n    description: \"Lined document\",\n    aliases: [\"lined-document\"],\n    handler: linedWaveEdgedRect\n  }\n];\nvar generateShapeMap = /* @__PURE__ */ __name(() => {\n  const undocumentedShapes = {\n    // States\n    state,\n    choice,\n    note,\n    // Rectangles\n    rectWithTitle,\n    labelRect,\n    // Icons\n    iconSquare,\n    iconCircle,\n    icon,\n    iconRounded,\n    imageSquare,\n    anchor,\n    // Kanban diagram\n    kanbanItem,\n    // class diagram\n    classBox,\n    // er diagram\n    erBox,\n    // Requirement diagram\n    requirementBox\n  };\n  const entries = [\n    ...Object.entries(undocumentedShapes),\n    ...shapesDefs.flatMap((shape) => {\n      const aliases = [\n        shape.shortName,\n        ...\"aliases\" in shape ? shape.aliases : [],\n        ...\"internalAliases\" in shape ? shape.internalAliases : []\n      ];\n      return aliases.map((alias) => [alias, shape.handler]);\n    })\n  ];\n  return Object.fromEntries(entries);\n}, \"generateShapeMap\");\nvar shapes2 = generateShapeMap();\nfunction isValidShape(shape) {\n  return shape in shapes2;\n}\n__name(isValidShape, \"isValidShape\");\n\n// src/rendering-util/rendering-elements/nodes.ts\nvar nodeElems = /* @__PURE__ */ new Map();\nasync function insertNode(elem, node, renderOptions) {\n  let newEl;\n  let el;\n  if (node.shape === \"rect\") {\n    if (node.rx && node.ry) {\n      node.shape = \"roundedRect\";\n    } else {\n      node.shape = \"squareRect\";\n    }\n  }\n  const shapeHandler = node.shape ? shapes2[node.shape] : void 0;\n  if (!shapeHandler) {\n    throw new Error(`No such shape: ${node.shape}. Please check your syntax.`);\n  }\n  if (node.link) {\n    let target;\n    if (renderOptions.config.securityLevel === \"sandbox\") {\n      target = \"_top\";\n    } else if (node.linkTarget) {\n      target = node.linkTarget || \"_blank\";\n    }\n    newEl = elem.insert(\"svg:a\").attr(\"xlink:href\", node.link).attr(\"target\", target ?? null);\n    el = await shapeHandler(newEl, node, renderOptions);\n  } else {\n    el = await shapeHandler(elem, node, renderOptions);\n    newEl = el;\n  }\n  if (node.tooltip) {\n    el.attr(\"title\", node.tooltip);\n  }\n  nodeElems.set(node.id, newEl);\n  if (node.haveCallback) {\n    newEl.attr(\"class\", newEl.attr(\"class\") + \" clickable\");\n  }\n  return newEl;\n}\n__name(insertNode, \"insertNode\");\nvar setNodeElem = /* @__PURE__ */ __name((elem, node) => {\n  nodeElems.set(node.id, elem);\n}, \"setNodeElem\");\nvar clear2 = /* @__PURE__ */ __name(() => {\n  nodeElems.clear();\n}, \"clear\");\nvar positionNode = /* @__PURE__ */ __name((node) => {\n  const el = nodeElems.get(node.id);\n  log.trace(\n    \"Transforming node\",\n    node.diff,\n    node,\n    \"translate(\" + (node.x - node.width / 2 - 5) + \", \" + node.width / 2 + \")\"\n  );\n  const padding = 8;\n  const diff = node.diff || 0;\n  if (node.clusterNode) {\n    el.attr(\n      \"transform\",\n      \"translate(\" + (node.x + diff - node.width / 2) + \", \" + (node.y - node.height / 2 - padding) + \")\"\n    );\n  } else {\n    el.attr(\"transform\", \"translate(\" + node.x + \", \" + node.y + \")\");\n  }\n  return diff;\n}, \"positionNode\");\n\nexport {\n  labelHelper,\n  updateNodeBounds,\n  isLabelStyle,\n  at,\n  createLabel_default,\n  isValidShape,\n  insertCluster,\n  clear,\n  insertNode,\n  setNodeElem,\n  clear2,\n  positionNode\n};\n",
      "start": 1743409709063,
      "end": 1743409709072,
      "sourcemaps": null
    },
    {
      "name": "unplugin-vue-markdown",
      "start": 1743409709072,
      "end": 1743409709072,
      "order": "pre"
    },
    {
      "name": "slidev:flags",
      "start": 1743409709072,
      "end": 1743409709072,
      "order": "pre"
    },
    {
      "name": "unocss:transformers:pre",
      "start": 1743409709072,
      "end": 1743409709072,
      "order": "pre"
    },
    {
      "name": "unocss:global:build:scan",
      "start": 1743409709072,
      "end": 1743409709072,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1743409709072,
      "end": 1743409709072,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1743409709072,
      "end": 1743409709072,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1743409709072,
      "end": 1743409709072,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1743409709072,
      "end": 1743409709072,
      "order": "normal"
    },
    {
      "name": "slidev:layout-wrapper",
      "start": 1743409709072,
      "end": 1743409709072,
      "order": "normal"
    },
    {
      "name": "slidev:context-injection",
      "start": 1743409709072,
      "end": 1743409709072,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1743409709072,
      "end": 1743409709072,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1743409709072,
      "end": 1743409709072,
      "order": "normal"
    },
    {
      "name": "slidev:hmr-patch",
      "start": 1743409709072,
      "end": 1743409709072,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:undefined",
      "start": 1743409709072,
      "end": 1743409709072,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1743409709072,
      "end": 1743409709072,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1743409709072,
      "end": 1743409709072,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1743409709072,
      "end": 1743409709072,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1743409709072,
      "end": 1743409709073,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1743409709073,
      "end": 1743409709073,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1743409709073,
      "end": 1743409709073,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1743409709073,
      "end": 1743409709073,
      "order": "normal"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1743409709073,
      "end": 1743409709073,
      "order": "post"
    },
    {
      "name": "unocss:transformers:post",
      "start": 1743409709073,
      "end": 1743409709073,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1743409709073,
      "end": 1743409709073,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1743409709073,
      "end": 1743409709073,
      "order": "normal"
    }
  ]
}
