{
  "resolvedId": "/Users/stevenhill/gce_git_tutorial/node_modules/@unhead/vue/dist/shared/vue.cHBs6zvy.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { useScript as useScript$1 } from 'unhead/scripts';\nimport { getCurrentInstance, onMounted, isRef, watch, onScopeDispose, ref } from 'vue';\nimport { i as injectHead } from './vue.BYLJNEcq.mjs';\n\nfunction registerVueScopeHandlers(script, scope) {\n  if (!scope) {\n    return;\n  }\n  const _registerCb = (key, cb) => {\n    if (!script._cbs[key]) {\n      cb(script.instance);\n      return () => {\n      };\n    }\n    let i = script._cbs[key].push(cb);\n    const destroy = () => {\n      if (i) {\n        script._cbs[key]?.splice(i - 1, 1);\n        i = null;\n      }\n    };\n    onScopeDispose(destroy);\n    return destroy;\n  };\n  script.onLoaded = (cb) => _registerCb(\"loaded\", cb);\n  script.onError = (cb) => _registerCb(\"error\", cb);\n  onScopeDispose(() => {\n    script._triggerAbortController?.abort();\n  });\n}\nfunction useScript(_input, _options) {\n  const input = typeof _input === \"string\" ? { src: _input } : _input;\n  const options = _options || {};\n  const head = options?.head || injectHead();\n  options.head = head;\n  const scope = getCurrentInstance();\n  options.eventContext = scope;\n  if (scope && typeof options.trigger === \"undefined\") {\n    options.trigger = onMounted;\n  } else if (isRef(options.trigger)) {\n    const refTrigger = options.trigger;\n    let off;\n    options.trigger = new Promise((resolve) => {\n      off = watch(refTrigger, (val) => {\n        if (val) {\n          resolve(true);\n        }\n      }, {\n        immediate: true\n      });\n      onScopeDispose(() => resolve(false), true);\n    }).then((val) => {\n      off?.();\n      return val;\n    });\n  }\n  head._scriptStatusWatcher = head._scriptStatusWatcher || head.hooks.hook(\"script:updated\", ({ script: s }) => {\n    s._statusRef.value = s.status;\n  });\n  const script = useScript$1(head, input, options);\n  script._statusRef = script._statusRef || ref(script.status);\n  registerVueScopeHandlers(script, scope);\n  return new Proxy(script, {\n    get(_, key, a) {\n      return Reflect.get(_, key === \"status\" ? \"_statusRef\" : key, a);\n    }\n  });\n}\n\nexport { useScript as u };\n",
      "start": 1743409708591,
      "end": 1743409708599,
      "sourcemaps": null
    },
    {
      "name": "unplugin-vue-markdown",
      "start": 1743409708599,
      "end": 1743409708599,
      "order": "pre"
    },
    {
      "name": "slidev:flags",
      "start": 1743409708599,
      "end": 1743409708599,
      "order": "pre"
    },
    {
      "name": "unocss:transformers:pre",
      "start": 1743409708599,
      "end": 1743409708599,
      "order": "pre"
    },
    {
      "name": "unocss:global:build:scan",
      "start": 1743409708599,
      "end": 1743409708599,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1743409708599,
      "end": 1743409708599,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1743409708599,
      "end": 1743409708599,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1743409708599,
      "end": 1743409708599,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1743409708599,
      "end": 1743409708599,
      "order": "normal"
    },
    {
      "name": "slidev:layout-wrapper",
      "start": 1743409708599,
      "end": 1743409708599,
      "order": "normal"
    },
    {
      "name": "slidev:context-injection",
      "start": 1743409708599,
      "end": 1743409708599,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1743409708599,
      "end": 1743409708599,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1743409708599,
      "end": 1743409708599,
      "order": "normal"
    },
    {
      "name": "slidev:hmr-patch",
      "start": 1743409708599,
      "end": 1743409708599,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:undefined",
      "start": 1743409708599,
      "end": 1743409708599,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1743409708599,
      "end": 1743409708599,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1743409708599,
      "end": 1743409708599,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1743409708599,
      "end": 1743409708599,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1743409708599,
      "end": 1743409708599,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1743409708599,
      "end": 1743409708599,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1743409708599,
      "end": 1743409708599,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1743409708599,
      "end": 1743409708599,
      "order": "normal"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1743409708599,
      "end": 1743409708599,
      "order": "post"
    },
    {
      "name": "unocss:transformers:post",
      "start": 1743409708599,
      "end": 1743409708599,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1743409708599,
      "end": 1743409708599,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1743409708599,
      "end": 1743409708599,
      "order": "normal"
    }
  ]
}
