{
  "resolvedId": "/Users/stevenhill/gce_git_tutorial/node_modules/@slidev/client/composables/useNav.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import type { ClicksContext, SlideRoute, TocItem } from '@slidev/types'\nimport type { ComputedRef, Ref, TransitionGroupProps, WritableComputedRef } from 'vue'\nimport type { RouteLocationNormalized, Router } from 'vue-router'\nimport { slides } from '#slidev/slides'\nimport { clamp } from '@antfu/utils'\nimport { parseRangeString } from '@slidev/parser/utils'\nimport { createSharedComposable } from '@vueuse/core'\nimport { computed, ref, watch } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\nimport { CLICKS_MAX } from '../constants'\nimport { configs } from '../env'\nimport { useRouteQuery } from '../logic/route'\nimport { getSlide, getSlidePath } from '../logic/slides'\nimport { getCurrentTransition } from '../logic/transition'\nimport { hmrSkipTransition } from '../state'\nimport { createClicksContextBase } from './useClicks'\nimport { useTocTree } from './useTocTree'\n\nexport interface SlidevContextNav {\n  slides: Ref<SlideRoute[]>\n  total: ComputedRef<number>\n\n  currentPath: ComputedRef<string>\n  currentPage: ComputedRef<number>\n  currentSlideNo: ComputedRef<number>\n  currentSlideRoute: ComputedRef<SlideRoute>\n  currentTransition: ComputedRef<TransitionGroupProps | undefined>\n  currentLayout: ComputedRef<string>\n\n  nextRoute: ComputedRef<SlideRoute>\n  prevRoute: ComputedRef<SlideRoute>\n  hasNext: ComputedRef<boolean>\n  hasPrev: ComputedRef<boolean>\n\n  clicksContext: ComputedRef<ClicksContext>\n  clicks: ComputedRef<number>\n  clicksStart: ComputedRef<number>\n  clicksTotal: ComputedRef<number>\n\n  /** The table of content tree */\n  tocTree: ComputedRef<TocItem[]>\n  /** The direction of the navigation, 1 for forward, -1 for backward */\n  navDirection: Ref<number>\n  /** The direction of the clicks, 1 for forward, -1 for backward */\n  clicksDirection: Ref<number>\n  /** Utility function for open file in editor, only avaible in dev mode  */\n  openInEditor: (url?: string) => Promise<boolean>\n\n  /** Go to next click */\n  next: () => Promise<void>\n  /** Go to previous click */\n  prev: () => Promise<void>\n  /** Go to next slide */\n  nextSlide: (lastClicks?: boolean) => Promise<void>\n  /** Go to previous slide */\n  prevSlide: (lastClicks?: boolean) => Promise<void>\n  /** Go to slide */\n  go: (no: number | string, clicks?: number, force?: boolean) => Promise<void>\n  /** Go to the first slide */\n  goFirst: () => Promise<void>\n  /** Go to the last slide */\n  goLast: () => Promise<void>\n\n  /** Enter presenter mode */\n  enterPresenter: () => void\n  /** Exit presenter mode */\n  exitPresenter: () => void\n}\n\nexport interface SlidevContextNavState {\n  router: Router\n  currentRoute: ComputedRef<RouteLocationNormalized>\n  isPrintMode: ComputedRef<boolean>\n  isPrintWithClicks: Ref<boolean>\n  isEmbedded: ComputedRef<boolean>\n  isPlaying: ComputedRef<boolean>\n  isPresenter: ComputedRef<boolean>\n  isNotesViewer: ComputedRef<boolean>\n  isPresenterAvailable: ComputedRef<boolean>\n  hasPrimarySlide: ComputedRef<boolean>\n  currentSlideNo: ComputedRef<number>\n  currentSlideRoute: ComputedRef<SlideRoute>\n  clicksContext: ComputedRef<ClicksContext>\n  queryClicksRaw: Ref<string>\n  queryClicks: WritableComputedRef<number>\n  printRange: Ref<number[]>\n  getPrimaryClicks: (route: SlideRoute) => ClicksContext\n}\n\nexport interface SlidevContextNavFull extends SlidevContextNav, SlidevContextNavState { }\n\nexport function useNavBase(\n  currentSlideRoute: ComputedRef<SlideRoute>,\n  clicksContext: ComputedRef<ClicksContext>,\n  queryClicks: Ref<number> = ref(0),\n  isPresenter: Ref<boolean>,\n  isPrint: Ref<boolean>,\n  router?: Router,\n): SlidevContextNav {\n  const total = computed(() => slides.value.length)\n\n  const navDirection = ref(0)\n  const clicksDirection = ref(0)\n\n  const currentPath = computed(() => getSlidePath(currentSlideRoute.value, isPresenter.value))\n  const currentSlideNo = computed(() => currentSlideRoute.value.no)\n  const currentLayout = computed(() => currentSlideRoute.value.meta?.layout || (currentSlideNo.value === 1 ? 'cover' : 'default'))\n\n  const clicks = computed(() => clicksContext.value.current)\n  const clicksStart = computed(() => clicksContext.value.clicksStart)\n  const clicksTotal = computed(() => clicksContext.value.total)\n  const nextRoute = computed(() => slides.value[Math.min(slides.value.length, currentSlideNo.value + 1) - 1])\n  const prevRoute = computed(() => slides.value[Math.max(1, currentSlideNo.value - 1) - 1])\n  const hasNext = computed(() => currentSlideNo.value < slides.value.length || clicks.value < clicksTotal.value)\n  const hasPrev = computed(() => currentSlideNo.value > 1 || clicks.value > 0)\n\n  const currentTransition = computed(() => isPrint.value ? undefined : getCurrentTransition(navDirection.value, currentSlideRoute.value, prevRoute.value))\n\n  watch(currentSlideRoute, (next, prev) => {\n    navDirection.value = next.no - prev.no\n  })\n\n  async function openInEditor(url?: string) {\n    if (!__DEV__)\n      return false\n    if (url == null) {\n      const slide = currentSlideRoute.value?.meta?.slide\n      if (!slide)\n        return false\n      url = `${slide.filepath}:${slide.start}`\n    }\n    await fetch(`/__open-in-editor?file=${encodeURIComponent(url)}`)\n    return true\n  }\n\n  const tocTree = useTocTree(\n    slides,\n    currentSlideNo,\n    currentSlideRoute,\n  )\n\n  async function next() {\n    clicksDirection.value = 1\n    if (clicksTotal.value <= queryClicks.value)\n      await nextSlide()\n    else\n      queryClicks.value += 1\n  }\n\n  async function prev() {\n    clicksDirection.value = -1\n    if (queryClicks.value <= clicksStart.value)\n      await prevSlide(true)\n    else\n      queryClicks.value -= 1\n  }\n\n  async function nextSlide(lastClicks = false) {\n    clicksDirection.value = 1\n    if (currentSlideNo.value < slides.value.length) {\n      await go(\n        currentSlideNo.value + 1,\n        lastClicks && !isPrint.value ? CLICKS_MAX : undefined,\n      )\n    }\n  }\n\n  async function prevSlide(lastClicks = false) {\n    clicksDirection.value = -1\n    if (currentSlideNo.value > 1) {\n      await go(\n        currentSlideNo.value - 1,\n        lastClicks && !isPrint.value ? CLICKS_MAX : undefined,\n      )\n    }\n  }\n\n  function goFirst() {\n    return go(1)\n  }\n\n  function goLast() {\n    return go(total.value)\n  }\n\n  async function go(no: number | string, clicks: number = 0, force = false) {\n    hmrSkipTransition.value = false\n    const pageChanged = currentSlideNo.value !== no\n    const clicksChanged = clicks !== queryClicks.value\n    const meta = getSlide(no)?.meta\n    const clicksStart = meta?.slide?.frontmatter.clicksStart ?? 0\n    clicks = clamp(clicks, clicksStart, meta?.__clicksContext?.total ?? CLICKS_MAX)\n    if (force || pageChanged || clicksChanged) {\n      await router?.push({\n        path: getSlidePath(no, isPresenter.value, router.currentRoute.value.name === 'export'),\n        query: {\n          ...router.currentRoute.value.query,\n          clicks: clicks === 0 ? undefined : clicks.toString(),\n          embedded: location.search.includes('embedded') ? 'true' : undefined,\n        },\n      })\n    }\n  }\n\n  function enterPresenter() {\n    router?.push({\n      path: getSlidePath(currentSlideNo.value, true),\n      query: { ...router.currentRoute.value.query },\n    })\n  }\n  function exitPresenter() {\n    router?.push({\n      path: getSlidePath(currentSlideNo.value, false),\n      query: { ...router.currentRoute.value.query },\n    })\n  }\n\n  return {\n    slides,\n    total,\n    currentPath,\n    currentSlideNo,\n    currentPage: currentSlideNo,\n    currentSlideRoute,\n    currentLayout,\n    currentTransition,\n    clicksDirection,\n    nextRoute,\n    prevRoute,\n    clicksContext,\n    clicks,\n    clicksStart,\n    clicksTotal,\n    hasNext,\n    hasPrev,\n    tocTree,\n    navDirection,\n    openInEditor,\n    next,\n    prev,\n    go,\n    goLast,\n    goFirst,\n    nextSlide,\n    prevSlide,\n    enterPresenter,\n    exitPresenter,\n  }\n}\n\nexport function useFixedNav(\n  currentSlideRoute: SlideRoute,\n  clicksContext: ClicksContext,\n): SlidevContextNav {\n  const noop = async () => { }\n  return {\n    ...useNavBase(\n      computed(() => currentSlideRoute),\n      computed(() => clicksContext),\n      ref(CLICKS_MAX),\n      ref(false),\n      ref(false),\n    ),\n    next: noop,\n    prev: noop,\n    nextSlide: noop,\n    prevSlide: noop,\n    goFirst: noop,\n    goLast: noop,\n    go: noop,\n  }\n}\n\nconst useNavState = createSharedComposable((): SlidevContextNavState => {\n  const router = useRouter()\n  const currentRoute = useRoute()\n\n  const query = computed(() => {\n    // eslint-disable-next-line ts/no-unused-expressions\n    router.currentRoute.value.query\n    return new URLSearchParams(location.search)\n  })\n  const isPrintMode = computed(() => query.value.has('print') || currentRoute.name === 'export')\n  const isPrintWithClicks = ref(query.value.get('print') === 'clicks')\n  const isEmbedded = computed(() => query.value.has('embedded'))\n  const isPlaying = computed(() => currentRoute.name === 'play')\n  const isPresenter = computed(() => currentRoute.name === 'presenter')\n  const isNotesViewer = computed(() => currentRoute.name === 'notes')\n  const isPresenterAvailable = computed(() => !isPresenter.value && (!configs.remote || query.value.get('password') === configs.remote))\n  const hasPrimarySlide = computed(() => !!currentRoute.params.no)\n  const currentSlideNo = computed(() => hasPrimarySlide.value ? getSlide(currentRoute.params.no as string)?.no ?? 1 : 1)\n  const currentSlideRoute = computed(() => slides.value[currentSlideNo.value - 1])\n  const printRange = ref(parseRangeString(slides.value.length, currentRoute.query.range as string | undefined))\n\n  const queryClicksRaw = useRouteQuery<string>('clicks', '0')\n\n  const clicksContext = computed(() => getPrimaryClicks(currentSlideRoute.value))\n\n  const queryClicks = computed({\n    get() {\n      let v = +(queryClicksRaw.value || 0)\n      if (Number.isNaN(v))\n        v = 0\n      return v\n    },\n    set(v) {\n      hmrSkipTransition.value = false\n      queryClicksRaw.value = v.toString()\n    },\n  })\n\n  function getPrimaryClicks(\n    route: SlideRoute,\n  ): ClicksContext {\n    if (route?.meta?.__clicksContext)\n      return route.meta.__clicksContext\n\n    const thisNo = route.no\n    const context = createClicksContextBase(\n      computed({\n        get() {\n          if (currentSlideNo.value === thisNo)\n            return Math.max(+(queryClicksRaw.value ?? 0), context.clicksStart)\n          else if (currentSlideNo.value > thisNo)\n            return CLICKS_MAX\n          else\n            return context.clicksStart\n        },\n        set(v) {\n          if (currentSlideNo.value === thisNo)\n            queryClicksRaw.value = v.toString()\n        },\n      }),\n      route?.meta.slide?.frontmatter.clicksStart ?? 0,\n      route?.meta.clicks,\n    )\n\n    if (route?.meta)\n      route.meta.__clicksContext = context\n\n    return context\n  }\n\n  return {\n    router,\n    currentRoute: computed(() => currentRoute),\n    isPrintMode,\n    isPrintWithClicks,\n    isEmbedded,\n    isPlaying,\n    isPresenter,\n    isNotesViewer,\n    isPresenterAvailable,\n    hasPrimarySlide,\n    currentSlideNo,\n    currentSlideRoute,\n    clicksContext,\n    queryClicksRaw,\n    queryClicks,\n    printRange,\n    getPrimaryClicks,\n  }\n})\n\nexport const useNav = createSharedComposable((): SlidevContextNavFull => {\n  const state = useNavState()\n  const router = useRouter()\n\n  const nav = useNavBase(\n    state.currentSlideRoute,\n    state.clicksContext,\n    state.queryClicks,\n    state.isPresenter,\n    state.isPrintMode,\n    router,\n  )\n\n  watch(\n    [nav.total, state.currentRoute],\n    async () => {\n      const no = state.currentRoute.value.params.no as string\n      if (state.hasPrimarySlide.value && !getSlide(no)) {\n        if (no && no !== 'index.html') {\n          // The current slide may has been removed. Redirect to the last slide.\n          await nav.go(nav.total.value, 0, true)\n        }\n        else {\n          // Redirect to the first slide\n          await nav.go(1, 0, true)\n        }\n      }\n    },\n    { flush: 'pre', immediate: true },\n  )\n\n  return {\n    ...nav,\n    ...state,\n  }\n})\n",
      "start": 1743409708468,
      "end": 1743409708470,
      "sourcemaps": null
    },
    {
      "name": "unplugin-vue-markdown",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "pre"
    },
    {
      "name": "slidev:flags",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "pre"
    },
    {
      "name": "unocss:transformers:pre",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "pre"
    },
    {
      "name": "unocss:global:build:scan",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1743409708470,
      "end": 1743409708470,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "result": "import { slides } from \"#slidev/slides\";\nimport { clamp } from \"@antfu/utils\";\nimport { parseRangeString } from \"@slidev/parser/utils\";\nimport { createSharedComposable } from \"@vueuse/core\";\nimport { computed, ref, watch } from \"vue\";\nimport { useRoute, useRouter } from \"vue-router\";\nimport { CLICKS_MAX } from \"../constants\";\nimport { configs } from \"../env\";\nimport { useRouteQuery } from \"../logic/route\";\nimport { getSlide, getSlidePath } from \"../logic/slides\";\nimport { getCurrentTransition } from \"../logic/transition\";\nimport { hmrSkipTransition } from \"../state\";\nimport { createClicksContextBase } from \"./useClicks\";\nimport { useTocTree } from \"./useTocTree\";\nexport function useNavBase(currentSlideRoute, clicksContext, queryClicks = ref(0), isPresenter, isPrint, router) {\n  const total = computed(() => slides.value.length);\n  const navDirection = ref(0);\n  const clicksDirection = ref(0);\n  const currentPath = computed(() => getSlidePath(currentSlideRoute.value, isPresenter.value));\n  const currentSlideNo = computed(() => currentSlideRoute.value.no);\n  const currentLayout = computed(() => currentSlideRoute.value.meta?.layout || (currentSlideNo.value === 1 ? \"cover\" : \"default\"));\n  const clicks = computed(() => clicksContext.value.current);\n  const clicksStart = computed(() => clicksContext.value.clicksStart);\n  const clicksTotal = computed(() => clicksContext.value.total);\n  const nextRoute = computed(() => slides.value[Math.min(slides.value.length, currentSlideNo.value + 1) - 1]);\n  const prevRoute = computed(() => slides.value[Math.max(1, currentSlideNo.value - 1) - 1]);\n  const hasNext = computed(() => currentSlideNo.value < slides.value.length || clicks.value < clicksTotal.value);\n  const hasPrev = computed(() => currentSlideNo.value > 1 || clicks.value > 0);\n  const currentTransition = computed(() => isPrint.value ? void 0 : getCurrentTransition(navDirection.value, currentSlideRoute.value, prevRoute.value));\n  watch(currentSlideRoute, (next2, prev2) => {\n    navDirection.value = next2.no - prev2.no;\n  });\n  async function openInEditor(url) {\n    if (!__DEV__)\n      return false;\n    if (url == null) {\n      const slide = currentSlideRoute.value?.meta?.slide;\n      if (!slide)\n        return false;\n      url = `${slide.filepath}:${slide.start}`;\n    }\n    await fetch(`/__open-in-editor?file=${encodeURIComponent(url)}`);\n    return true;\n  }\n  const tocTree = useTocTree(\n    slides,\n    currentSlideNo,\n    currentSlideRoute\n  );\n  async function next() {\n    clicksDirection.value = 1;\n    if (clicksTotal.value <= queryClicks.value)\n      await nextSlide();\n    else\n      queryClicks.value += 1;\n  }\n  async function prev() {\n    clicksDirection.value = -1;\n    if (queryClicks.value <= clicksStart.value)\n      await prevSlide(true);\n    else\n      queryClicks.value -= 1;\n  }\n  async function nextSlide(lastClicks = false) {\n    clicksDirection.value = 1;\n    if (currentSlideNo.value < slides.value.length) {\n      await go(\n        currentSlideNo.value + 1,\n        lastClicks && !isPrint.value ? CLICKS_MAX : void 0\n      );\n    }\n  }\n  async function prevSlide(lastClicks = false) {\n    clicksDirection.value = -1;\n    if (currentSlideNo.value > 1) {\n      await go(\n        currentSlideNo.value - 1,\n        lastClicks && !isPrint.value ? CLICKS_MAX : void 0\n      );\n    }\n  }\n  function goFirst() {\n    return go(1);\n  }\n  function goLast() {\n    return go(total.value);\n  }\n  async function go(no, clicks2 = 0, force = false) {\n    hmrSkipTransition.value = false;\n    const pageChanged = currentSlideNo.value !== no;\n    const clicksChanged = clicks2 !== queryClicks.value;\n    const meta = getSlide(no)?.meta;\n    const clicksStart2 = meta?.slide?.frontmatter.clicksStart ?? 0;\n    clicks2 = clamp(clicks2, clicksStart2, meta?.__clicksContext?.total ?? CLICKS_MAX);\n    if (force || pageChanged || clicksChanged) {\n      await router?.push({\n        path: getSlidePath(no, isPresenter.value, router.currentRoute.value.name === \"export\"),\n        query: {\n          ...router.currentRoute.value.query,\n          clicks: clicks2 === 0 ? void 0 : clicks2.toString(),\n          embedded: location.search.includes(\"embedded\") ? \"true\" : void 0\n        }\n      });\n    }\n  }\n  function enterPresenter() {\n    router?.push({\n      path: getSlidePath(currentSlideNo.value, true),\n      query: { ...router.currentRoute.value.query }\n    });\n  }\n  function exitPresenter() {\n    router?.push({\n      path: getSlidePath(currentSlideNo.value, false),\n      query: { ...router.currentRoute.value.query }\n    });\n  }\n  return {\n    slides,\n    total,\n    currentPath,\n    currentSlideNo,\n    currentPage: currentSlideNo,\n    currentSlideRoute,\n    currentLayout,\n    currentTransition,\n    clicksDirection,\n    nextRoute,\n    prevRoute,\n    clicksContext,\n    clicks,\n    clicksStart,\n    clicksTotal,\n    hasNext,\n    hasPrev,\n    tocTree,\n    navDirection,\n    openInEditor,\n    next,\n    prev,\n    go,\n    goLast,\n    goFirst,\n    nextSlide,\n    prevSlide,\n    enterPresenter,\n    exitPresenter\n  };\n}\nexport function useFixedNav(currentSlideRoute, clicksContext) {\n  const noop = async () => {\n  };\n  return {\n    ...useNavBase(\n      computed(() => currentSlideRoute),\n      computed(() => clicksContext),\n      ref(CLICKS_MAX),\n      ref(false),\n      ref(false)\n    ),\n    next: noop,\n    prev: noop,\n    nextSlide: noop,\n    prevSlide: noop,\n    goFirst: noop,\n    goLast: noop,\n    go: noop\n  };\n}\nconst useNavState = createSharedComposable(() => {\n  const router = useRouter();\n  const currentRoute = useRoute();\n  const query = computed(() => {\n    router.currentRoute.value.query;\n    return new URLSearchParams(location.search);\n  });\n  const isPrintMode = computed(() => query.value.has(\"print\") || currentRoute.name === \"export\");\n  const isPrintWithClicks = ref(query.value.get(\"print\") === \"clicks\");\n  const isEmbedded = computed(() => query.value.has(\"embedded\"));\n  const isPlaying = computed(() => currentRoute.name === \"play\");\n  const isPresenter = computed(() => currentRoute.name === \"presenter\");\n  const isNotesViewer = computed(() => currentRoute.name === \"notes\");\n  const isPresenterAvailable = computed(() => !isPresenter.value && (!configs.remote || query.value.get(\"password\") === configs.remote));\n  const hasPrimarySlide = computed(() => !!currentRoute.params.no);\n  const currentSlideNo = computed(() => hasPrimarySlide.value ? getSlide(currentRoute.params.no)?.no ?? 1 : 1);\n  const currentSlideRoute = computed(() => slides.value[currentSlideNo.value - 1]);\n  const printRange = ref(parseRangeString(slides.value.length, currentRoute.query.range));\n  const queryClicksRaw = useRouteQuery(\"clicks\", \"0\");\n  const clicksContext = computed(() => getPrimaryClicks(currentSlideRoute.value));\n  const queryClicks = computed({\n    get() {\n      let v = +(queryClicksRaw.value || 0);\n      if (Number.isNaN(v))\n        v = 0;\n      return v;\n    },\n    set(v) {\n      hmrSkipTransition.value = false;\n      queryClicksRaw.value = v.toString();\n    }\n  });\n  function getPrimaryClicks(route) {\n    if (route?.meta?.__clicksContext)\n      return route.meta.__clicksContext;\n    const thisNo = route.no;\n    const context = createClicksContextBase(\n      computed({\n        get() {\n          if (currentSlideNo.value === thisNo)\n            return Math.max(+(queryClicksRaw.value ?? 0), context.clicksStart);\n          else if (currentSlideNo.value > thisNo)\n            return CLICKS_MAX;\n          else\n            return context.clicksStart;\n        },\n        set(v) {\n          if (currentSlideNo.value === thisNo)\n            queryClicksRaw.value = v.toString();\n        }\n      }),\n      route?.meta.slide?.frontmatter.clicksStart ?? 0,\n      route?.meta.clicks\n    );\n    if (route?.meta)\n      route.meta.__clicksContext = context;\n    return context;\n  }\n  return {\n    router,\n    currentRoute: computed(() => currentRoute),\n    isPrintMode,\n    isPrintWithClicks,\n    isEmbedded,\n    isPlaying,\n    isPresenter,\n    isNotesViewer,\n    isPresenterAvailable,\n    hasPrimarySlide,\n    currentSlideNo,\n    currentSlideRoute,\n    clicksContext,\n    queryClicksRaw,\n    queryClicks,\n    printRange,\n    getPrimaryClicks\n  };\n});\nexport const useNav = createSharedComposable(() => {\n  const state = useNavState();\n  const router = useRouter();\n  const nav = useNavBase(\n    state.currentSlideRoute,\n    state.clicksContext,\n    state.queryClicks,\n    state.isPresenter,\n    state.isPrintMode,\n    router\n  );\n  watch(\n    [nav.total, state.currentRoute],\n    async () => {\n      const no = state.currentRoute.value.params.no;\n      if (state.hasPrimarySlide.value && !getSlide(no)) {\n        if (no && no !== \"index.html\") {\n          await nav.go(nav.total.value, 0, true);\n        } else {\n          await nav.go(1, 0, true);\n        }\n      }\n    },\n    { flush: \"pre\", immediate: true }\n  );\n  return {\n    ...nav,\n    ...state\n  };\n});\n",
      "start": 1743409708470,
      "end": 1743409708573,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/Users/stevenhill/gce_git_tutorial/node_modules/@slidev/client/composables/useNav.ts"
        ],
        "sourcesContent": [
          "import type { ClicksContext, SlideRoute, TocItem } from '@slidev/types'\nimport type { ComputedRef, Ref, TransitionGroupProps, WritableComputedRef } from 'vue'\nimport type { RouteLocationNormalized, Router } from 'vue-router'\nimport { slides } from '#slidev/slides'\nimport { clamp } from '@antfu/utils'\nimport { parseRangeString } from '@slidev/parser/utils'\nimport { createSharedComposable } from '@vueuse/core'\nimport { computed, ref, watch } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\nimport { CLICKS_MAX } from '../constants'\nimport { configs } from '../env'\nimport { useRouteQuery } from '../logic/route'\nimport { getSlide, getSlidePath } from '../logic/slides'\nimport { getCurrentTransition } from '../logic/transition'\nimport { hmrSkipTransition } from '../state'\nimport { createClicksContextBase } from './useClicks'\nimport { useTocTree } from './useTocTree'\n\nexport interface SlidevContextNav {\n  slides: Ref<SlideRoute[]>\n  total: ComputedRef<number>\n\n  currentPath: ComputedRef<string>\n  currentPage: ComputedRef<number>\n  currentSlideNo: ComputedRef<number>\n  currentSlideRoute: ComputedRef<SlideRoute>\n  currentTransition: ComputedRef<TransitionGroupProps | undefined>\n  currentLayout: ComputedRef<string>\n\n  nextRoute: ComputedRef<SlideRoute>\n  prevRoute: ComputedRef<SlideRoute>\n  hasNext: ComputedRef<boolean>\n  hasPrev: ComputedRef<boolean>\n\n  clicksContext: ComputedRef<ClicksContext>\n  clicks: ComputedRef<number>\n  clicksStart: ComputedRef<number>\n  clicksTotal: ComputedRef<number>\n\n  /** The table of content tree */\n  tocTree: ComputedRef<TocItem[]>\n  /** The direction of the navigation, 1 for forward, -1 for backward */\n  navDirection: Ref<number>\n  /** The direction of the clicks, 1 for forward, -1 for backward */\n  clicksDirection: Ref<number>\n  /** Utility function for open file in editor, only avaible in dev mode  */\n  openInEditor: (url?: string) => Promise<boolean>\n\n  /** Go to next click */\n  next: () => Promise<void>\n  /** Go to previous click */\n  prev: () => Promise<void>\n  /** Go to next slide */\n  nextSlide: (lastClicks?: boolean) => Promise<void>\n  /** Go to previous slide */\n  prevSlide: (lastClicks?: boolean) => Promise<void>\n  /** Go to slide */\n  go: (no: number | string, clicks?: number, force?: boolean) => Promise<void>\n  /** Go to the first slide */\n  goFirst: () => Promise<void>\n  /** Go to the last slide */\n  goLast: () => Promise<void>\n\n  /** Enter presenter mode */\n  enterPresenter: () => void\n  /** Exit presenter mode */\n  exitPresenter: () => void\n}\n\nexport interface SlidevContextNavState {\n  router: Router\n  currentRoute: ComputedRef<RouteLocationNormalized>\n  isPrintMode: ComputedRef<boolean>\n  isPrintWithClicks: Ref<boolean>\n  isEmbedded: ComputedRef<boolean>\n  isPlaying: ComputedRef<boolean>\n  isPresenter: ComputedRef<boolean>\n  isNotesViewer: ComputedRef<boolean>\n  isPresenterAvailable: ComputedRef<boolean>\n  hasPrimarySlide: ComputedRef<boolean>\n  currentSlideNo: ComputedRef<number>\n  currentSlideRoute: ComputedRef<SlideRoute>\n  clicksContext: ComputedRef<ClicksContext>\n  queryClicksRaw: Ref<string>\n  queryClicks: WritableComputedRef<number>\n  printRange: Ref<number[]>\n  getPrimaryClicks: (route: SlideRoute) => ClicksContext\n}\n\nexport interface SlidevContextNavFull extends SlidevContextNav, SlidevContextNavState { }\n\nexport function useNavBase(\n  currentSlideRoute: ComputedRef<SlideRoute>,\n  clicksContext: ComputedRef<ClicksContext>,\n  queryClicks: Ref<number> = ref(0),\n  isPresenter: Ref<boolean>,\n  isPrint: Ref<boolean>,\n  router?: Router,\n): SlidevContextNav {\n  const total = computed(() => slides.value.length)\n\n  const navDirection = ref(0)\n  const clicksDirection = ref(0)\n\n  const currentPath = computed(() => getSlidePath(currentSlideRoute.value, isPresenter.value))\n  const currentSlideNo = computed(() => currentSlideRoute.value.no)\n  const currentLayout = computed(() => currentSlideRoute.value.meta?.layout || (currentSlideNo.value === 1 ? 'cover' : 'default'))\n\n  const clicks = computed(() => clicksContext.value.current)\n  const clicksStart = computed(() => clicksContext.value.clicksStart)\n  const clicksTotal = computed(() => clicksContext.value.total)\n  const nextRoute = computed(() => slides.value[Math.min(slides.value.length, currentSlideNo.value + 1) - 1])\n  const prevRoute = computed(() => slides.value[Math.max(1, currentSlideNo.value - 1) - 1])\n  const hasNext = computed(() => currentSlideNo.value < slides.value.length || clicks.value < clicksTotal.value)\n  const hasPrev = computed(() => currentSlideNo.value > 1 || clicks.value > 0)\n\n  const currentTransition = computed(() => isPrint.value ? undefined : getCurrentTransition(navDirection.value, currentSlideRoute.value, prevRoute.value))\n\n  watch(currentSlideRoute, (next, prev) => {\n    navDirection.value = next.no - prev.no\n  })\n\n  async function openInEditor(url?: string) {\n    if (!__DEV__)\n      return false\n    if (url == null) {\n      const slide = currentSlideRoute.value?.meta?.slide\n      if (!slide)\n        return false\n      url = `${slide.filepath}:${slide.start}`\n    }\n    await fetch(`/__open-in-editor?file=${encodeURIComponent(url)}`)\n    return true\n  }\n\n  const tocTree = useTocTree(\n    slides,\n    currentSlideNo,\n    currentSlideRoute,\n  )\n\n  async function next() {\n    clicksDirection.value = 1\n    if (clicksTotal.value <= queryClicks.value)\n      await nextSlide()\n    else\n      queryClicks.value += 1\n  }\n\n  async function prev() {\n    clicksDirection.value = -1\n    if (queryClicks.value <= clicksStart.value)\n      await prevSlide(true)\n    else\n      queryClicks.value -= 1\n  }\n\n  async function nextSlide(lastClicks = false) {\n    clicksDirection.value = 1\n    if (currentSlideNo.value < slides.value.length) {\n      await go(\n        currentSlideNo.value + 1,\n        lastClicks && !isPrint.value ? CLICKS_MAX : undefined,\n      )\n    }\n  }\n\n  async function prevSlide(lastClicks = false) {\n    clicksDirection.value = -1\n    if (currentSlideNo.value > 1) {\n      await go(\n        currentSlideNo.value - 1,\n        lastClicks && !isPrint.value ? CLICKS_MAX : undefined,\n      )\n    }\n  }\n\n  function goFirst() {\n    return go(1)\n  }\n\n  function goLast() {\n    return go(total.value)\n  }\n\n  async function go(no: number | string, clicks: number = 0, force = false) {\n    hmrSkipTransition.value = false\n    const pageChanged = currentSlideNo.value !== no\n    const clicksChanged = clicks !== queryClicks.value\n    const meta = getSlide(no)?.meta\n    const clicksStart = meta?.slide?.frontmatter.clicksStart ?? 0\n    clicks = clamp(clicks, clicksStart, meta?.__clicksContext?.total ?? CLICKS_MAX)\n    if (force || pageChanged || clicksChanged) {\n      await router?.push({\n        path: getSlidePath(no, isPresenter.value, router.currentRoute.value.name === 'export'),\n        query: {\n          ...router.currentRoute.value.query,\n          clicks: clicks === 0 ? undefined : clicks.toString(),\n          embedded: location.search.includes('embedded') ? 'true' : undefined,\n        },\n      })\n    }\n  }\n\n  function enterPresenter() {\n    router?.push({\n      path: getSlidePath(currentSlideNo.value, true),\n      query: { ...router.currentRoute.value.query },\n    })\n  }\n  function exitPresenter() {\n    router?.push({\n      path: getSlidePath(currentSlideNo.value, false),\n      query: { ...router.currentRoute.value.query },\n    })\n  }\n\n  return {\n    slides,\n    total,\n    currentPath,\n    currentSlideNo,\n    currentPage: currentSlideNo,\n    currentSlideRoute,\n    currentLayout,\n    currentTransition,\n    clicksDirection,\n    nextRoute,\n    prevRoute,\n    clicksContext,\n    clicks,\n    clicksStart,\n    clicksTotal,\n    hasNext,\n    hasPrev,\n    tocTree,\n    navDirection,\n    openInEditor,\n    next,\n    prev,\n    go,\n    goLast,\n    goFirst,\n    nextSlide,\n    prevSlide,\n    enterPresenter,\n    exitPresenter,\n  }\n}\n\nexport function useFixedNav(\n  currentSlideRoute: SlideRoute,\n  clicksContext: ClicksContext,\n): SlidevContextNav {\n  const noop = async () => { }\n  return {\n    ...useNavBase(\n      computed(() => currentSlideRoute),\n      computed(() => clicksContext),\n      ref(CLICKS_MAX),\n      ref(false),\n      ref(false),\n    ),\n    next: noop,\n    prev: noop,\n    nextSlide: noop,\n    prevSlide: noop,\n    goFirst: noop,\n    goLast: noop,\n    go: noop,\n  }\n}\n\nconst useNavState = createSharedComposable((): SlidevContextNavState => {\n  const router = useRouter()\n  const currentRoute = useRoute()\n\n  const query = computed(() => {\n    // eslint-disable-next-line ts/no-unused-expressions\n    router.currentRoute.value.query\n    return new URLSearchParams(location.search)\n  })\n  const isPrintMode = computed(() => query.value.has('print') || currentRoute.name === 'export')\n  const isPrintWithClicks = ref(query.value.get('print') === 'clicks')\n  const isEmbedded = computed(() => query.value.has('embedded'))\n  const isPlaying = computed(() => currentRoute.name === 'play')\n  const isPresenter = computed(() => currentRoute.name === 'presenter')\n  const isNotesViewer = computed(() => currentRoute.name === 'notes')\n  const isPresenterAvailable = computed(() => !isPresenter.value && (!configs.remote || query.value.get('password') === configs.remote))\n  const hasPrimarySlide = computed(() => !!currentRoute.params.no)\n  const currentSlideNo = computed(() => hasPrimarySlide.value ? getSlide(currentRoute.params.no as string)?.no ?? 1 : 1)\n  const currentSlideRoute = computed(() => slides.value[currentSlideNo.value - 1])\n  const printRange = ref(parseRangeString(slides.value.length, currentRoute.query.range as string | undefined))\n\n  const queryClicksRaw = useRouteQuery<string>('clicks', '0')\n\n  const clicksContext = computed(() => getPrimaryClicks(currentSlideRoute.value))\n\n  const queryClicks = computed({\n    get() {\n      let v = +(queryClicksRaw.value || 0)\n      if (Number.isNaN(v))\n        v = 0\n      return v\n    },\n    set(v) {\n      hmrSkipTransition.value = false\n      queryClicksRaw.value = v.toString()\n    },\n  })\n\n  function getPrimaryClicks(\n    route: SlideRoute,\n  ): ClicksContext {\n    if (route?.meta?.__clicksContext)\n      return route.meta.__clicksContext\n\n    const thisNo = route.no\n    const context = createClicksContextBase(\n      computed({\n        get() {\n          if (currentSlideNo.value === thisNo)\n            return Math.max(+(queryClicksRaw.value ?? 0), context.clicksStart)\n          else if (currentSlideNo.value > thisNo)\n            return CLICKS_MAX\n          else\n            return context.clicksStart\n        },\n        set(v) {\n          if (currentSlideNo.value === thisNo)\n            queryClicksRaw.value = v.toString()\n        },\n      }),\n      route?.meta.slide?.frontmatter.clicksStart ?? 0,\n      route?.meta.clicks,\n    )\n\n    if (route?.meta)\n      route.meta.__clicksContext = context\n\n    return context\n  }\n\n  return {\n    router,\n    currentRoute: computed(() => currentRoute),\n    isPrintMode,\n    isPrintWithClicks,\n    isEmbedded,\n    isPlaying,\n    isPresenter,\n    isNotesViewer,\n    isPresenterAvailable,\n    hasPrimarySlide,\n    currentSlideNo,\n    currentSlideRoute,\n    clicksContext,\n    queryClicksRaw,\n    queryClicks,\n    printRange,\n    getPrimaryClicks,\n  }\n})\n\nexport const useNav = createSharedComposable((): SlidevContextNavFull => {\n  const state = useNavState()\n  const router = useRouter()\n\n  const nav = useNavBase(\n    state.currentSlideRoute,\n    state.clicksContext,\n    state.queryClicks,\n    state.isPresenter,\n    state.isPrintMode,\n    router,\n  )\n\n  watch(\n    [nav.total, state.currentRoute],\n    async () => {\n      const no = state.currentRoute.value.params.no as string\n      if (state.hasPrimarySlide.value && !getSlide(no)) {\n        if (no && no !== 'index.html') {\n          // The current slide may has been removed. Redirect to the last slide.\n          await nav.go(nav.total.value, 0, true)\n        }\n        else {\n          // Redirect to the first slide\n          await nav.go(1, 0, true)\n        }\n      }\n    },\n    { flush: 'pre', immediate: true },\n  )\n\n  return {\n    ...nav,\n    ...state,\n  }\n})\n"
        ],
        "mappings": "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",
        "names": [
          "next",
          "prev",
          "clicks",
          "clicksStart"
        ]
      }
    },
    {
      "name": "vite:json",
      "start": 1743409708573,
      "end": 1743409708573,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1743409708573,
      "end": 1743409708573,
      "order": "normal"
    },
    {
      "name": "slidev:layout-wrapper",
      "start": 1743409708573,
      "end": 1743409708573,
      "order": "normal"
    },
    {
      "name": "slidev:context-injection",
      "start": 1743409708573,
      "end": 1743409708573,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1743409708573,
      "end": 1743409708573,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1743409708573,
      "end": 1743409708573,
      "order": "normal"
    },
    {
      "name": "slidev:hmr-patch",
      "start": 1743409708573,
      "end": 1743409708573,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:undefined",
      "start": 1743409708573,
      "end": 1743409708573,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { slides } from \"#slidev/slides\";\nimport { clamp } from \"@antfu/utils\";\nimport { parseRangeString } from \"@slidev/parser/utils\";\nimport { createSharedComposable } from \"@vueuse/core\";\nimport { computed, ref, watch } from \"vue\";\nimport { useRoute, useRouter } from \"vue-router\";\nimport { CLICKS_MAX } from \"../constants\";\nimport { configs } from \"../env\";\nimport { useRouteQuery } from \"../logic/route\";\nimport { getSlide, getSlidePath } from \"../logic/slides\";\nimport { getCurrentTransition } from \"../logic/transition\";\nimport { hmrSkipTransition } from \"../state\";\nimport { createClicksContextBase } from \"./useClicks\";\nimport { useTocTree } from \"./useTocTree\";\nexport function useNavBase(currentSlideRoute, clicksContext, queryClicks = ref(0), isPresenter, isPrint, router) {\n  const total = computed(() => slides.value.length);\n  const navDirection = ref(0);\n  const clicksDirection = ref(0);\n  const currentPath = computed(() => getSlidePath(currentSlideRoute.value, isPresenter.value));\n  const currentSlideNo = computed(() => currentSlideRoute.value.no);\n  const currentLayout = computed(() => currentSlideRoute.value.meta?.layout || (currentSlideNo.value === 1 ? \"cover\" : \"default\"));\n  const clicks = computed(() => clicksContext.value.current);\n  const clicksStart = computed(() => clicksContext.value.clicksStart);\n  const clicksTotal = computed(() => clicksContext.value.total);\n  const nextRoute = computed(() => slides.value[Math.min(slides.value.length, currentSlideNo.value + 1) - 1]);\n  const prevRoute = computed(() => slides.value[Math.max(1, currentSlideNo.value - 1) - 1]);\n  const hasNext = computed(() => currentSlideNo.value < slides.value.length || clicks.value < clicksTotal.value);\n  const hasPrev = computed(() => currentSlideNo.value > 1 || clicks.value > 0);\n  const currentTransition = computed(() => isPrint.value ? void 0 : getCurrentTransition(navDirection.value, currentSlideRoute.value, prevRoute.value));\n  watch(currentSlideRoute, (next2, prev2) => {\n    navDirection.value = next2.no - prev2.no;\n  });\n  async function openInEditor(url) {\n    if (true)\n      return false;\n    if (url == null) {\n      const slide = currentSlideRoute.value?.meta?.slide;\n      if (!slide)\n        return false;\n      url = `${slide.filepath}:${slide.start}`;\n    }\n    await fetch(`/__open-in-editor?file=${encodeURIComponent(url)}`);\n    return true;\n  }\n  const tocTree = useTocTree(\n    slides,\n    currentSlideNo,\n    currentSlideRoute\n  );\n  async function next() {\n    clicksDirection.value = 1;\n    if (clicksTotal.value <= queryClicks.value)\n      await nextSlide();\n    else\n      queryClicks.value += 1;\n  }\n  async function prev() {\n    clicksDirection.value = -1;\n    if (queryClicks.value <= clicksStart.value)\n      await prevSlide(true);\n    else\n      queryClicks.value -= 1;\n  }\n  async function nextSlide(lastClicks = false) {\n    clicksDirection.value = 1;\n    if (currentSlideNo.value < slides.value.length) {\n      await go(\n        currentSlideNo.value + 1,\n        lastClicks && !isPrint.value ? CLICKS_MAX : void 0\n      );\n    }\n  }\n  async function prevSlide(lastClicks = false) {\n    clicksDirection.value = -1;\n    if (currentSlideNo.value > 1) {\n      await go(\n        currentSlideNo.value - 1,\n        lastClicks && !isPrint.value ? CLICKS_MAX : void 0\n      );\n    }\n  }\n  function goFirst() {\n    return go(1);\n  }\n  function goLast() {\n    return go(total.value);\n  }\n  async function go(no, clicks2 = 0, force = false) {\n    hmrSkipTransition.value = false;\n    const pageChanged = currentSlideNo.value !== no;\n    const clicksChanged = clicks2 !== queryClicks.value;\n    const meta = getSlide(no)?.meta;\n    const clicksStart2 = meta?.slide?.frontmatter.clicksStart ?? 0;\n    clicks2 = clamp(clicks2, clicksStart2, meta?.__clicksContext?.total ?? CLICKS_MAX);\n    if (force || pageChanged || clicksChanged) {\n      await router?.push({\n        path: getSlidePath(no, isPresenter.value, router.currentRoute.value.name === \"export\"),\n        query: {\n          ...router.currentRoute.value.query,\n          clicks: clicks2 === 0 ? void 0 : clicks2.toString(),\n          embedded: location.search.includes(\"embedded\") ? \"true\" : void 0\n        }\n      });\n    }\n  }\n  function enterPresenter() {\n    router?.push({\n      path: getSlidePath(currentSlideNo.value, true),\n      query: { ...router.currentRoute.value.query }\n    });\n  }\n  function exitPresenter() {\n    router?.push({\n      path: getSlidePath(currentSlideNo.value, false),\n      query: { ...router.currentRoute.value.query }\n    });\n  }\n  return {\n    slides,\n    total,\n    currentPath,\n    currentSlideNo,\n    currentPage: currentSlideNo,\n    currentSlideRoute,\n    currentLayout,\n    currentTransition,\n    clicksDirection,\n    nextRoute,\n    prevRoute,\n    clicksContext,\n    clicks,\n    clicksStart,\n    clicksTotal,\n    hasNext,\n    hasPrev,\n    tocTree,\n    navDirection,\n    openInEditor,\n    next,\n    prev,\n    go,\n    goLast,\n    goFirst,\n    nextSlide,\n    prevSlide,\n    enterPresenter,\n    exitPresenter\n  };\n}\nexport function useFixedNav(currentSlideRoute, clicksContext) {\n  const noop = async () => {\n  };\n  return {\n    ...useNavBase(\n      computed(() => currentSlideRoute),\n      computed(() => clicksContext),\n      ref(CLICKS_MAX),\n      ref(false),\n      ref(false)\n    ),\n    next: noop,\n    prev: noop,\n    nextSlide: noop,\n    prevSlide: noop,\n    goFirst: noop,\n    goLast: noop,\n    go: noop\n  };\n}\nconst useNavState = createSharedComposable(() => {\n  const router = useRouter();\n  const currentRoute = useRoute();\n  const query = computed(() => {\n    router.currentRoute.value.query;\n    return new URLSearchParams(location.search);\n  });\n  const isPrintMode = computed(() => query.value.has(\"print\") || currentRoute.name === \"export\");\n  const isPrintWithClicks = ref(query.value.get(\"print\") === \"clicks\");\n  const isEmbedded = computed(() => query.value.has(\"embedded\"));\n  const isPlaying = computed(() => currentRoute.name === \"play\");\n  const isPresenter = computed(() => currentRoute.name === \"presenter\");\n  const isNotesViewer = computed(() => currentRoute.name === \"notes\");\n  const isPresenterAvailable = computed(() => !isPresenter.value && (!configs.remote || query.value.get(\"password\") === configs.remote));\n  const hasPrimarySlide = computed(() => !!currentRoute.params.no);\n  const currentSlideNo = computed(() => hasPrimarySlide.value ? getSlide(currentRoute.params.no)?.no ?? 1 : 1);\n  const currentSlideRoute = computed(() => slides.value[currentSlideNo.value - 1]);\n  const printRange = ref(parseRangeString(slides.value.length, currentRoute.query.range));\n  const queryClicksRaw = useRouteQuery(\"clicks\", \"0\");\n  const clicksContext = computed(() => getPrimaryClicks(currentSlideRoute.value));\n  const queryClicks = computed({\n    get() {\n      let v = +(queryClicksRaw.value || 0);\n      if (Number.isNaN(v))\n        v = 0;\n      return v;\n    },\n    set(v) {\n      hmrSkipTransition.value = false;\n      queryClicksRaw.value = v.toString();\n    }\n  });\n  function getPrimaryClicks(route) {\n    if (route?.meta?.__clicksContext)\n      return route.meta.__clicksContext;\n    const thisNo = route.no;\n    const context = createClicksContextBase(\n      computed({\n        get() {\n          if (currentSlideNo.value === thisNo)\n            return Math.max(+(queryClicksRaw.value ?? 0), context.clicksStart);\n          else if (currentSlideNo.value > thisNo)\n            return CLICKS_MAX;\n          else\n            return context.clicksStart;\n        },\n        set(v) {\n          if (currentSlideNo.value === thisNo)\n            queryClicksRaw.value = v.toString();\n        }\n      }),\n      route?.meta.slide?.frontmatter.clicksStart ?? 0,\n      route?.meta.clicks\n    );\n    if (route?.meta)\n      route.meta.__clicksContext = context;\n    return context;\n  }\n  return {\n    router,\n    currentRoute: computed(() => currentRoute),\n    isPrintMode,\n    isPrintWithClicks,\n    isEmbedded,\n    isPlaying,\n    isPresenter,\n    isNotesViewer,\n    isPresenterAvailable,\n    hasPrimarySlide,\n    currentSlideNo,\n    currentSlideRoute,\n    clicksContext,\n    queryClicksRaw,\n    queryClicks,\n    printRange,\n    getPrimaryClicks\n  };\n});\nexport const useNav = createSharedComposable(() => {\n  const state = useNavState();\n  const router = useRouter();\n  const nav = useNavBase(\n    state.currentSlideRoute,\n    state.clicksContext,\n    state.queryClicks,\n    state.isPresenter,\n    state.isPrintMode,\n    router\n  );\n  watch(\n    [nav.total, state.currentRoute],\n    async () => {\n      const no = state.currentRoute.value.params.no;\n      if (state.hasPrimarySlide.value && !getSlide(no)) {\n        if (no && no !== \"index.html\") {\n          await nav.go(nav.total.value, 0, true);\n        } else {\n          await nav.go(1, 0, true);\n        }\n      }\n    },\n    { flush: \"pre\", immediate: true }\n  );\n  return {\n    ...nav,\n    ...state\n  };\n});\n",
      "start": 1743409708573,
      "end": 1743409708709,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1743409708709,
      "end": 1743409708709,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1743409708709,
      "end": 1743409708709,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1743409708709,
      "end": 1743409708709,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1743409708709,
      "end": 1743409708709,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1743409708709,
      "end": 1743409708709,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1743409708709,
      "end": 1743409708709,
      "order": "normal"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1743409708709,
      "end": 1743409708709,
      "order": "post"
    },
    {
      "name": "unocss:transformers:post",
      "start": 1743409708709,
      "end": 1743409708709,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1743409708709,
      "end": 1743409708709,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1743409708709,
      "end": 1743409708709,
      "order": "normal"
    }
  ]
}
