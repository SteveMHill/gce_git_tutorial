{
  "resolvedId": "/Users/stevenhill/gce_git_tutorial/node_modules/@drauu/core/dist/index.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a2, b2) => {\n  for (var prop in b2 || (b2 = {}))\n    if (__hasOwnProp.call(b2, prop))\n      __defNormalProp(a2, prop, b2[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b2)) {\n      if (__propIsEnum.call(b2, prop))\n        __defNormalProp(a2, prop, b2[prop]);\n    }\n  return a2;\n};\n\n// ../../node_modules/.pnpm/nanoevents@9.1.0/node_modules/nanoevents/index.js\nvar createNanoEvents = () => ({\n  emit(event, ...args) {\n    for (let callbacks = this.events[event] || [], i = 0, length = callbacks.length; i < length; i++) {\n      callbacks[i](...args);\n    }\n  },\n  events: {},\n  on(event, cb) {\n    var _a;\n    ;\n    ((_a = this.events)[event] || (_a[event] = [])).push(cb);\n    return () => {\n      var _a2;\n      this.events[event] = (_a2 = this.events[event]) == null ? void 0 : _a2.filter((i) => cb !== i);\n    };\n  }\n});\n\n// src/utils/index.ts\nfunction numSort(a2, b2) {\n  return a2 - b2;\n}\nfunction getSymbol(a2) {\n  if (a2 < 0)\n    return -1;\n  return 1;\n}\nfunction splitNum(a2) {\n  return [Math.abs(a2), getSymbol(a2)];\n}\nfunction guid() {\n  const S4 = () => ((1 + Math.random()) * 65536 | 0).toString(16).substring(1);\n  return `${S4() + S4()}-${S4()}-${S4()}-${S4()}-${S4()}${S4()}${S4()}`;\n}\nvar DECIMAL = 2;\nvar D = DECIMAL;\n\n// src/utils/dom.ts\nfunction createArrowHead(id, fill) {\n  const defs = document.createElementNS(\"http://www.w3.org/2000/svg\", \"defs\");\n  const marker = document.createElementNS(\"http://www.w3.org/2000/svg\", \"marker\");\n  const head = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n  head.setAttribute(\"fill\", fill);\n  marker.setAttribute(\"id\", id);\n  marker.setAttribute(\"viewBox\", \"0 -5 10 10\");\n  marker.setAttribute(\"refX\", \"5\");\n  marker.setAttribute(\"refY\", \"0\");\n  marker.setAttribute(\"markerWidth\", \"4\");\n  marker.setAttribute(\"markerHeight\", \"4\");\n  marker.setAttribute(\"orient\", \"auto\");\n  head.setAttribute(\"d\", \"M0,-5L10,0L0,5\");\n  marker.appendChild(head);\n  defs.appendChild(marker);\n  return defs;\n}\n\n// src/utils/simplify.ts\nfunction getSqDist(p1, p2) {\n  const dx = p1.x - p2.x;\n  const dy = p1.y - p2.y;\n  return dx * dx + dy * dy;\n}\nfunction getSqSegDist(p, p1, p2) {\n  let x = p1.x;\n  let y = p1.y;\n  let dx = p2.x - x;\n  let dy = p2.y - y;\n  if (dx !== 0 || dy !== 0) {\n    const t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      x = p2.x;\n      y = p2.y;\n    } else if (t > 0) {\n      x += dx * t;\n      y += dy * t;\n    }\n  }\n  dx = p.x - x;\n  dy = p.y - y;\n  return dx * dx + dy * dy;\n}\nfunction simplifyRadialDist(points, sqTolerance) {\n  let prevPoint = points[0];\n  const newPoints = [prevPoint];\n  let point;\n  for (let i = 1, len = points.length; i < len; i++) {\n    point = points[i];\n    if (getSqDist(point, prevPoint) > sqTolerance) {\n      newPoints.push(point);\n      prevPoint = point;\n    }\n  }\n  if (prevPoint !== point && point)\n    newPoints.push(point);\n  return newPoints;\n}\nfunction simplifyDPStep(points, first, last, sqTolerance, simplified) {\n  let maxSqDist = sqTolerance;\n  let index = 0;\n  for (let i = first + 1; i < last; i++) {\n    const sqDist = getSqSegDist(points[i], points[first], points[last]);\n    if (sqDist > maxSqDist) {\n      index = i;\n      maxSqDist = sqDist;\n    }\n  }\n  if (maxSqDist > sqTolerance) {\n    if (index - first > 1)\n      simplifyDPStep(points, first, index, sqTolerance, simplified);\n    simplified.push(points[index]);\n    if (last - index > 1)\n      simplifyDPStep(points, index, last, sqTolerance, simplified);\n  }\n}\nfunction simplifyDouglasPeucker(points, sqTolerance) {\n  const last = points.length - 1;\n  const simplified = [points[0]];\n  simplifyDPStep(points, 0, last, sqTolerance, simplified);\n  simplified.push(points[last]);\n  return simplified;\n}\nfunction simplify(points, tolerance, highestQuality = false) {\n  if (points.length <= 2)\n    return points;\n  const sqTolerance = tolerance !== void 0 ? tolerance * tolerance : 1;\n  points = highestQuality ? points : simplifyRadialDist(points, sqTolerance);\n  points = simplifyDouglasPeucker(points, sqTolerance);\n  return points;\n}\n\n// src/models/base.ts\nvar BaseModel = class {\n  constructor(drauu) {\n    this.drauu = drauu;\n    this.event = void 0;\n    this.point = void 0;\n    this.start = void 0;\n    this.el = null;\n  }\n  onSelected(_el) {\n  }\n  onUnselected() {\n  }\n  onStart(_point) {\n    return void 0;\n  }\n  onMove(_point) {\n    return false;\n  }\n  onEnd(_point) {\n    return void 0;\n  }\n  get brush() {\n    return this.drauu.brush;\n  }\n  get shiftPressed() {\n    return this.drauu.shiftPressed;\n  }\n  get altPressed() {\n    return this.drauu.altPressed;\n  }\n  get svgElement() {\n    return this.drauu.el;\n  }\n  getMousePosition(event) {\n    var _a, _b, _c, _d;\n    const el = this.drauu.el;\n    const cssZoom = (_a = this.drauu.options.cssZoom) != null ? _a : 1;\n    const scale = (_b = this.drauu.options.coordinateScale) != null ? _b : 1;\n    const offset = (_c = this.drauu.options.offset) != null ? _c : { x: 0, y: 0 };\n    if (this.drauu.options.coordinateTransform === false) {\n      const rect = this.drauu.el.getBoundingClientRect();\n      return {\n        x: (event.pageX / cssZoom - rect.left + offset.x) * scale,\n        y: (event.pageY / cssZoom - rect.top + offset.y) * scale,\n        pressure: event.pressure\n      };\n    } else {\n      const point = this.drauu.svgPoint;\n      point.x = event.clientX / cssZoom + offset.x;\n      point.y = event.clientY / cssZoom + offset.y;\n      const loc = point.matrixTransform((_d = el.getScreenCTM()) == null ? void 0 : _d.inverse());\n      return {\n        x: loc.x * scale,\n        y: loc.y * scale,\n        pressure: event.pressure\n      };\n    }\n  }\n  createElement(name, overrides) {\n    var _a;\n    const el = document.createElementNS(\"http://www.w3.org/2000/svg\", name);\n    const brush = overrides ? __spreadValues(__spreadValues({}, this.brush), overrides) : this.brush;\n    el.setAttribute(\"fill\", (_a = brush.fill) != null ? _a : \"transparent\");\n    el.setAttribute(\"stroke\", brush.color);\n    el.setAttribute(\"stroke-width\", brush.size.toString());\n    el.setAttribute(\"stroke-linecap\", \"round\");\n    if (brush.dasharray)\n      el.setAttribute(\"stroke-dasharray\", brush.dasharray);\n    return el;\n  }\n  attr(name, value) {\n    this.el.setAttribute(name, typeof value === \"string\" ? value : value.toFixed(D));\n  }\n  _setEvent(event) {\n    this.event = event;\n    this.point = this.getMousePosition(event);\n  }\n  /**\n   * @internal\n   */\n  _eventDown(event) {\n    this._setEvent(event);\n    this.start = this.point;\n    return this.onStart(this.point);\n  }\n  /**\n   * @internal\n   */\n  _eventMove(event) {\n    this._setEvent(event);\n    return this.onMove(this.point);\n  }\n  /**\n   * @internal\n   */\n  _eventUp(event) {\n    this._setEvent(event);\n    return this.onEnd(this.point);\n  }\n};\n\n// src/models/draw.ts\nvar DrawModel = class _DrawModel extends BaseModel {\n  constructor() {\n    super(...arguments);\n    this.points = [];\n    this.count = 0;\n  }\n  onStart(point) {\n    this.el = this.createElement(\"path\", { fill: \"transparent\" });\n    this.points = [point];\n    if (this.brush.arrowEnd) {\n      this.arrowId = guid();\n      const head = createArrowHead(this.arrowId, this.brush.color);\n      this.el.appendChild(head);\n    }\n    return this.el;\n  }\n  onMove(point) {\n    if (!this.el)\n      this.onStart(point);\n    if (this.points[this.points.length - 1] !== point) {\n      this.points.push(point);\n      this.count += 1;\n    }\n    if (this.count > 5) {\n      this.points = simplify(this.points, 1, true);\n      this.count = 0;\n    }\n    this.attr(\"d\", _DrawModel.toSvgData(this.points));\n    return true;\n  }\n  onEnd() {\n    const path = this.el;\n    this.el = null;\n    if (!path)\n      return false;\n    path.setAttribute(\"d\", _DrawModel.toSvgData(simplify(this.points, 1, true)));\n    if (!path.getTotalLength()) {\n      const { x, y } = this.points[0];\n      const r = this.brush.size / 2;\n      path.setAttribute(\"d\", `M ${x - r} ${y} a ${r},${r} 0 1,0 ${r * 2},0 a ${r},${r} 0 1,0 ${-r * 2},0`);\n      path.setAttribute(\"fill\", this.brush.color);\n      path.setAttribute(\"stroke-width\", \"0\");\n    }\n    return true;\n  }\n  // https://francoisromain.medium.com/smooth-a-svg-path-with-cubic-bezier-curves-e37b49d46c74\n  static line(a2, b2) {\n    const lengthX = b2.x - a2.x;\n    const lengthY = b2.y - a2.y;\n    return {\n      length: Math.sqrt(lengthX ** 2 + lengthY ** 2),\n      angle: Math.atan2(lengthY, lengthX)\n    };\n  }\n  static controlPoint(current, previous, next, reverse) {\n    const p = previous || current;\n    const n = next || current;\n    const smoothing = 0.2;\n    const o = _DrawModel.line(p, n);\n    const angle = o.angle + (reverse ? Math.PI : 0);\n    const length = o.length * smoothing;\n    const x = current.x + Math.cos(angle) * length;\n    const y = current.y + Math.sin(angle) * length;\n    return { x, y };\n  }\n  static bezierCommand(point, i, points) {\n    const cps = _DrawModel.controlPoint(points[i - 1], points[i - 2], point);\n    const cpe = _DrawModel.controlPoint(point, points[i - 1], points[i + 1], true);\n    return `C ${cps.x.toFixed(D)},${cps.y.toFixed(D)} ${cpe.x.toFixed(D)},${cpe.y.toFixed(D)} ${point.x.toFixed(D)},${point.y.toFixed(D)}`;\n  }\n  static toSvgData(points) {\n    return points.reduce(\n      (acc, point, i, a2) => i === 0 ? `M ${point.x.toFixed(D)},${point.y.toFixed(D)}` : `${acc} ${_DrawModel.bezierCommand(point, i, a2)}`,\n      \"\"\n    );\n  }\n};\n\n// src/models/ellipse.ts\nvar EllipseModel = class extends BaseModel {\n  onStart(point) {\n    this.el = this.createElement(\"ellipse\");\n    this.attr(\"cx\", point.x);\n    this.attr(\"cy\", point.y);\n    return this.el;\n  }\n  onMove(point) {\n    if (!this.el || !this.start)\n      return false;\n    let [dx, sx] = splitNum(point.x - this.start.x);\n    let [dy, sy] = splitNum(point.y - this.start.y);\n    if (this.shiftPressed) {\n      const d = Math.min(dx, dy);\n      dx = d;\n      dy = d;\n    }\n    if (this.altPressed) {\n      this.attr(\"cx\", this.start.x);\n      this.attr(\"cy\", this.start.y);\n      this.attr(\"rx\", dx);\n      this.attr(\"ry\", dy);\n    } else {\n      const [x1, x2] = [this.start.x, this.start.x + dx * sx].sort(numSort);\n      const [y1, y2] = [this.start.y, this.start.y + dy * sy].sort(numSort);\n      this.attr(\"cx\", (x1 + x2) / 2);\n      this.attr(\"cy\", (y1 + y2) / 2);\n      this.attr(\"rx\", (x2 - x1) / 2);\n      this.attr(\"ry\", (y2 - y1) / 2);\n    }\n    return true;\n  }\n  onEnd() {\n    const path = this.el;\n    this.el = null;\n    if (!path)\n      return false;\n    try {\n      if (!path.getTotalLength())\n        return false;\n    } catch (e) {\n      return false;\n    }\n    return true;\n  }\n};\n\n// src/models/eraser.ts\nvar EraserModel = class extends BaseModel {\n  constructor() {\n    super(...arguments);\n    this.pathSubFactor = 20;\n    this.pathFragments = [];\n    this._erased = [];\n  }\n  onSelected(el) {\n    const calculatePathFragments = (children, element) => {\n      if (children && children.length) {\n        for (let i = 0; i < children.length; i++) {\n          const ele = children[i];\n          if (ele.getTotalLength) {\n            const pathLength = ele.getTotalLength();\n            for (let j = 0; j < this.pathSubFactor; j++) {\n              const pos1 = ele.getPointAtLength(pathLength * j / this.pathSubFactor);\n              const pos2 = ele.getPointAtLength(pathLength * (j + 1) / this.pathSubFactor);\n              this.pathFragments.push({\n                x1: pos1.x,\n                x2: pos2.x,\n                y1: pos1.y,\n                y2: pos2.y,\n                segment: j,\n                element: element || ele\n              });\n            }\n          } else {\n            if (ele.children)\n              calculatePathFragments(ele.children, ele);\n          }\n        }\n      }\n    };\n    if (el)\n      calculatePathFragments(el.children);\n  }\n  onUnselected() {\n    this.pathFragments = [];\n  }\n  onStart(point) {\n    this.svgPointPrevious = this.svgElement.createSVGPoint();\n    this.svgPointPrevious.x = point.x;\n    this.svgPointPrevious.y = point.y;\n    return void 0;\n  }\n  onMove(point) {\n    this.svgPointCurrent = this.svgElement.createSVGPoint();\n    this.svgPointCurrent.x = point.x;\n    this.svgPointCurrent.y = point.y;\n    const erased = this.checkAndEraseElement();\n    this.svgPointPrevious = this.svgPointCurrent;\n    return erased;\n  }\n  onEnd() {\n    this.svgPointPrevious = void 0;\n    this.svgPointCurrent = void 0;\n    const erased = this._erased;\n    this._erased = [];\n    return {\n      undo: () => erased.forEach((v) => this.drauu._restoreNode(v)),\n      redo: () => erased.forEach((v) => this.drauu._removeNode(v))\n    };\n  }\n  checkAndEraseElement() {\n    if (this.pathFragments.length) {\n      for (let i = 0; i < this.pathFragments.length; i++) {\n        const segment = this.pathFragments[i];\n        if (this.svgPointPrevious && this.svgPointCurrent) {\n          const line = {\n            x1: this.svgPointPrevious.x,\n            x2: this.svgPointCurrent.x,\n            y1: this.svgPointPrevious.y,\n            y2: this.svgPointCurrent.y\n          };\n          if (this.lineLineIntersect(segment, line)) {\n            this.drauu._removeNode(segment.element);\n            this._erased.push(segment.element);\n          }\n        }\n      }\n    }\n    if (this._erased.length)\n      this.pathFragments = this.pathFragments.filter((v) => !this._erased.includes(v.element));\n    return this._erased.length > 0;\n  }\n  lineLineIntersect(line1, line2) {\n    const x1 = line1.x1;\n    const x2 = line1.x2;\n    const x3 = line2.x1;\n    const x4 = line2.x2;\n    const y1 = line1.y1;\n    const y2 = line1.y2;\n    const y3 = line2.y1;\n    const y4 = line2.y2;\n    const pt_denom = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n    const pt_x_num = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4);\n    const pt_y_num = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4);\n    const btwn = (a2, b1, b2) => {\n      if (a2 >= b1 && a2 <= b2)\n        return true;\n      return a2 >= b2 && a2 <= b1;\n    };\n    if (pt_denom === 0) {\n      return false;\n    } else {\n      const pt = {\n        x: pt_x_num / pt_denom,\n        y: pt_y_num / pt_denom\n      };\n      return btwn(pt.x, x1, x2) && btwn(pt.y, y1, y2) && btwn(pt.x, x3, x4) && btwn(pt.y, y3, y4);\n    }\n  }\n};\n\n// src/models/line.ts\nvar LineModel = class extends BaseModel {\n  onStart(point) {\n    this.el = this.createElement(\"line\", { fill: \"transparent\" });\n    this.attr(\"x1\", point.x);\n    this.attr(\"y1\", point.y);\n    this.attr(\"x2\", point.x);\n    this.attr(\"y2\", point.y);\n    if (this.brush.arrowEnd) {\n      const id = guid();\n      const g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n      g.append(createArrowHead(id, this.brush.color));\n      g.append(this.el);\n      this.attr(\"marker-end\", `url(#${id})`);\n      return g;\n    }\n    return this.el;\n  }\n  onMove(point) {\n    if (!this.el)\n      return false;\n    let { x, y } = point;\n    if (this.shiftPressed) {\n      const dx = point.x - this.start.x;\n      const dy = point.y - this.start.y;\n      if (dy !== 0) {\n        let slope = dx / dy;\n        slope = Math.round(slope);\n        if (Math.abs(slope) <= 1) {\n          x = this.start.x + dy * slope;\n          y = this.start.y + dy;\n        } else {\n          x = this.start.x + dx;\n          y = this.start.y;\n        }\n      }\n    }\n    if (this.altPressed) {\n      this.attr(\"x1\", this.start.x * 2 - x);\n      this.attr(\"y1\", this.start.y * 2 - y);\n      this.attr(\"x2\", x);\n      this.attr(\"y2\", y);\n    } else {\n      this.attr(\"x1\", this.start.x);\n      this.attr(\"y1\", this.start.y);\n      this.attr(\"x2\", x);\n      this.attr(\"y2\", y);\n    }\n    return true;\n  }\n  onEnd() {\n    const path = this.el;\n    this.el = null;\n    if (!path)\n      return false;\n    try {\n      if (path.getTotalLength() < 5)\n        return false;\n    } catch (e) {\n      return false;\n    }\n    return true;\n  }\n};\n\n// src/models/rect.ts\nvar RectModel = class extends BaseModel {\n  onStart(point) {\n    this.el = this.createElement(\"rect\");\n    if (this.brush.cornerRadius) {\n      this.attr(\"rx\", this.brush.cornerRadius);\n      this.attr(\"ry\", this.brush.cornerRadius);\n    }\n    this.attr(\"x\", point.x);\n    this.attr(\"y\", point.y);\n    return this.el;\n  }\n  onMove(point) {\n    if (!this.el || !this.start)\n      return false;\n    let [dx, sx] = splitNum(point.x - this.start.x);\n    let [dy, sy] = splitNum(point.y - this.start.y);\n    if (this.shiftPressed) {\n      const d = Math.min(dx, dy);\n      dx = d;\n      dy = d;\n    }\n    if (this.altPressed) {\n      this.attr(\"x\", this.start.x - dx);\n      this.attr(\"y\", this.start.y - dy);\n      this.attr(\"width\", dx * 2);\n      this.attr(\"height\", dy * 2);\n    } else {\n      const [x1, x2] = [this.start.x, this.start.x + dx * sx].sort(numSort);\n      const [y1, y2] = [this.start.y, this.start.y + dy * sy].sort(numSort);\n      this.attr(\"x\", x1);\n      this.attr(\"y\", y1);\n      this.attr(\"width\", x2 - x1);\n      this.attr(\"height\", y2 - y1);\n    }\n    return true;\n  }\n  onEnd() {\n    const path = this.el;\n    this.el = null;\n    if (!path)\n      return false;\n    try {\n      if (!path.getTotalLength())\n        return false;\n    } catch (e) {\n      return false;\n    }\n    return true;\n  }\n};\n\n// ../../node_modules/.pnpm/perfect-freehand@1.2.2/node_modules/perfect-freehand/dist/esm/index.mjs\nfunction $(e, t, u, x = (h) => h) {\n  return e * x(0.5 - t * (0.5 - u));\n}\nfunction se(e) {\n  return [-e[0], -e[1]];\n}\nfunction l(e, t) {\n  return [e[0] + t[0], e[1] + t[1]];\n}\nfunction a(e, t) {\n  return [e[0] - t[0], e[1] - t[1]];\n}\nfunction b(e, t) {\n  return [e[0] * t, e[1] * t];\n}\nfunction he(e, t) {\n  return [e[0] / t, e[1] / t];\n}\nfunction R(e) {\n  return [e[1], -e[0]];\n}\nfunction B(e, t) {\n  return e[0] * t[0] + e[1] * t[1];\n}\nfunction ue(e, t) {\n  return e[0] === t[0] && e[1] === t[1];\n}\nfunction ge(e) {\n  return Math.hypot(e[0], e[1]);\n}\nfunction de(e) {\n  return e[0] * e[0] + e[1] * e[1];\n}\nfunction A(e, t) {\n  return de(a(e, t));\n}\nfunction G(e) {\n  return he(e, ge(e));\n}\nfunction ie(e, t) {\n  return Math.hypot(e[1] - t[1], e[0] - t[0]);\n}\nfunction L(e, t, u) {\n  let x = Math.sin(u), h = Math.cos(u), y = e[0] - t[0], n = e[1] - t[1], f = y * h - n * x, d = y * x + n * h;\n  return [f + t[0], d + t[1]];\n}\nfunction K(e, t, u) {\n  return l(e, b(a(t, e), u));\n}\nfunction ee(e, t, u) {\n  return l(e, b(t, u));\n}\nvar { min: C, PI: xe } = Math;\nvar pe = 0.275;\nvar V = xe + 1e-4;\nfunction ce(e, t = {}) {\n  let { size: u = 16, smoothing: x = 0.5, thinning: h = 0.5, simulatePressure: y = true, easing: n = (r) => r, start: f = {}, end: d = {}, last: D2 = false } = t, { cap: S = true, easing: j = (r) => r * (2 - r) } = f, { cap: q = true, easing: c = (r) => --r * r * r + 1 } = d;\n  if (e.length === 0 || u <= 0) return [];\n  let p = e[e.length - 1].runningLength, g = f.taper === false ? 0 : f.taper === true ? Math.max(u, p) : f.taper, T = d.taper === false ? 0 : d.taper === true ? Math.max(u, p) : d.taper, te = Math.pow(u * x, 2), _ = [], M = [], H = e.slice(0, 10).reduce((r, i) => {\n    let o = i.pressure;\n    if (y) {\n      let s = C(1, i.distance / u), W = C(1, 1 - s);\n      o = C(1, r + (W - r) * (s * pe));\n    }\n    return (r + o) / 2;\n  }, e[0].pressure), m = $(u, h, e[e.length - 1].pressure, n), U, X = e[0].vector, z = e[0].point, F = z, O = z, E = F, J = false;\n  for (let r = 0; r < e.length; r++) {\n    let { pressure: i } = e[r], { point: o, vector: s, distance: W, runningLength: I } = e[r];\n    if (r < e.length - 1 && p - I < 3) continue;\n    if (h) {\n      if (y) {\n        let v = C(1, W / u), Z = C(1, 1 - v);\n        i = C(1, H + (Z - H) * (v * pe));\n      }\n      m = $(u, h, i, n);\n    } else m = u / 2;\n    U === void 0 && (U = m);\n    let le = I < g ? j(I / g) : 1, fe = p - I < T ? c((p - I) / T) : 1;\n    m = Math.max(0.01, m * Math.min(le, fe));\n    let re = (r < e.length - 1 ? e[r + 1] : e[r]).vector, Y = r < e.length - 1 ? B(s, re) : 1, be = B(s, X) < 0 && !J, ne = Y !== null && Y < 0;\n    if (be || ne) {\n      let v = b(R(X), m);\n      for (let Z = 1 / 13, w = 0; w <= 1; w += Z) O = L(a(o, v), o, V * w), _.push(O), E = L(l(o, v), o, V * -w), M.push(E);\n      z = O, F = E, ne && (J = true);\n      continue;\n    }\n    if (J = false, r === e.length - 1) {\n      let v = b(R(s), m);\n      _.push(a(o, v)), M.push(l(o, v));\n      continue;\n    }\n    let oe = b(R(K(re, s, Y)), m);\n    O = a(o, oe), (r <= 1 || A(z, O) > te) && (_.push(O), z = O), E = l(o, oe), (r <= 1 || A(F, E) > te) && (M.push(E), F = E), H = i, X = s;\n  }\n  let P = e[0].point.slice(0, 2), k = e.length > 1 ? e[e.length - 1].point.slice(0, 2) : l(e[0].point, [1, 1]), Q = [], N = [];\n  if (e.length === 1) {\n    if (!(g || T) || D2) {\n      let r = ee(P, G(R(a(P, k))), -(U || m)), i = [];\n      for (let o = 1 / 13, s = o; s <= 1; s += o) i.push(L(r, P, V * 2 * s));\n      return i;\n    }\n  } else {\n    if (!(g || T && e.length === 1)) if (S) for (let i = 1 / 13, o = i; o <= 1; o += i) {\n      let s = L(M[0], P, V * o);\n      Q.push(s);\n    }\n    else {\n      let i = a(_[0], M[0]), o = b(i, 0.5), s = b(i, 0.51);\n      Q.push(a(P, o), a(P, s), l(P, s), l(P, o));\n    }\n    let r = R(se(e[e.length - 1].vector));\n    if (T || g && e.length === 1) N.push(k);\n    else if (q) {\n      let i = ee(k, r, m);\n      for (let o = 1 / 29, s = o; s < 1; s += o) N.push(L(i, k, V * 3 * s));\n    } else N.push(l(k, b(r, m)), l(k, b(r, m * 0.99)), a(k, b(r, m * 0.99)), a(k, b(r, m)));\n  }\n  return _.concat(N, M.reverse(), Q);\n}\nfunction me(e, t = {}) {\n  var q;\n  let { streamline: u = 0.5, size: x = 16, last: h = false } = t;\n  if (e.length === 0) return [];\n  let y = 0.15 + (1 - u) * 0.85, n = Array.isArray(e[0]) ? e : e.map(({ x: c, y: p, pressure: g = 0.5 }) => [c, p, g]);\n  if (n.length === 2) {\n    let c = n[1];\n    n = n.slice(0, -1);\n    for (let p = 1; p < 5; p++) n.push(K(n[0], c, p / 4));\n  }\n  n.length === 1 && (n = [...n, [...l(n[0], [1, 1]), ...n[0].slice(2)]]);\n  let f = [{ point: [n[0][0], n[0][1]], pressure: n[0][2] >= 0 ? n[0][2] : 0.25, vector: [1, 1], distance: 0, runningLength: 0 }], d = false, D2 = 0, S = f[0], j = n.length - 1;\n  for (let c = 1; c < n.length; c++) {\n    let p = h && c === j ? n[c].slice(0, 2) : K(S.point, n[c], y);\n    if (ue(S.point, p)) continue;\n    let g = ie(p, S.point);\n    if (D2 += g, c < j && !d) {\n      if (D2 < x) continue;\n      d = true;\n    }\n    S = { point: p, pressure: n[c][2] >= 0 ? n[c][2] : 0.5, vector: G(a(S.point, p)), distance: g, runningLength: D2 }, f.push(S);\n  }\n  return f[0].vector = ((q = f[1]) == null ? void 0 : q.vector) || [0, 0], f;\n}\nfunction ae(e, t = {}) {\n  return ce(me(e, t), t);\n}\n\n// src/models/stylus.ts\nvar StylusModel = class _StylusModel extends BaseModel {\n  constructor() {\n    super(...arguments);\n    this.points = [];\n  }\n  onStart(point) {\n    this.el = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n    this.points = [point];\n    this.attr(\"fill\", this.brush.color);\n    this.attr(\"d\", this.getSvgData(this.points));\n    return this.el;\n  }\n  onMove(point) {\n    if (!this.el)\n      this.onStart(point);\n    if (this.points[this.points.length - 1] !== point)\n      this.points.push(point);\n    this.attr(\"d\", this.getSvgData(this.points));\n    return true;\n  }\n  onEnd() {\n    const path = this.el;\n    this.el = null;\n    if (!path)\n      return false;\n    return true;\n  }\n  getSvgData(points) {\n    return _StylusModel.getSvgData(points, this.brush);\n  }\n  static getSvgData(points, brush) {\n    const stroke = ae(points, __spreadValues({\n      size: brush.size,\n      thinning: 0.9,\n      simulatePressure: false,\n      start: {\n        taper: 5\n      },\n      end: {\n        taper: 5\n      }\n    }, brush.stylusOptions));\n    if (!stroke.length)\n      return \"\";\n    const d = stroke.reduce(\n      (acc, [x0, y0], i, arr) => {\n        const [x1, y1] = arr[(i + 1) % arr.length];\n        acc.push(x0, y0, (x0 + x1) / 2, (y0 + y1) / 2);\n        return acc;\n      },\n      [\"M\", ...stroke[0], \"Q\"]\n    );\n    d.push(\"Z\");\n    return d.map((i) => typeof i === \"number\" ? i.toFixed(2) : i).join(\" \");\n  }\n};\n\n// src/models/index.ts\nfunction createModels(drauu) {\n  return {\n    draw: new DrawModel(drauu),\n    stylus: new StylusModel(drauu),\n    line: new LineModel(drauu),\n    rectangle: new RectModel(drauu),\n    ellipse: new EllipseModel(drauu),\n    eraseLine: new EraserModel(drauu)\n  };\n}\n\n// src/drauu.ts\nvar Drauu = class {\n  constructor(options = {}) {\n    this.options = options;\n    this.el = null;\n    this.svgPoint = null;\n    this.eventEl = null;\n    this.shiftPressed = false;\n    this.altPressed = false;\n    this.drawing = false;\n    this._emitter = createNanoEvents();\n    this._originalPointerId = null;\n    this._models = createModels(this);\n    this._opStack = [];\n    this._opIndex = 0;\n    this._disposables = [];\n    this._elements = [];\n    if (!this.options.brush)\n      this.options.brush = { color: \"black\", size: 3, mode: \"stylus\" };\n    if (options.el)\n      this.mount(options.el, options.eventTarget, options.window);\n  }\n  get model() {\n    return this._models[this.mode];\n  }\n  get mounted() {\n    return !!this.el;\n  }\n  get mode() {\n    return this.options.brush.mode || \"stylus\";\n  }\n  set mode(v) {\n    const unselected = this._models[this.mode];\n    unselected.onUnselected();\n    this.options.brush.mode = v;\n    this.model.onSelected(this.el);\n  }\n  get brush() {\n    return this.options.brush;\n  }\n  set brush(v) {\n    this.options.brush = v;\n  }\n  resolveSelector(selector) {\n    if (typeof selector === \"string\")\n      return document.querySelector(selector);\n    else\n      return selector || null;\n  }\n  mount(el, eventEl, listenWindow = window) {\n    if (this.el)\n      throw new Error(\"[drauu] already mounted, unmount previous target first\");\n    this.el = this.resolveSelector(el);\n    if (!this.el)\n      throw new Error(\"[drauu] target element not found\");\n    if (this.el.tagName.toLocaleLowerCase() !== \"svg\")\n      throw new Error(\"[drauu] can only mount to a SVG element\");\n    if (!this.el.createSVGPoint)\n      throw new Error(\"[drauu] SVG element must be create by document.createElementNS('http://www.w3.org/2000/svg', 'svg')\");\n    this.svgPoint = this.el.createSVGPoint();\n    const target = this.resolveSelector(eventEl) || this.el;\n    const start = this.eventStart.bind(this);\n    const move = this.eventMove.bind(this);\n    const end = this.eventEnd.bind(this);\n    const keyboard = this.eventKeyboard.bind(this);\n    target.addEventListener(\"pointerdown\", start, { passive: false });\n    listenWindow.addEventListener(\"pointermove\", move, { passive: false });\n    listenWindow.addEventListener(\"pointerup\", end, { passive: false });\n    listenWindow.addEventListener(\"pointercancel\", end, { passive: false });\n    listenWindow.addEventListener(\"keydown\", keyboard, false);\n    listenWindow.addEventListener(\"keyup\", keyboard, false);\n    this._disposables.push(() => {\n      target.removeEventListener(\"pointerdown\", start);\n      listenWindow.removeEventListener(\"pointermove\", move);\n      listenWindow.removeEventListener(\"pointerup\", end);\n      listenWindow.removeEventListener(\"pointercancel\", end);\n      listenWindow.removeEventListener(\"keydown\", keyboard, false);\n      listenWindow.removeEventListener(\"keyup\", keyboard, false);\n    });\n    this._emitter.emit(\"mounted\");\n  }\n  unmount() {\n    this._disposables.forEach((fn) => fn());\n    this._disposables.length = 0;\n    this._elements.length = 0;\n    this.el = null;\n    this._emitter.emit(\"unmounted\");\n  }\n  on(type, fn) {\n    return this._emitter.on(type, fn);\n  }\n  undo() {\n    if (!this.canUndo() || this.drawing)\n      return false;\n    this._opStack[--this._opIndex].undo();\n    this._emitter.emit(\"changed\");\n    return true;\n  }\n  redo() {\n    if (!this.canRedo() || this.drawing)\n      return false;\n    this._opStack[this._opIndex++].redo();\n    this._emitter.emit(\"changed\");\n    return true;\n  }\n  canRedo() {\n    return this._opIndex < this._opStack.length;\n  }\n  canUndo() {\n    return this._opIndex > 0;\n  }\n  eventMove(event) {\n    if (!this.acceptsInput(event) || !this.drawing)\n      return;\n    if (this.model._eventMove(event)) {\n      event.stopPropagation();\n      event.preventDefault();\n      this._emitter.emit(\"changed\");\n    }\n  }\n  eventStart(event) {\n    if (!this.acceptsInput(event))\n      return;\n    event.stopPropagation();\n    event.preventDefault();\n    if (this._currentNode)\n      this.cancel();\n    this.drawing = true;\n    this._originalPointerId = event.pointerId;\n    this._emitter.emit(\"start\");\n    this._currentNode = this.model._eventDown(event);\n    if (this._currentNode && this.mode !== \"eraseLine\")\n      this.el.appendChild(this._currentNode);\n    this._emitter.emit(\"changed\");\n  }\n  eventEnd(event) {\n    if (!this.acceptsInput(event) || !this.drawing)\n      return;\n    const result = this.model._eventUp(event);\n    if (!result) {\n      this.cancel();\n    } else if (result === true) {\n      const el = this._currentNode;\n      if (el) {\n        this._appendNode(el);\n        this.commit({\n          undo: () => this._removeNode(el),\n          redo: () => this._restoreNode(el)\n        });\n      }\n    } else {\n      this.commit(result);\n    }\n    this.drawing = false;\n    this._emitter.emit(\"end\");\n    this._emitter.emit(\"changed\");\n    this._originalPointerId = null;\n  }\n  acceptsInput(event) {\n    return (!this.options.acceptsInputTypes || this.options.acceptsInputTypes.includes(event.pointerType)) && !(this._originalPointerId && this._originalPointerId !== event.pointerId);\n  }\n  eventKeyboard(event) {\n    if (this.shiftPressed === event.shiftKey && this.altPressed === event.altKey)\n      return;\n    this.shiftPressed = event.shiftKey;\n    this.altPressed = event.altKey;\n    if (this.model.point) {\n      if (this.model.onMove(this.model.point))\n        this._emitter.emit(\"changed\");\n    }\n  }\n  commit(op) {\n    this._opStack.length = this._opIndex;\n    this._opStack.push(op);\n    this._opIndex++;\n    const node = this._currentNode;\n    this._currentNode = void 0;\n    this._emitter.emit(\"committed\", node);\n  }\n  clear() {\n    this._opStack.length = 0;\n    this._opIndex = 0;\n    this._elements = [];\n    this.cancel();\n    this.el.innerHTML = \"\";\n    this._emitter.emit(\"changed\");\n  }\n  cancel() {\n    if (this._currentNode) {\n      this.el.removeChild(this._currentNode);\n      this._currentNode = void 0;\n      this._emitter.emit(\"canceled\");\n    }\n  }\n  dump() {\n    return this.el.innerHTML;\n  }\n  load(svg) {\n    this.clear();\n    this.el.innerHTML = svg;\n  }\n  /**\n   * @internal\n   */\n  _appendNode(node) {\n    const last = this._elements.at(-1);\n    if (last)\n      last.after(node);\n    else\n      this.el.append(node);\n    const index = this._elements.push(node) - 1;\n    node.dataset.drauu_index = index.toString();\n  }\n  /**\n   * @internal\n   */\n  _removeNode(node) {\n    node.remove();\n    this._elements[+node.dataset.drauu_index] = null;\n  }\n  /**\n   * @internal\n   */\n  _restoreNode(node) {\n    const index = +node.dataset.drauu_index;\n    this._elements[index] = node;\n    for (let i = index - 1; i >= 0; i--) {\n      const last = this._elements[i];\n      if (last) {\n        last.after(node);\n        return;\n      }\n    }\n    this.el.prepend(node);\n  }\n};\nfunction createDrauu(options) {\n  return new Drauu(options);\n}\nexport {\n  Drauu,\n  DrawModel,\n  EllipseModel,\n  EraserModel,\n  LineModel,\n  RectModel,\n  StylusModel,\n  createDrauu\n};\n",
      "start": 1743409708942,
      "end": 1743409708946,
      "sourcemaps": null
    },
    {
      "name": "unplugin-vue-markdown",
      "start": 1743409708946,
      "end": 1743409708946,
      "order": "pre"
    },
    {
      "name": "slidev:flags",
      "start": 1743409708946,
      "end": 1743409708946,
      "order": "pre"
    },
    {
      "name": "unocss:transformers:pre",
      "start": 1743409708946,
      "end": 1743409708946,
      "order": "pre"
    },
    {
      "name": "unocss:global:build:scan",
      "start": 1743409708946,
      "end": 1743409708946,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1743409708946,
      "end": 1743409708946,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1743409708946,
      "end": 1743409708946,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1743409708946,
      "end": 1743409708946,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1743409708946,
      "end": 1743409708946,
      "order": "normal"
    },
    {
      "name": "slidev:layout-wrapper",
      "start": 1743409708946,
      "end": 1743409708946,
      "order": "normal"
    },
    {
      "name": "slidev:context-injection",
      "start": 1743409708946,
      "end": 1743409708946,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1743409708946,
      "end": 1743409708946,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1743409708946,
      "end": 1743409708946,
      "order": "normal"
    },
    {
      "name": "slidev:hmr-patch",
      "start": 1743409708946,
      "end": 1743409708946,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:undefined",
      "start": 1743409708946,
      "end": 1743409708946,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1743409708946,
      "end": 1743409708946,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1743409708946,
      "end": 1743409708946,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1743409708946,
      "end": 1743409708946,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1743409708946,
      "end": 1743409708946,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1743409708946,
      "end": 1743409708946,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1743409708946,
      "end": 1743409708946,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1743409708946,
      "end": 1743409708947,
      "order": "normal"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1743409708947,
      "end": 1743409708947,
      "order": "post"
    },
    {
      "name": "unocss:transformers:post",
      "start": 1743409708947,
      "end": 1743409708947,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1743409708947,
      "end": 1743409708947,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1743409708947,
      "end": 1743409708947,
      "order": "normal"
    }
  ]
}
