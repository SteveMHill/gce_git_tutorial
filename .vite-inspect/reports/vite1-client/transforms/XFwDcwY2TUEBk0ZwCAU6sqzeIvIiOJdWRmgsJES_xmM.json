{
  "resolvedId": "/Users/stevenhill/gce_git_tutorial/node_modules/yaml/browser/dist/schema/tags.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { map } from './common/map.js';\nimport { nullTag } from './common/null.js';\nimport { seq } from './common/seq.js';\nimport { string } from './common/string.js';\nimport { boolTag } from './core/bool.js';\nimport { float, floatExp, floatNaN } from './core/float.js';\nimport { int, intHex, intOct } from './core/int.js';\nimport { schema } from './core/schema.js';\nimport { schema as schema$1 } from './json/schema.js';\nimport { binary } from './yaml-1.1/binary.js';\nimport { merge } from './yaml-1.1/merge.js';\nimport { omap } from './yaml-1.1/omap.js';\nimport { pairs } from './yaml-1.1/pairs.js';\nimport { schema as schema$2 } from './yaml-1.1/schema.js';\nimport { set } from './yaml-1.1/set.js';\nimport { timestamp, floatTime, intTime } from './yaml-1.1/timestamp.js';\n\nconst schemas = new Map([\n    ['core', schema],\n    ['failsafe', [map, seq, string]],\n    ['json', schema$1],\n    ['yaml11', schema$2],\n    ['yaml-1.1', schema$2]\n]);\nconst tagsByName = {\n    binary,\n    bool: boolTag,\n    float,\n    floatExp,\n    floatNaN,\n    floatTime,\n    int,\n    intHex,\n    intOct,\n    intTime,\n    map,\n    merge,\n    null: nullTag,\n    omap,\n    pairs,\n    seq,\n    set,\n    timestamp\n};\nconst coreKnownTags = {\n    'tag:yaml.org,2002:binary': binary,\n    'tag:yaml.org,2002:merge': merge,\n    'tag:yaml.org,2002:omap': omap,\n    'tag:yaml.org,2002:pairs': pairs,\n    'tag:yaml.org,2002:set': set,\n    'tag:yaml.org,2002:timestamp': timestamp\n};\nfunction getTags(customTags, schemaName, addMergeTag) {\n    const schemaTags = schemas.get(schemaName);\n    if (schemaTags && !customTags) {\n        return addMergeTag && !schemaTags.includes(merge)\n            ? schemaTags.concat(merge)\n            : schemaTags.slice();\n    }\n    let tags = schemaTags;\n    if (!tags) {\n        if (Array.isArray(customTags))\n            tags = [];\n        else {\n            const keys = Array.from(schemas.keys())\n                .filter(key => key !== 'yaml11')\n                .map(key => JSON.stringify(key))\n                .join(', ');\n            throw new Error(`Unknown schema \"${schemaName}\"; use one of ${keys} or define customTags array`);\n        }\n    }\n    if (Array.isArray(customTags)) {\n        for (const tag of customTags)\n            tags = tags.concat(tag);\n    }\n    else if (typeof customTags === 'function') {\n        tags = customTags(tags.slice());\n    }\n    if (addMergeTag)\n        tags = tags.concat(merge);\n    return tags.reduce((tags, tag) => {\n        const tagObj = typeof tag === 'string' ? tagsByName[tag] : tag;\n        if (!tagObj) {\n            const tagName = JSON.stringify(tag);\n            const keys = Object.keys(tagsByName)\n                .map(key => JSON.stringify(key))\n                .join(', ');\n            throw new Error(`Unknown custom tag ${tagName}; use one of ${keys}`);\n        }\n        if (!tags.includes(tagObj))\n            tags.push(tagObj);\n        return tags;\n    }, []);\n}\n\nexport { coreKnownTags, getTags };\n",
      "start": 1743409708640,
      "end": 1743409708649,
      "sourcemaps": null
    },
    {
      "name": "unplugin-vue-markdown",
      "start": 1743409708649,
      "end": 1743409708649,
      "order": "pre"
    },
    {
      "name": "slidev:flags",
      "start": 1743409708649,
      "end": 1743409708649,
      "order": "pre"
    },
    {
      "name": "unocss:transformers:pre",
      "start": 1743409708649,
      "end": 1743409708649,
      "order": "pre"
    },
    {
      "name": "unocss:global:build:scan",
      "start": 1743409708649,
      "end": 1743409708649,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1743409708649,
      "end": 1743409708649,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1743409708649,
      "end": 1743409708649,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1743409708649,
      "end": 1743409708649,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1743409708649,
      "end": 1743409708649,
      "order": "normal"
    },
    {
      "name": "slidev:layout-wrapper",
      "start": 1743409708649,
      "end": 1743409708649,
      "order": "normal"
    },
    {
      "name": "slidev:context-injection",
      "start": 1743409708649,
      "end": 1743409708649,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1743409708649,
      "end": 1743409708649,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1743409708649,
      "end": 1743409708649,
      "order": "normal"
    },
    {
      "name": "slidev:hmr-patch",
      "start": 1743409708649,
      "end": 1743409708649,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:undefined",
      "start": 1743409708649,
      "end": 1743409708649,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1743409708649,
      "end": 1743409708649,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1743409708649,
      "end": 1743409708649,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1743409708649,
      "end": 1743409708649,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1743409708649,
      "end": 1743409708649,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1743409708649,
      "end": 1743409708649,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "normal"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "post"
    },
    {
      "name": "unocss:transformers:post",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1743409708650,
      "end": 1743409708650,
      "order": "normal"
    }
  ]
}
