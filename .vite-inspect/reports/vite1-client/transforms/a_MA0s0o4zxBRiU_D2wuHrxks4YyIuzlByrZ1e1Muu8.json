{
  "resolvedId": "/Users/stevenhill/gce_git_tutorial/node_modules/yaml/browser/dist/compose/compose-scalar.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { isScalar, SCALAR } from '../nodes/identity.js';\nimport { Scalar } from '../nodes/Scalar.js';\nimport { resolveBlockScalar } from './resolve-block-scalar.js';\nimport { resolveFlowScalar } from './resolve-flow-scalar.js';\n\nfunction composeScalar(ctx, token, tagToken, onError) {\n    const { value, type, comment, range } = token.type === 'block-scalar'\n        ? resolveBlockScalar(ctx, token, onError)\n        : resolveFlowScalar(token, ctx.options.strict, onError);\n    const tagName = tagToken\n        ? ctx.directives.tagName(tagToken.source, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg))\n        : null;\n    let tag;\n    if (ctx.options.stringKeys && ctx.atKey) {\n        tag = ctx.schema[SCALAR];\n    }\n    else if (tagName)\n        tag = findScalarTagByName(ctx.schema, value, tagName, tagToken, onError);\n    else if (token.type === 'scalar')\n        tag = findScalarTagByTest(ctx, value, token, onError);\n    else\n        tag = ctx.schema[SCALAR];\n    let scalar;\n    try {\n        const res = tag.resolve(value, msg => onError(tagToken ?? token, 'TAG_RESOLVE_FAILED', msg), ctx.options);\n        scalar = isScalar(res) ? res : new Scalar(res);\n    }\n    catch (error) {\n        const msg = error instanceof Error ? error.message : String(error);\n        onError(tagToken ?? token, 'TAG_RESOLVE_FAILED', msg);\n        scalar = new Scalar(value);\n    }\n    scalar.range = range;\n    scalar.source = value;\n    if (type)\n        scalar.type = type;\n    if (tagName)\n        scalar.tag = tagName;\n    if (tag.format)\n        scalar.format = tag.format;\n    if (comment)\n        scalar.comment = comment;\n    return scalar;\n}\nfunction findScalarTagByName(schema, value, tagName, tagToken, onError) {\n    if (tagName === '!')\n        return schema[SCALAR]; // non-specific tag\n    const matchWithTest = [];\n    for (const tag of schema.tags) {\n        if (!tag.collection && tag.tag === tagName) {\n            if (tag.default && tag.test)\n                matchWithTest.push(tag);\n            else\n                return tag;\n        }\n    }\n    for (const tag of matchWithTest)\n        if (tag.test?.test(value))\n            return tag;\n    const kt = schema.knownTags[tagName];\n    if (kt && !kt.collection) {\n        // Ensure that the known tag is available for stringifying,\n        // but does not get used by default.\n        schema.tags.push(Object.assign({}, kt, { default: false, test: undefined }));\n        return kt;\n    }\n    onError(tagToken, 'TAG_RESOLVE_FAILED', `Unresolved tag: ${tagName}`, tagName !== 'tag:yaml.org,2002:str');\n    return schema[SCALAR];\n}\nfunction findScalarTagByTest({ atKey, directives, schema }, value, token, onError) {\n    const tag = schema.tags.find(tag => (tag.default === true || (atKey && tag.default === 'key')) &&\n        tag.test?.test(value)) || schema[SCALAR];\n    if (schema.compat) {\n        const compat = schema.compat.find(tag => tag.default && tag.test?.test(value)) ??\n            schema[SCALAR];\n        if (tag.tag !== compat.tag) {\n            const ts = directives.tagString(tag.tag);\n            const cs = directives.tagString(compat.tag);\n            const msg = `Value may be parsed as either ${ts} or ${cs}`;\n            onError(token, 'TAG_RESOLVE_FAILED', msg, true);\n        }\n    }\n    return tag;\n}\n\nexport { composeScalar };\n",
      "start": 1743409708667,
      "end": 1743409708670,
      "sourcemaps": null
    },
    {
      "name": "unplugin-vue-markdown",
      "start": 1743409708670,
      "end": 1743409708670,
      "order": "pre"
    },
    {
      "name": "slidev:flags",
      "start": 1743409708670,
      "end": 1743409708670,
      "order": "pre"
    },
    {
      "name": "unocss:transformers:pre",
      "start": 1743409708670,
      "end": 1743409708670,
      "order": "pre"
    },
    {
      "name": "unocss:global:build:scan",
      "start": 1743409708670,
      "end": 1743409708670,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1743409708670,
      "end": 1743409708670,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1743409708670,
      "end": 1743409708670,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1743409708670,
      "end": 1743409708670,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1743409708670,
      "end": 1743409708670,
      "order": "normal"
    },
    {
      "name": "slidev:layout-wrapper",
      "start": 1743409708670,
      "end": 1743409708670,
      "order": "normal"
    },
    {
      "name": "slidev:context-injection",
      "start": 1743409708670,
      "end": 1743409708670,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1743409708670,
      "end": 1743409708670,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1743409708670,
      "end": 1743409708670,
      "order": "normal"
    },
    {
      "name": "slidev:hmr-patch",
      "start": 1743409708670,
      "end": 1743409708670,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:undefined",
      "start": 1743409708670,
      "end": 1743409708670,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1743409708670,
      "end": 1743409708670,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1743409708670,
      "end": 1743409708670,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1743409708670,
      "end": 1743409708670,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1743409708670,
      "end": 1743409708670,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1743409708670,
      "end": 1743409708670,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1743409708670,
      "end": 1743409708670,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1743409708670,
      "end": 1743409708670,
      "order": "normal"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1743409708670,
      "end": 1743409708670,
      "order": "post"
    },
    {
      "name": "unocss:transformers:post",
      "start": 1743409708670,
      "end": 1743409708670,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1743409708670,
      "end": 1743409708670,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1743409708670,
      "end": 1743409708670,
      "order": "normal"
    }
  ]
}
