{
  "resolvedId": "/Users/stevenhill/gce_git_tutorial/node_modules/yaml/browser/dist/schema/yaml-1.1/omap.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { isScalar, isPair } from '../../nodes/identity.js';\nimport { toJS } from '../../nodes/toJS.js';\nimport { YAMLMap } from '../../nodes/YAMLMap.js';\nimport { YAMLSeq } from '../../nodes/YAMLSeq.js';\nimport { resolvePairs, createPairs } from './pairs.js';\n\nclass YAMLOMap extends YAMLSeq {\n    constructor() {\n        super();\n        this.add = YAMLMap.prototype.add.bind(this);\n        this.delete = YAMLMap.prototype.delete.bind(this);\n        this.get = YAMLMap.prototype.get.bind(this);\n        this.has = YAMLMap.prototype.has.bind(this);\n        this.set = YAMLMap.prototype.set.bind(this);\n        this.tag = YAMLOMap.tag;\n    }\n    /**\n     * If `ctx` is given, the return type is actually `Map<unknown, unknown>`,\n     * but TypeScript won't allow widening the signature of a child method.\n     */\n    toJSON(_, ctx) {\n        if (!ctx)\n            return super.toJSON(_);\n        const map = new Map();\n        if (ctx?.onCreate)\n            ctx.onCreate(map);\n        for (const pair of this.items) {\n            let key, value;\n            if (isPair(pair)) {\n                key = toJS(pair.key, '', ctx);\n                value = toJS(pair.value, key, ctx);\n            }\n            else {\n                key = toJS(pair, '', ctx);\n            }\n            if (map.has(key))\n                throw new Error('Ordered maps must not include duplicate keys');\n            map.set(key, value);\n        }\n        return map;\n    }\n    static from(schema, iterable, ctx) {\n        const pairs = createPairs(schema, iterable, ctx);\n        const omap = new this();\n        omap.items = pairs.items;\n        return omap;\n    }\n}\nYAMLOMap.tag = 'tag:yaml.org,2002:omap';\nconst omap = {\n    collection: 'seq',\n    identify: value => value instanceof Map,\n    nodeClass: YAMLOMap,\n    default: false,\n    tag: 'tag:yaml.org,2002:omap',\n    resolve(seq, onError) {\n        const pairs = resolvePairs(seq, onError);\n        const seenKeys = [];\n        for (const { key } of pairs.items) {\n            if (isScalar(key)) {\n                if (seenKeys.includes(key.value)) {\n                    onError(`Ordered maps must not include duplicate keys: ${key.value}`);\n                }\n                else {\n                    seenKeys.push(key.value);\n                }\n            }\n        }\n        return Object.assign(new YAMLOMap(), pairs);\n    },\n    createNode: (schema, iterable, ctx) => YAMLOMap.from(schema, iterable, ctx)\n};\n\nexport { YAMLOMap, omap };\n",
      "start": 1743409708653,
      "end": 1743409708660,
      "sourcemaps": null
    },
    {
      "name": "unplugin-vue-markdown",
      "start": 1743409708660,
      "end": 1743409708660,
      "order": "pre"
    },
    {
      "name": "slidev:flags",
      "start": 1743409708660,
      "end": 1743409708660,
      "order": "pre"
    },
    {
      "name": "unocss:transformers:pre",
      "start": 1743409708660,
      "end": 1743409708661,
      "order": "pre"
    },
    {
      "name": "unocss:global:build:scan",
      "start": 1743409708661,
      "end": 1743409708661,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1743409708661,
      "end": 1743409708661,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1743409708661,
      "end": 1743409708661,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1743409708661,
      "end": 1743409708661,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1743409708661,
      "end": 1743409708661,
      "order": "normal"
    },
    {
      "name": "slidev:layout-wrapper",
      "start": 1743409708661,
      "end": 1743409708661,
      "order": "normal"
    },
    {
      "name": "slidev:context-injection",
      "start": 1743409708661,
      "end": 1743409708661,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1743409708661,
      "end": 1743409708661,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1743409708661,
      "end": 1743409708661,
      "order": "normal"
    },
    {
      "name": "slidev:hmr-patch",
      "start": 1743409708661,
      "end": 1743409708661,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:undefined",
      "start": 1743409708661,
      "end": 1743409708661,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1743409708661,
      "end": 1743409708661,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1743409708661,
      "end": 1743409708661,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1743409708661,
      "end": 1743409708661,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1743409708661,
      "end": 1743409708661,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1743409708661,
      "end": 1743409708661,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1743409708661,
      "end": 1743409708661,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1743409708661,
      "end": 1743409708661,
      "order": "normal"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1743409708661,
      "end": 1743409708661,
      "order": "post"
    },
    {
      "name": "unocss:transformers:post",
      "start": 1743409708661,
      "end": 1743409708661,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1743409708661,
      "end": 1743409708661,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1743409708661,
      "end": 1743409708661,
      "order": "normal"
    }
  ]
}
