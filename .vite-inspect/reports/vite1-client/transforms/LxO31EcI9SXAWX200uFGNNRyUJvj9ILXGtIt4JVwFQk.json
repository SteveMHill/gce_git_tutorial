{
  "resolvedId": "/Users/stevenhill/gce_git_tutorial/node_modules/yaml/browser/dist/nodes/Alias.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { anchorIsValid } from '../doc/anchors.js';\nimport { visit } from '../visit.js';\nimport { ALIAS, isAlias, isCollection, isPair } from './identity.js';\nimport { NodeBase } from './Node.js';\nimport { toJS } from './toJS.js';\n\nclass Alias extends NodeBase {\n    constructor(source) {\n        super(ALIAS);\n        this.source = source;\n        Object.defineProperty(this, 'tag', {\n            set() {\n                throw new Error('Alias nodes cannot have tags');\n            }\n        });\n    }\n    /**\n     * Resolve the value of this alias within `doc`, finding the last\n     * instance of the `source` anchor before this node.\n     */\n    resolve(doc) {\n        let found = undefined;\n        visit(doc, {\n            Node: (_key, node) => {\n                if (node === this)\n                    return visit.BREAK;\n                if (node.anchor === this.source)\n                    found = node;\n            }\n        });\n        return found;\n    }\n    toJSON(_arg, ctx) {\n        if (!ctx)\n            return { source: this.source };\n        const { anchors, doc, maxAliasCount } = ctx;\n        const source = this.resolve(doc);\n        if (!source) {\n            const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;\n            throw new ReferenceError(msg);\n        }\n        let data = anchors.get(source);\n        if (!data) {\n            // Resolve anchors for Node.prototype.toJS()\n            toJS(source, null, ctx);\n            data = anchors.get(source);\n        }\n        /* istanbul ignore if */\n        if (!data || data.res === undefined) {\n            const msg = 'This should not happen: Alias anchor was not resolved?';\n            throw new ReferenceError(msg);\n        }\n        if (maxAliasCount >= 0) {\n            data.count += 1;\n            if (data.aliasCount === 0)\n                data.aliasCount = getAliasCount(doc, source, anchors);\n            if (data.count * data.aliasCount > maxAliasCount) {\n                const msg = 'Excessive alias count indicates a resource exhaustion attack';\n                throw new ReferenceError(msg);\n            }\n        }\n        return data.res;\n    }\n    toString(ctx, _onComment, _onChompKeep) {\n        const src = `*${this.source}`;\n        if (ctx) {\n            anchorIsValid(this.source);\n            if (ctx.options.verifyAliasOrder && !ctx.anchors.has(this.source)) {\n                const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;\n                throw new Error(msg);\n            }\n            if (ctx.implicitKey)\n                return `${src} `;\n        }\n        return src;\n    }\n}\nfunction getAliasCount(doc, node, anchors) {\n    if (isAlias(node)) {\n        const source = node.resolve(doc);\n        const anchor = anchors && source && anchors.get(source);\n        return anchor ? anchor.count * anchor.aliasCount : 0;\n    }\n    else if (isCollection(node)) {\n        let count = 0;\n        for (const item of node.items) {\n            const c = getAliasCount(doc, item, anchors);\n            if (c > count)\n                count = c;\n        }\n        return count;\n    }\n    else if (isPair(node)) {\n        const kc = getAliasCount(doc, node.key, anchors);\n        const vc = getAliasCount(doc, node.value, anchors);\n        return Math.max(kc, vc);\n    }\n    return 1;\n}\n\nexport { Alias };\n",
      "start": 1743409708622,
      "end": 1743409708633,
      "sourcemaps": null
    },
    {
      "name": "unplugin-vue-markdown",
      "start": 1743409708633,
      "end": 1743409708633,
      "order": "pre"
    },
    {
      "name": "slidev:flags",
      "start": 1743409708633,
      "end": 1743409708633,
      "order": "pre"
    },
    {
      "name": "unocss:transformers:pre",
      "start": 1743409708633,
      "end": 1743409708633,
      "order": "pre"
    },
    {
      "name": "unocss:global:build:scan",
      "start": 1743409708633,
      "end": 1743409708633,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1743409708633,
      "end": 1743409708633,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1743409708633,
      "end": 1743409708633,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1743409708633,
      "end": 1743409708633,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1743409708633,
      "end": 1743409708633,
      "order": "normal"
    },
    {
      "name": "slidev:layout-wrapper",
      "start": 1743409708633,
      "end": 1743409708633,
      "order": "normal"
    },
    {
      "name": "slidev:context-injection",
      "start": 1743409708633,
      "end": 1743409708633,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1743409708633,
      "end": 1743409708633,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1743409708633,
      "end": 1743409708633,
      "order": "normal"
    },
    {
      "name": "slidev:hmr-patch",
      "start": 1743409708633,
      "end": 1743409708633,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:undefined",
      "start": 1743409708633,
      "end": 1743409708633,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1743409708633,
      "end": 1743409708633,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1743409708633,
      "end": 1743409708633,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1743409708633,
      "end": 1743409708633,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1743409708633,
      "end": 1743409708633,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1743409708633,
      "end": 1743409708633,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1743409708633,
      "end": 1743409708633,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1743409708633,
      "end": 1743409708633,
      "order": "normal"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1743409708633,
      "end": 1743409708633,
      "order": "post"
    },
    {
      "name": "unocss:transformers:post",
      "start": 1743409708633,
      "end": 1743409708633,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1743409708633,
      "end": 1743409708633,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1743409708633,
      "end": 1743409708633,
      "order": "normal"
    }
  ]
}
