{
  "resolvedId": "/Users/stevenhill/gce_git_tutorial/node_modules/mermaid/dist/chunks/mermaid.esm/mindmap-definition-TI5ONXTW.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import {\n  cytoscape as cytoscape2\n} from \"./chunk-COUQ6RZ3.mjs\";\nimport {\n  selectSvgElement\n} from \"./chunk-YIX7P6T4.mjs\";\nimport {\n  createText\n} from \"./chunk-STFVS7YW.mjs\";\nimport {\n  parseFontSize\n} from \"./chunk-YFKFDTKC.mjs\";\nimport \"./chunk-GKOISANM.mjs\";\nimport {\n  darken_default,\n  defaultConfig_default,\n  getConfig2 as getConfig,\n  is_dark_default,\n  lighten_default,\n  log,\n  sanitizeText,\n  select_default,\n  setupGraphViewbox\n} from \"./chunk-3L32CQKD.mjs\";\nimport \"./chunk-HD3LK5B5.mjs\";\nimport {\n  __commonJS,\n  __name,\n  __toESM\n} from \"./chunk-DLQEHMXD.mjs\";\n\n// ../../node_modules/.pnpm/layout-base@1.0.2/node_modules/layout-base/layout-base.js\nvar require_layout_base = __commonJS({\n  \"../../node_modules/.pnpm/layout-base@1.0.2/node_modules/layout-base/layout-base.js\"(exports, module) {\n    \"use strict\";\n    (/* @__PURE__ */ __name(function webpackUniversalModuleDefinition(root, factory) {\n      if (typeof exports === \"object\" && typeof module === \"object\")\n        module.exports = factory();\n      else if (typeof define === \"function\" && define.amd)\n        define([], factory);\n      else if (typeof exports === \"object\")\n        exports[\"layoutBase\"] = factory();\n      else\n        root[\"layoutBase\"] = factory();\n    }, \"webpackUniversalModuleDefinition\"))(exports, function() {\n      return (\n        /******/\n        function(modules) {\n          var installedModules = {};\n          function __webpack_require__(moduleId) {\n            if (installedModules[moduleId]) {\n              return installedModules[moduleId].exports;\n            }\n            var module2 = installedModules[moduleId] = {\n              /******/\n              i: moduleId,\n              /******/\n              l: false,\n              /******/\n              exports: {}\n              /******/\n            };\n            modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);\n            module2.l = true;\n            return module2.exports;\n          }\n          __name(__webpack_require__, \"__webpack_require__\");\n          __webpack_require__.m = modules;\n          __webpack_require__.c = installedModules;\n          __webpack_require__.i = function(value) {\n            return value;\n          };\n          __webpack_require__.d = function(exports2, name, getter) {\n            if (!__webpack_require__.o(exports2, name)) {\n              Object.defineProperty(exports2, name, {\n                /******/\n                configurable: false,\n                /******/\n                enumerable: true,\n                /******/\n                get: getter\n                /******/\n              });\n            }\n          };\n          __webpack_require__.n = function(module2) {\n            var getter = module2 && module2.__esModule ? (\n              /******/\n              /* @__PURE__ */ __name(function getDefault() {\n                return module2[\"default\"];\n              }, \"getDefault\")\n            ) : (\n              /******/\n              /* @__PURE__ */ __name(function getModuleExports() {\n                return module2;\n              }, \"getModuleExports\")\n            );\n            __webpack_require__.d(getter, \"a\", getter);\n            return getter;\n          };\n          __webpack_require__.o = function(object, property) {\n            return Object.prototype.hasOwnProperty.call(object, property);\n          };\n          __webpack_require__.p = \"\";\n          return __webpack_require__(__webpack_require__.s = 26);\n        }([\n          /* 0 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            function LayoutConstants() {\n            }\n            __name(LayoutConstants, \"LayoutConstants\");\n            LayoutConstants.QUALITY = 1;\n            LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED = false;\n            LayoutConstants.DEFAULT_INCREMENTAL = false;\n            LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT = true;\n            LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT = false;\n            LayoutConstants.DEFAULT_ANIMATION_PERIOD = 50;\n            LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES = false;\n            LayoutConstants.DEFAULT_GRAPH_MARGIN = 15;\n            LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = false;\n            LayoutConstants.SIMPLE_NODE_SIZE = 40;\n            LayoutConstants.SIMPLE_NODE_HALF_SIZE = LayoutConstants.SIMPLE_NODE_SIZE / 2;\n            LayoutConstants.EMPTY_COMPOUND_NODE_SIZE = 40;\n            LayoutConstants.MIN_EDGE_LENGTH = 1;\n            LayoutConstants.WORLD_BOUNDARY = 1e6;\n            LayoutConstants.INITIAL_WORLD_BOUNDARY = LayoutConstants.WORLD_BOUNDARY / 1e3;\n            LayoutConstants.WORLD_CENTER_X = 1200;\n            LayoutConstants.WORLD_CENTER_Y = 900;\n            module2.exports = LayoutConstants;\n          },\n          /* 1 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            var LGraphObject = __webpack_require__(2);\n            var IGeometry = __webpack_require__(8);\n            var IMath = __webpack_require__(9);\n            function LEdge(source, target, vEdge) {\n              LGraphObject.call(this, vEdge);\n              this.isOverlapingSourceAndTarget = false;\n              this.vGraphObject = vEdge;\n              this.bendpoints = [];\n              this.source = source;\n              this.target = target;\n            }\n            __name(LEdge, \"LEdge\");\n            LEdge.prototype = Object.create(LGraphObject.prototype);\n            for (var prop in LGraphObject) {\n              LEdge[prop] = LGraphObject[prop];\n            }\n            LEdge.prototype.getSource = function() {\n              return this.source;\n            };\n            LEdge.prototype.getTarget = function() {\n              return this.target;\n            };\n            LEdge.prototype.isInterGraph = function() {\n              return this.isInterGraph;\n            };\n            LEdge.prototype.getLength = function() {\n              return this.length;\n            };\n            LEdge.prototype.isOverlapingSourceAndTarget = function() {\n              return this.isOverlapingSourceAndTarget;\n            };\n            LEdge.prototype.getBendpoints = function() {\n              return this.bendpoints;\n            };\n            LEdge.prototype.getLca = function() {\n              return this.lca;\n            };\n            LEdge.prototype.getSourceInLca = function() {\n              return this.sourceInLca;\n            };\n            LEdge.prototype.getTargetInLca = function() {\n              return this.targetInLca;\n            };\n            LEdge.prototype.getOtherEnd = function(node) {\n              if (this.source === node) {\n                return this.target;\n              } else if (this.target === node) {\n                return this.source;\n              } else {\n                throw \"Node is not incident with this edge\";\n              }\n            };\n            LEdge.prototype.getOtherEndInGraph = function(node, graph) {\n              var otherEnd = this.getOtherEnd(node);\n              var root = graph.getGraphManager().getRoot();\n              while (true) {\n                if (otherEnd.getOwner() == graph) {\n                  return otherEnd;\n                }\n                if (otherEnd.getOwner() == root) {\n                  break;\n                }\n                otherEnd = otherEnd.getOwner().getParent();\n              }\n              return null;\n            };\n            LEdge.prototype.updateLength = function() {\n              var clipPointCoordinates = new Array(4);\n              this.isOverlapingSourceAndTarget = IGeometry.getIntersection(this.target.getRect(), this.source.getRect(), clipPointCoordinates);\n              if (!this.isOverlapingSourceAndTarget) {\n                this.lengthX = clipPointCoordinates[0] - clipPointCoordinates[2];\n                this.lengthY = clipPointCoordinates[1] - clipPointCoordinates[3];\n                if (Math.abs(this.lengthX) < 1) {\n                  this.lengthX = IMath.sign(this.lengthX);\n                }\n                if (Math.abs(this.lengthY) < 1) {\n                  this.lengthY = IMath.sign(this.lengthY);\n                }\n                this.length = Math.sqrt(this.lengthX * this.lengthX + this.lengthY * this.lengthY);\n              }\n            };\n            LEdge.prototype.updateLengthSimple = function() {\n              this.lengthX = this.target.getCenterX() - this.source.getCenterX();\n              this.lengthY = this.target.getCenterY() - this.source.getCenterY();\n              if (Math.abs(this.lengthX) < 1) {\n                this.lengthX = IMath.sign(this.lengthX);\n              }\n              if (Math.abs(this.lengthY) < 1) {\n                this.lengthY = IMath.sign(this.lengthY);\n              }\n              this.length = Math.sqrt(this.lengthX * this.lengthX + this.lengthY * this.lengthY);\n            };\n            module2.exports = LEdge;\n          },\n          /* 2 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            function LGraphObject(vGraphObject) {\n              this.vGraphObject = vGraphObject;\n            }\n            __name(LGraphObject, \"LGraphObject\");\n            module2.exports = LGraphObject;\n          },\n          /* 3 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            var LGraphObject = __webpack_require__(2);\n            var Integer = __webpack_require__(10);\n            var RectangleD = __webpack_require__(13);\n            var LayoutConstants = __webpack_require__(0);\n            var RandomSeed = __webpack_require__(16);\n            var PointD = __webpack_require__(4);\n            function LNode(gm, loc, size, vNode) {\n              if (size == null && vNode == null) {\n                vNode = loc;\n              }\n              LGraphObject.call(this, vNode);\n              if (gm.graphManager != null) gm = gm.graphManager;\n              this.estimatedSize = Integer.MIN_VALUE;\n              this.inclusionTreeDepth = Integer.MAX_VALUE;\n              this.vGraphObject = vNode;\n              this.edges = [];\n              this.graphManager = gm;\n              if (size != null && loc != null) this.rect = new RectangleD(loc.x, loc.y, size.width, size.height);\n              else this.rect = new RectangleD();\n            }\n            __name(LNode, \"LNode\");\n            LNode.prototype = Object.create(LGraphObject.prototype);\n            for (var prop in LGraphObject) {\n              LNode[prop] = LGraphObject[prop];\n            }\n            LNode.prototype.getEdges = function() {\n              return this.edges;\n            };\n            LNode.prototype.getChild = function() {\n              return this.child;\n            };\n            LNode.prototype.getOwner = function() {\n              return this.owner;\n            };\n            LNode.prototype.getWidth = function() {\n              return this.rect.width;\n            };\n            LNode.prototype.setWidth = function(width) {\n              this.rect.width = width;\n            };\n            LNode.prototype.getHeight = function() {\n              return this.rect.height;\n            };\n            LNode.prototype.setHeight = function(height) {\n              this.rect.height = height;\n            };\n            LNode.prototype.getCenterX = function() {\n              return this.rect.x + this.rect.width / 2;\n            };\n            LNode.prototype.getCenterY = function() {\n              return this.rect.y + this.rect.height / 2;\n            };\n            LNode.prototype.getCenter = function() {\n              return new PointD(this.rect.x + this.rect.width / 2, this.rect.y + this.rect.height / 2);\n            };\n            LNode.prototype.getLocation = function() {\n              return new PointD(this.rect.x, this.rect.y);\n            };\n            LNode.prototype.getRect = function() {\n              return this.rect;\n            };\n            LNode.prototype.getDiagonal = function() {\n              return Math.sqrt(this.rect.width * this.rect.width + this.rect.height * this.rect.height);\n            };\n            LNode.prototype.getHalfTheDiagonal = function() {\n              return Math.sqrt(this.rect.height * this.rect.height + this.rect.width * this.rect.width) / 2;\n            };\n            LNode.prototype.setRect = function(upperLeft, dimension) {\n              this.rect.x = upperLeft.x;\n              this.rect.y = upperLeft.y;\n              this.rect.width = dimension.width;\n              this.rect.height = dimension.height;\n            };\n            LNode.prototype.setCenter = function(cx, cy) {\n              this.rect.x = cx - this.rect.width / 2;\n              this.rect.y = cy - this.rect.height / 2;\n            };\n            LNode.prototype.setLocation = function(x, y) {\n              this.rect.x = x;\n              this.rect.y = y;\n            };\n            LNode.prototype.moveBy = function(dx, dy) {\n              this.rect.x += dx;\n              this.rect.y += dy;\n            };\n            LNode.prototype.getEdgeListToNode = function(to) {\n              var edgeList = [];\n              var edge;\n              var self = this;\n              self.edges.forEach(function(edge2) {\n                if (edge2.target == to) {\n                  if (edge2.source != self) throw \"Incorrect edge source!\";\n                  edgeList.push(edge2);\n                }\n              });\n              return edgeList;\n            };\n            LNode.prototype.getEdgesBetween = function(other) {\n              var edgeList = [];\n              var edge;\n              var self = this;\n              self.edges.forEach(function(edge2) {\n                if (!(edge2.source == self || edge2.target == self)) throw \"Incorrect edge source and/or target\";\n                if (edge2.target == other || edge2.source == other) {\n                  edgeList.push(edge2);\n                }\n              });\n              return edgeList;\n            };\n            LNode.prototype.getNeighborsList = function() {\n              var neighbors = /* @__PURE__ */ new Set();\n              var self = this;\n              self.edges.forEach(function(edge) {\n                if (edge.source == self) {\n                  neighbors.add(edge.target);\n                } else {\n                  if (edge.target != self) {\n                    throw \"Incorrect incidency!\";\n                  }\n                  neighbors.add(edge.source);\n                }\n              });\n              return neighbors;\n            };\n            LNode.prototype.withChildren = function() {\n              var withNeighborsList = /* @__PURE__ */ new Set();\n              var childNode;\n              var children;\n              withNeighborsList.add(this);\n              if (this.child != null) {\n                var nodes2 = this.child.getNodes();\n                for (var i = 0; i < nodes2.length; i++) {\n                  childNode = nodes2[i];\n                  children = childNode.withChildren();\n                  children.forEach(function(node) {\n                    withNeighborsList.add(node);\n                  });\n                }\n              }\n              return withNeighborsList;\n            };\n            LNode.prototype.getNoOfChildren = function() {\n              var noOfChildren = 0;\n              var childNode;\n              if (this.child == null) {\n                noOfChildren = 1;\n              } else {\n                var nodes2 = this.child.getNodes();\n                for (var i = 0; i < nodes2.length; i++) {\n                  childNode = nodes2[i];\n                  noOfChildren += childNode.getNoOfChildren();\n                }\n              }\n              if (noOfChildren == 0) {\n                noOfChildren = 1;\n              }\n              return noOfChildren;\n            };\n            LNode.prototype.getEstimatedSize = function() {\n              if (this.estimatedSize == Integer.MIN_VALUE) {\n                throw \"assert failed\";\n              }\n              return this.estimatedSize;\n            };\n            LNode.prototype.calcEstimatedSize = function() {\n              if (this.child == null) {\n                return this.estimatedSize = (this.rect.width + this.rect.height) / 2;\n              } else {\n                this.estimatedSize = this.child.calcEstimatedSize();\n                this.rect.width = this.estimatedSize;\n                this.rect.height = this.estimatedSize;\n                return this.estimatedSize;\n              }\n            };\n            LNode.prototype.scatter = function() {\n              var randomCenterX;\n              var randomCenterY;\n              var minX = -LayoutConstants.INITIAL_WORLD_BOUNDARY;\n              var maxX = LayoutConstants.INITIAL_WORLD_BOUNDARY;\n              randomCenterX = LayoutConstants.WORLD_CENTER_X + RandomSeed.nextDouble() * (maxX - minX) + minX;\n              var minY = -LayoutConstants.INITIAL_WORLD_BOUNDARY;\n              var maxY = LayoutConstants.INITIAL_WORLD_BOUNDARY;\n              randomCenterY = LayoutConstants.WORLD_CENTER_Y + RandomSeed.nextDouble() * (maxY - minY) + minY;\n              this.rect.x = randomCenterX;\n              this.rect.y = randomCenterY;\n            };\n            LNode.prototype.updateBounds = function() {\n              if (this.getChild() == null) {\n                throw \"assert failed\";\n              }\n              if (this.getChild().getNodes().length != 0) {\n                var childGraph = this.getChild();\n                childGraph.updateBounds(true);\n                this.rect.x = childGraph.getLeft();\n                this.rect.y = childGraph.getTop();\n                this.setWidth(childGraph.getRight() - childGraph.getLeft());\n                this.setHeight(childGraph.getBottom() - childGraph.getTop());\n                if (LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS) {\n                  var width = childGraph.getRight() - childGraph.getLeft();\n                  var height = childGraph.getBottom() - childGraph.getTop();\n                  if (this.labelWidth > width) {\n                    this.rect.x -= (this.labelWidth - width) / 2;\n                    this.setWidth(this.labelWidth);\n                  }\n                  if (this.labelHeight > height) {\n                    if (this.labelPos == \"center\") {\n                      this.rect.y -= (this.labelHeight - height) / 2;\n                    } else if (this.labelPos == \"top\") {\n                      this.rect.y -= this.labelHeight - height;\n                    }\n                    this.setHeight(this.labelHeight);\n                  }\n                }\n              }\n            };\n            LNode.prototype.getInclusionTreeDepth = function() {\n              if (this.inclusionTreeDepth == Integer.MAX_VALUE) {\n                throw \"assert failed\";\n              }\n              return this.inclusionTreeDepth;\n            };\n            LNode.prototype.transform = function(trans) {\n              var left = this.rect.x;\n              if (left > LayoutConstants.WORLD_BOUNDARY) {\n                left = LayoutConstants.WORLD_BOUNDARY;\n              } else if (left < -LayoutConstants.WORLD_BOUNDARY) {\n                left = -LayoutConstants.WORLD_BOUNDARY;\n              }\n              var top = this.rect.y;\n              if (top > LayoutConstants.WORLD_BOUNDARY) {\n                top = LayoutConstants.WORLD_BOUNDARY;\n              } else if (top < -LayoutConstants.WORLD_BOUNDARY) {\n                top = -LayoutConstants.WORLD_BOUNDARY;\n              }\n              var leftTop = new PointD(left, top);\n              var vLeftTop = trans.inverseTransformPoint(leftTop);\n              this.setLocation(vLeftTop.x, vLeftTop.y);\n            };\n            LNode.prototype.getLeft = function() {\n              return this.rect.x;\n            };\n            LNode.prototype.getRight = function() {\n              return this.rect.x + this.rect.width;\n            };\n            LNode.prototype.getTop = function() {\n              return this.rect.y;\n            };\n            LNode.prototype.getBottom = function() {\n              return this.rect.y + this.rect.height;\n            };\n            LNode.prototype.getParent = function() {\n              if (this.owner == null) {\n                return null;\n              }\n              return this.owner.getParent();\n            };\n            module2.exports = LNode;\n          },\n          /* 4 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            function PointD(x, y) {\n              if (x == null && y == null) {\n                this.x = 0;\n                this.y = 0;\n              } else {\n                this.x = x;\n                this.y = y;\n              }\n            }\n            __name(PointD, \"PointD\");\n            PointD.prototype.getX = function() {\n              return this.x;\n            };\n            PointD.prototype.getY = function() {\n              return this.y;\n            };\n            PointD.prototype.setX = function(x) {\n              this.x = x;\n            };\n            PointD.prototype.setY = function(y) {\n              this.y = y;\n            };\n            PointD.prototype.getDifference = function(pt) {\n              return new DimensionD(this.x - pt.x, this.y - pt.y);\n            };\n            PointD.prototype.getCopy = function() {\n              return new PointD(this.x, this.y);\n            };\n            PointD.prototype.translate = function(dim) {\n              this.x += dim.width;\n              this.y += dim.height;\n              return this;\n            };\n            module2.exports = PointD;\n          },\n          /* 5 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            var LGraphObject = __webpack_require__(2);\n            var Integer = __webpack_require__(10);\n            var LayoutConstants = __webpack_require__(0);\n            var LGraphManager = __webpack_require__(6);\n            var LNode = __webpack_require__(3);\n            var LEdge = __webpack_require__(1);\n            var RectangleD = __webpack_require__(13);\n            var Point2 = __webpack_require__(12);\n            var LinkedList = __webpack_require__(11);\n            function LGraph(parent, obj2, vGraph) {\n              LGraphObject.call(this, vGraph);\n              this.estimatedSize = Integer.MIN_VALUE;\n              this.margin = LayoutConstants.DEFAULT_GRAPH_MARGIN;\n              this.edges = [];\n              this.nodes = [];\n              this.isConnected = false;\n              this.parent = parent;\n              if (obj2 != null && obj2 instanceof LGraphManager) {\n                this.graphManager = obj2;\n              } else if (obj2 != null && obj2 instanceof Layout) {\n                this.graphManager = obj2.graphManager;\n              }\n            }\n            __name(LGraph, \"LGraph\");\n            LGraph.prototype = Object.create(LGraphObject.prototype);\n            for (var prop in LGraphObject) {\n              LGraph[prop] = LGraphObject[prop];\n            }\n            LGraph.prototype.getNodes = function() {\n              return this.nodes;\n            };\n            LGraph.prototype.getEdges = function() {\n              return this.edges;\n            };\n            LGraph.prototype.getGraphManager = function() {\n              return this.graphManager;\n            };\n            LGraph.prototype.getParent = function() {\n              return this.parent;\n            };\n            LGraph.prototype.getLeft = function() {\n              return this.left;\n            };\n            LGraph.prototype.getRight = function() {\n              return this.right;\n            };\n            LGraph.prototype.getTop = function() {\n              return this.top;\n            };\n            LGraph.prototype.getBottom = function() {\n              return this.bottom;\n            };\n            LGraph.prototype.isConnected = function() {\n              return this.isConnected;\n            };\n            LGraph.prototype.add = function(obj1, sourceNode, targetNode) {\n              if (sourceNode == null && targetNode == null) {\n                var newNode = obj1;\n                if (this.graphManager == null) {\n                  throw \"Graph has no graph mgr!\";\n                }\n                if (this.getNodes().indexOf(newNode) > -1) {\n                  throw \"Node already in graph!\";\n                }\n                newNode.owner = this;\n                this.getNodes().push(newNode);\n                return newNode;\n              } else {\n                var newEdge = obj1;\n                if (!(this.getNodes().indexOf(sourceNode) > -1 && this.getNodes().indexOf(targetNode) > -1)) {\n                  throw \"Source or target not in graph!\";\n                }\n                if (!(sourceNode.owner == targetNode.owner && sourceNode.owner == this)) {\n                  throw \"Both owners must be this graph!\";\n                }\n                if (sourceNode.owner != targetNode.owner) {\n                  return null;\n                }\n                newEdge.source = sourceNode;\n                newEdge.target = targetNode;\n                newEdge.isInterGraph = false;\n                this.getEdges().push(newEdge);\n                sourceNode.edges.push(newEdge);\n                if (targetNode != sourceNode) {\n                  targetNode.edges.push(newEdge);\n                }\n                return newEdge;\n              }\n            };\n            LGraph.prototype.remove = function(obj) {\n              var node = obj;\n              if (obj instanceof LNode) {\n                if (node == null) {\n                  throw \"Node is null!\";\n                }\n                if (!(node.owner != null && node.owner == this)) {\n                  throw \"Owner graph is invalid!\";\n                }\n                if (this.graphManager == null) {\n                  throw \"Owner graph manager is invalid!\";\n                }\n                var edgesToBeRemoved = node.edges.slice();\n                var edge;\n                var s = edgesToBeRemoved.length;\n                for (var i = 0; i < s; i++) {\n                  edge = edgesToBeRemoved[i];\n                  if (edge.isInterGraph) {\n                    this.graphManager.remove(edge);\n                  } else {\n                    edge.source.owner.remove(edge);\n                  }\n                }\n                var index = this.nodes.indexOf(node);\n                if (index == -1) {\n                  throw \"Node not in owner node list!\";\n                }\n                this.nodes.splice(index, 1);\n              } else if (obj instanceof LEdge) {\n                var edge = obj;\n                if (edge == null) {\n                  throw \"Edge is null!\";\n                }\n                if (!(edge.source != null && edge.target != null)) {\n                  throw \"Source and/or target is null!\";\n                }\n                if (!(edge.source.owner != null && edge.target.owner != null && edge.source.owner == this && edge.target.owner == this)) {\n                  throw \"Source and/or target owner is invalid!\";\n                }\n                var sourceIndex = edge.source.edges.indexOf(edge);\n                var targetIndex = edge.target.edges.indexOf(edge);\n                if (!(sourceIndex > -1 && targetIndex > -1)) {\n                  throw \"Source and/or target doesn't know this edge!\";\n                }\n                edge.source.edges.splice(sourceIndex, 1);\n                if (edge.target != edge.source) {\n                  edge.target.edges.splice(targetIndex, 1);\n                }\n                var index = edge.source.owner.getEdges().indexOf(edge);\n                if (index == -1) {\n                  throw \"Not in owner's edge list!\";\n                }\n                edge.source.owner.getEdges().splice(index, 1);\n              }\n            };\n            LGraph.prototype.updateLeftTop = function() {\n              var top = Integer.MAX_VALUE;\n              var left = Integer.MAX_VALUE;\n              var nodeTop;\n              var nodeLeft;\n              var margin;\n              var nodes2 = this.getNodes();\n              var s = nodes2.length;\n              for (var i = 0; i < s; i++) {\n                var lNode = nodes2[i];\n                nodeTop = lNode.getTop();\n                nodeLeft = lNode.getLeft();\n                if (top > nodeTop) {\n                  top = nodeTop;\n                }\n                if (left > nodeLeft) {\n                  left = nodeLeft;\n                }\n              }\n              if (top == Integer.MAX_VALUE) {\n                return null;\n              }\n              if (nodes2[0].getParent().paddingLeft != void 0) {\n                margin = nodes2[0].getParent().paddingLeft;\n              } else {\n                margin = this.margin;\n              }\n              this.left = left - margin;\n              this.top = top - margin;\n              return new Point2(this.left, this.top);\n            };\n            LGraph.prototype.updateBounds = function(recursive) {\n              var left = Integer.MAX_VALUE;\n              var right = -Integer.MAX_VALUE;\n              var top = Integer.MAX_VALUE;\n              var bottom = -Integer.MAX_VALUE;\n              var nodeLeft;\n              var nodeRight;\n              var nodeTop;\n              var nodeBottom;\n              var margin;\n              var nodes2 = this.nodes;\n              var s = nodes2.length;\n              for (var i = 0; i < s; i++) {\n                var lNode = nodes2[i];\n                if (recursive && lNode.child != null) {\n                  lNode.updateBounds();\n                }\n                nodeLeft = lNode.getLeft();\n                nodeRight = lNode.getRight();\n                nodeTop = lNode.getTop();\n                nodeBottom = lNode.getBottom();\n                if (left > nodeLeft) {\n                  left = nodeLeft;\n                }\n                if (right < nodeRight) {\n                  right = nodeRight;\n                }\n                if (top > nodeTop) {\n                  top = nodeTop;\n                }\n                if (bottom < nodeBottom) {\n                  bottom = nodeBottom;\n                }\n              }\n              var boundingRect = new RectangleD(left, top, right - left, bottom - top);\n              if (left == Integer.MAX_VALUE) {\n                this.left = this.parent.getLeft();\n                this.right = this.parent.getRight();\n                this.top = this.parent.getTop();\n                this.bottom = this.parent.getBottom();\n              }\n              if (nodes2[0].getParent().paddingLeft != void 0) {\n                margin = nodes2[0].getParent().paddingLeft;\n              } else {\n                margin = this.margin;\n              }\n              this.left = boundingRect.x - margin;\n              this.right = boundingRect.x + boundingRect.width + margin;\n              this.top = boundingRect.y - margin;\n              this.bottom = boundingRect.y + boundingRect.height + margin;\n            };\n            LGraph.calculateBounds = function(nodes2) {\n              var left = Integer.MAX_VALUE;\n              var right = -Integer.MAX_VALUE;\n              var top = Integer.MAX_VALUE;\n              var bottom = -Integer.MAX_VALUE;\n              var nodeLeft;\n              var nodeRight;\n              var nodeTop;\n              var nodeBottom;\n              var s = nodes2.length;\n              for (var i = 0; i < s; i++) {\n                var lNode = nodes2[i];\n                nodeLeft = lNode.getLeft();\n                nodeRight = lNode.getRight();\n                nodeTop = lNode.getTop();\n                nodeBottom = lNode.getBottom();\n                if (left > nodeLeft) {\n                  left = nodeLeft;\n                }\n                if (right < nodeRight) {\n                  right = nodeRight;\n                }\n                if (top > nodeTop) {\n                  top = nodeTop;\n                }\n                if (bottom < nodeBottom) {\n                  bottom = nodeBottom;\n                }\n              }\n              var boundingRect = new RectangleD(left, top, right - left, bottom - top);\n              return boundingRect;\n            };\n            LGraph.prototype.getInclusionTreeDepth = function() {\n              if (this == this.graphManager.getRoot()) {\n                return 1;\n              } else {\n                return this.parent.getInclusionTreeDepth();\n              }\n            };\n            LGraph.prototype.getEstimatedSize = function() {\n              if (this.estimatedSize == Integer.MIN_VALUE) {\n                throw \"assert failed\";\n              }\n              return this.estimatedSize;\n            };\n            LGraph.prototype.calcEstimatedSize = function() {\n              var size = 0;\n              var nodes2 = this.nodes;\n              var s = nodes2.length;\n              for (var i = 0; i < s; i++) {\n                var lNode = nodes2[i];\n                size += lNode.calcEstimatedSize();\n              }\n              if (size == 0) {\n                this.estimatedSize = LayoutConstants.EMPTY_COMPOUND_NODE_SIZE;\n              } else {\n                this.estimatedSize = size / Math.sqrt(this.nodes.length);\n              }\n              return this.estimatedSize;\n            };\n            LGraph.prototype.updateConnected = function() {\n              var self = this;\n              if (this.nodes.length == 0) {\n                this.isConnected = true;\n                return;\n              }\n              var queue = new LinkedList();\n              var visited = /* @__PURE__ */ new Set();\n              var currentNode = this.nodes[0];\n              var neighborEdges;\n              var currentNeighbor;\n              var childrenOfNode = currentNode.withChildren();\n              childrenOfNode.forEach(function(node) {\n                queue.push(node);\n                visited.add(node);\n              });\n              while (queue.length !== 0) {\n                currentNode = queue.shift();\n                neighborEdges = currentNode.getEdges();\n                var size = neighborEdges.length;\n                for (var i = 0; i < size; i++) {\n                  var neighborEdge = neighborEdges[i];\n                  currentNeighbor = neighborEdge.getOtherEndInGraph(currentNode, this);\n                  if (currentNeighbor != null && !visited.has(currentNeighbor)) {\n                    var childrenOfNeighbor = currentNeighbor.withChildren();\n                    childrenOfNeighbor.forEach(function(node) {\n                      queue.push(node);\n                      visited.add(node);\n                    });\n                  }\n                }\n              }\n              this.isConnected = false;\n              if (visited.size >= this.nodes.length) {\n                var noOfVisitedInThisGraph = 0;\n                visited.forEach(function(visitedNode) {\n                  if (visitedNode.owner == self) {\n                    noOfVisitedInThisGraph++;\n                  }\n                });\n                if (noOfVisitedInThisGraph == this.nodes.length) {\n                  this.isConnected = true;\n                }\n              }\n            };\n            module2.exports = LGraph;\n          },\n          /* 6 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            var LGraph;\n            var LEdge = __webpack_require__(1);\n            function LGraphManager(layout) {\n              LGraph = __webpack_require__(5);\n              this.layout = layout;\n              this.graphs = [];\n              this.edges = [];\n            }\n            __name(LGraphManager, \"LGraphManager\");\n            LGraphManager.prototype.addRoot = function() {\n              var ngraph = this.layout.newGraph();\n              var nnode = this.layout.newNode(null);\n              var root = this.add(ngraph, nnode);\n              this.setRootGraph(root);\n              return this.rootGraph;\n            };\n            LGraphManager.prototype.add = function(newGraph, parentNode, newEdge, sourceNode, targetNode) {\n              if (newEdge == null && sourceNode == null && targetNode == null) {\n                if (newGraph == null) {\n                  throw \"Graph is null!\";\n                }\n                if (parentNode == null) {\n                  throw \"Parent node is null!\";\n                }\n                if (this.graphs.indexOf(newGraph) > -1) {\n                  throw \"Graph already in this graph mgr!\";\n                }\n                this.graphs.push(newGraph);\n                if (newGraph.parent != null) {\n                  throw \"Already has a parent!\";\n                }\n                if (parentNode.child != null) {\n                  throw \"Already has a child!\";\n                }\n                newGraph.parent = parentNode;\n                parentNode.child = newGraph;\n                return newGraph;\n              } else {\n                targetNode = newEdge;\n                sourceNode = parentNode;\n                newEdge = newGraph;\n                var sourceGraph = sourceNode.getOwner();\n                var targetGraph = targetNode.getOwner();\n                if (!(sourceGraph != null && sourceGraph.getGraphManager() == this)) {\n                  throw \"Source not in this graph mgr!\";\n                }\n                if (!(targetGraph != null && targetGraph.getGraphManager() == this)) {\n                  throw \"Target not in this graph mgr!\";\n                }\n                if (sourceGraph == targetGraph) {\n                  newEdge.isInterGraph = false;\n                  return sourceGraph.add(newEdge, sourceNode, targetNode);\n                } else {\n                  newEdge.isInterGraph = true;\n                  newEdge.source = sourceNode;\n                  newEdge.target = targetNode;\n                  if (this.edges.indexOf(newEdge) > -1) {\n                    throw \"Edge already in inter-graph edge list!\";\n                  }\n                  this.edges.push(newEdge);\n                  if (!(newEdge.source != null && newEdge.target != null)) {\n                    throw \"Edge source and/or target is null!\";\n                  }\n                  if (!(newEdge.source.edges.indexOf(newEdge) == -1 && newEdge.target.edges.indexOf(newEdge) == -1)) {\n                    throw \"Edge already in source and/or target incidency list!\";\n                  }\n                  newEdge.source.edges.push(newEdge);\n                  newEdge.target.edges.push(newEdge);\n                  return newEdge;\n                }\n              }\n            };\n            LGraphManager.prototype.remove = function(lObj) {\n              if (lObj instanceof LGraph) {\n                var graph = lObj;\n                if (graph.getGraphManager() != this) {\n                  throw \"Graph not in this graph mgr\";\n                }\n                if (!(graph == this.rootGraph || graph.parent != null && graph.parent.graphManager == this)) {\n                  throw \"Invalid parent node!\";\n                }\n                var edgesToBeRemoved = [];\n                edgesToBeRemoved = edgesToBeRemoved.concat(graph.getEdges());\n                var edge;\n                var s = edgesToBeRemoved.length;\n                for (var i = 0; i < s; i++) {\n                  edge = edgesToBeRemoved[i];\n                  graph.remove(edge);\n                }\n                var nodesToBeRemoved = [];\n                nodesToBeRemoved = nodesToBeRemoved.concat(graph.getNodes());\n                var node;\n                s = nodesToBeRemoved.length;\n                for (var i = 0; i < s; i++) {\n                  node = nodesToBeRemoved[i];\n                  graph.remove(node);\n                }\n                if (graph == this.rootGraph) {\n                  this.setRootGraph(null);\n                }\n                var index = this.graphs.indexOf(graph);\n                this.graphs.splice(index, 1);\n                graph.parent = null;\n              } else if (lObj instanceof LEdge) {\n                edge = lObj;\n                if (edge == null) {\n                  throw \"Edge is null!\";\n                }\n                if (!edge.isInterGraph) {\n                  throw \"Not an inter-graph edge!\";\n                }\n                if (!(edge.source != null && edge.target != null)) {\n                  throw \"Source and/or target is null!\";\n                }\n                if (!(edge.source.edges.indexOf(edge) != -1 && edge.target.edges.indexOf(edge) != -1)) {\n                  throw \"Source and/or target doesn't know this edge!\";\n                }\n                var index = edge.source.edges.indexOf(edge);\n                edge.source.edges.splice(index, 1);\n                index = edge.target.edges.indexOf(edge);\n                edge.target.edges.splice(index, 1);\n                if (!(edge.source.owner != null && edge.source.owner.getGraphManager() != null)) {\n                  throw \"Edge owner graph or owner graph manager is null!\";\n                }\n                if (edge.source.owner.getGraphManager().edges.indexOf(edge) == -1) {\n                  throw \"Not in owner graph manager's edge list!\";\n                }\n                var index = edge.source.owner.getGraphManager().edges.indexOf(edge);\n                edge.source.owner.getGraphManager().edges.splice(index, 1);\n              }\n            };\n            LGraphManager.prototype.updateBounds = function() {\n              this.rootGraph.updateBounds(true);\n            };\n            LGraphManager.prototype.getGraphs = function() {\n              return this.graphs;\n            };\n            LGraphManager.prototype.getAllNodes = function() {\n              if (this.allNodes == null) {\n                var nodeList = [];\n                var graphs = this.getGraphs();\n                var s = graphs.length;\n                for (var i = 0; i < s; i++) {\n                  nodeList = nodeList.concat(graphs[i].getNodes());\n                }\n                this.allNodes = nodeList;\n              }\n              return this.allNodes;\n            };\n            LGraphManager.prototype.resetAllNodes = function() {\n              this.allNodes = null;\n            };\n            LGraphManager.prototype.resetAllEdges = function() {\n              this.allEdges = null;\n            };\n            LGraphManager.prototype.resetAllNodesToApplyGravitation = function() {\n              this.allNodesToApplyGravitation = null;\n            };\n            LGraphManager.prototype.getAllEdges = function() {\n              if (this.allEdges == null) {\n                var edgeList = [];\n                var graphs = this.getGraphs();\n                var s = graphs.length;\n                for (var i = 0; i < graphs.length; i++) {\n                  edgeList = edgeList.concat(graphs[i].getEdges());\n                }\n                edgeList = edgeList.concat(this.edges);\n                this.allEdges = edgeList;\n              }\n              return this.allEdges;\n            };\n            LGraphManager.prototype.getAllNodesToApplyGravitation = function() {\n              return this.allNodesToApplyGravitation;\n            };\n            LGraphManager.prototype.setAllNodesToApplyGravitation = function(nodeList) {\n              if (this.allNodesToApplyGravitation != null) {\n                throw \"assert failed\";\n              }\n              this.allNodesToApplyGravitation = nodeList;\n            };\n            LGraphManager.prototype.getRoot = function() {\n              return this.rootGraph;\n            };\n            LGraphManager.prototype.setRootGraph = function(graph) {\n              if (graph.getGraphManager() != this) {\n                throw \"Root not in this graph mgr!\";\n              }\n              this.rootGraph = graph;\n              if (graph.parent == null) {\n                graph.parent = this.layout.newNode(\"Root node\");\n              }\n            };\n            LGraphManager.prototype.getLayout = function() {\n              return this.layout;\n            };\n            LGraphManager.prototype.isOneAncestorOfOther = function(firstNode, secondNode) {\n              if (!(firstNode != null && secondNode != null)) {\n                throw \"assert failed\";\n              }\n              if (firstNode == secondNode) {\n                return true;\n              }\n              var ownerGraph = firstNode.getOwner();\n              var parentNode;\n              do {\n                parentNode = ownerGraph.getParent();\n                if (parentNode == null) {\n                  break;\n                }\n                if (parentNode == secondNode) {\n                  return true;\n                }\n                ownerGraph = parentNode.getOwner();\n                if (ownerGraph == null) {\n                  break;\n                }\n              } while (true);\n              ownerGraph = secondNode.getOwner();\n              do {\n                parentNode = ownerGraph.getParent();\n                if (parentNode == null) {\n                  break;\n                }\n                if (parentNode == firstNode) {\n                  return true;\n                }\n                ownerGraph = parentNode.getOwner();\n                if (ownerGraph == null) {\n                  break;\n                }\n              } while (true);\n              return false;\n            };\n            LGraphManager.prototype.calcLowestCommonAncestors = function() {\n              var edge;\n              var sourceNode;\n              var targetNode;\n              var sourceAncestorGraph;\n              var targetAncestorGraph;\n              var edges = this.getAllEdges();\n              var s = edges.length;\n              for (var i = 0; i < s; i++) {\n                edge = edges[i];\n                sourceNode = edge.source;\n                targetNode = edge.target;\n                edge.lca = null;\n                edge.sourceInLca = sourceNode;\n                edge.targetInLca = targetNode;\n                if (sourceNode == targetNode) {\n                  edge.lca = sourceNode.getOwner();\n                  continue;\n                }\n                sourceAncestorGraph = sourceNode.getOwner();\n                while (edge.lca == null) {\n                  edge.targetInLca = targetNode;\n                  targetAncestorGraph = targetNode.getOwner();\n                  while (edge.lca == null) {\n                    if (targetAncestorGraph == sourceAncestorGraph) {\n                      edge.lca = targetAncestorGraph;\n                      break;\n                    }\n                    if (targetAncestorGraph == this.rootGraph) {\n                      break;\n                    }\n                    if (edge.lca != null) {\n                      throw \"assert failed\";\n                    }\n                    edge.targetInLca = targetAncestorGraph.getParent();\n                    targetAncestorGraph = edge.targetInLca.getOwner();\n                  }\n                  if (sourceAncestorGraph == this.rootGraph) {\n                    break;\n                  }\n                  if (edge.lca == null) {\n                    edge.sourceInLca = sourceAncestorGraph.getParent();\n                    sourceAncestorGraph = edge.sourceInLca.getOwner();\n                  }\n                }\n                if (edge.lca == null) {\n                  throw \"assert failed\";\n                }\n              }\n            };\n            LGraphManager.prototype.calcLowestCommonAncestor = function(firstNode, secondNode) {\n              if (firstNode == secondNode) {\n                return firstNode.getOwner();\n              }\n              var firstOwnerGraph = firstNode.getOwner();\n              do {\n                if (firstOwnerGraph == null) {\n                  break;\n                }\n                var secondOwnerGraph = secondNode.getOwner();\n                do {\n                  if (secondOwnerGraph == null) {\n                    break;\n                  }\n                  if (secondOwnerGraph == firstOwnerGraph) {\n                    return secondOwnerGraph;\n                  }\n                  secondOwnerGraph = secondOwnerGraph.getParent().getOwner();\n                } while (true);\n                firstOwnerGraph = firstOwnerGraph.getParent().getOwner();\n              } while (true);\n              return firstOwnerGraph;\n            };\n            LGraphManager.prototype.calcInclusionTreeDepths = function(graph, depth) {\n              if (graph == null && depth == null) {\n                graph = this.rootGraph;\n                depth = 1;\n              }\n              var node;\n              var nodes2 = graph.getNodes();\n              var s = nodes2.length;\n              for (var i = 0; i < s; i++) {\n                node = nodes2[i];\n                node.inclusionTreeDepth = depth;\n                if (node.child != null) {\n                  this.calcInclusionTreeDepths(node.child, depth + 1);\n                }\n              }\n            };\n            LGraphManager.prototype.includesInvalidEdge = function() {\n              var edge;\n              var s = this.edges.length;\n              for (var i = 0; i < s; i++) {\n                edge = this.edges[i];\n                if (this.isOneAncestorOfOther(edge.source, edge.target)) {\n                  return true;\n                }\n              }\n              return false;\n            };\n            module2.exports = LGraphManager;\n          },\n          /* 7 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            var LayoutConstants = __webpack_require__(0);\n            function FDLayoutConstants() {\n            }\n            __name(FDLayoutConstants, \"FDLayoutConstants\");\n            for (var prop in LayoutConstants) {\n              FDLayoutConstants[prop] = LayoutConstants[prop];\n            }\n            FDLayoutConstants.MAX_ITERATIONS = 2500;\n            FDLayoutConstants.DEFAULT_EDGE_LENGTH = 50;\n            FDLayoutConstants.DEFAULT_SPRING_STRENGTH = 0.45;\n            FDLayoutConstants.DEFAULT_REPULSION_STRENGTH = 4500;\n            FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH = 0.4;\n            FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = 1;\n            FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR = 3.8;\n            FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = 1.5;\n            FDLayoutConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION = true;\n            FDLayoutConstants.DEFAULT_USE_SMART_REPULSION_RANGE_CALCULATION = true;\n            FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = 0.3;\n            FDLayoutConstants.COOLING_ADAPTATION_FACTOR = 0.33;\n            FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT = 1e3;\n            FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT = 5e3;\n            FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL = 100;\n            FDLayoutConstants.MAX_NODE_DISPLACEMENT = FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL * 3;\n            FDLayoutConstants.MIN_REPULSION_DIST = FDLayoutConstants.DEFAULT_EDGE_LENGTH / 10;\n            FDLayoutConstants.CONVERGENCE_CHECK_PERIOD = 100;\n            FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = 0.1;\n            FDLayoutConstants.MIN_EDGE_LENGTH = 1;\n            FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD = 10;\n            module2.exports = FDLayoutConstants;\n          },\n          /* 8 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            var Point2 = __webpack_require__(12);\n            function IGeometry() {\n            }\n            __name(IGeometry, \"IGeometry\");\n            IGeometry.calcSeparationAmount = function(rectA, rectB, overlapAmount, separationBuffer) {\n              if (!rectA.intersects(rectB)) {\n                throw \"assert failed\";\n              }\n              var directions = new Array(2);\n              this.decideDirectionsForOverlappingNodes(rectA, rectB, directions);\n              overlapAmount[0] = Math.min(rectA.getRight(), rectB.getRight()) - Math.max(rectA.x, rectB.x);\n              overlapAmount[1] = Math.min(rectA.getBottom(), rectB.getBottom()) - Math.max(rectA.y, rectB.y);\n              if (rectA.getX() <= rectB.getX() && rectA.getRight() >= rectB.getRight()) {\n                overlapAmount[0] += Math.min(rectB.getX() - rectA.getX(), rectA.getRight() - rectB.getRight());\n              } else if (rectB.getX() <= rectA.getX() && rectB.getRight() >= rectA.getRight()) {\n                overlapAmount[0] += Math.min(rectA.getX() - rectB.getX(), rectB.getRight() - rectA.getRight());\n              }\n              if (rectA.getY() <= rectB.getY() && rectA.getBottom() >= rectB.getBottom()) {\n                overlapAmount[1] += Math.min(rectB.getY() - rectA.getY(), rectA.getBottom() - rectB.getBottom());\n              } else if (rectB.getY() <= rectA.getY() && rectB.getBottom() >= rectA.getBottom()) {\n                overlapAmount[1] += Math.min(rectA.getY() - rectB.getY(), rectB.getBottom() - rectA.getBottom());\n              }\n              var slope = Math.abs((rectB.getCenterY() - rectA.getCenterY()) / (rectB.getCenterX() - rectA.getCenterX()));\n              if (rectB.getCenterY() === rectA.getCenterY() && rectB.getCenterX() === rectA.getCenterX()) {\n                slope = 1;\n              }\n              var moveByY = slope * overlapAmount[0];\n              var moveByX = overlapAmount[1] / slope;\n              if (overlapAmount[0] < moveByX) {\n                moveByX = overlapAmount[0];\n              } else {\n                moveByY = overlapAmount[1];\n              }\n              overlapAmount[0] = -1 * directions[0] * (moveByX / 2 + separationBuffer);\n              overlapAmount[1] = -1 * directions[1] * (moveByY / 2 + separationBuffer);\n            };\n            IGeometry.decideDirectionsForOverlappingNodes = function(rectA, rectB, directions) {\n              if (rectA.getCenterX() < rectB.getCenterX()) {\n                directions[0] = -1;\n              } else {\n                directions[0] = 1;\n              }\n              if (rectA.getCenterY() < rectB.getCenterY()) {\n                directions[1] = -1;\n              } else {\n                directions[1] = 1;\n              }\n            };\n            IGeometry.getIntersection2 = function(rectA, rectB, result) {\n              var p1x = rectA.getCenterX();\n              var p1y = rectA.getCenterY();\n              var p2x = rectB.getCenterX();\n              var p2y = rectB.getCenterY();\n              if (rectA.intersects(rectB)) {\n                result[0] = p1x;\n                result[1] = p1y;\n                result[2] = p2x;\n                result[3] = p2y;\n                return true;\n              }\n              var topLeftAx = rectA.getX();\n              var topLeftAy = rectA.getY();\n              var topRightAx = rectA.getRight();\n              var bottomLeftAx = rectA.getX();\n              var bottomLeftAy = rectA.getBottom();\n              var bottomRightAx = rectA.getRight();\n              var halfWidthA = rectA.getWidthHalf();\n              var halfHeightA = rectA.getHeightHalf();\n              var topLeftBx = rectB.getX();\n              var topLeftBy = rectB.getY();\n              var topRightBx = rectB.getRight();\n              var bottomLeftBx = rectB.getX();\n              var bottomLeftBy = rectB.getBottom();\n              var bottomRightBx = rectB.getRight();\n              var halfWidthB = rectB.getWidthHalf();\n              var halfHeightB = rectB.getHeightHalf();\n              var clipPointAFound = false;\n              var clipPointBFound = false;\n              if (p1x === p2x) {\n                if (p1y > p2y) {\n                  result[0] = p1x;\n                  result[1] = topLeftAy;\n                  result[2] = p2x;\n                  result[3] = bottomLeftBy;\n                  return false;\n                } else if (p1y < p2y) {\n                  result[0] = p1x;\n                  result[1] = bottomLeftAy;\n                  result[2] = p2x;\n                  result[3] = topLeftBy;\n                  return false;\n                } else {\n                }\n              } else if (p1y === p2y) {\n                if (p1x > p2x) {\n                  result[0] = topLeftAx;\n                  result[1] = p1y;\n                  result[2] = topRightBx;\n                  result[3] = p2y;\n                  return false;\n                } else if (p1x < p2x) {\n                  result[0] = topRightAx;\n                  result[1] = p1y;\n                  result[2] = topLeftBx;\n                  result[3] = p2y;\n                  return false;\n                } else {\n                }\n              } else {\n                var slopeA = rectA.height / rectA.width;\n                var slopeB = rectB.height / rectB.width;\n                var slopePrime = (p2y - p1y) / (p2x - p1x);\n                var cardinalDirectionA = void 0;\n                var cardinalDirectionB = void 0;\n                var tempPointAx = void 0;\n                var tempPointAy = void 0;\n                var tempPointBx = void 0;\n                var tempPointBy = void 0;\n                if (-slopeA === slopePrime) {\n                  if (p1x > p2x) {\n                    result[0] = bottomLeftAx;\n                    result[1] = bottomLeftAy;\n                    clipPointAFound = true;\n                  } else {\n                    result[0] = topRightAx;\n                    result[1] = topLeftAy;\n                    clipPointAFound = true;\n                  }\n                } else if (slopeA === slopePrime) {\n                  if (p1x > p2x) {\n                    result[0] = topLeftAx;\n                    result[1] = topLeftAy;\n                    clipPointAFound = true;\n                  } else {\n                    result[0] = bottomRightAx;\n                    result[1] = bottomLeftAy;\n                    clipPointAFound = true;\n                  }\n                }\n                if (-slopeB === slopePrime) {\n                  if (p2x > p1x) {\n                    result[2] = bottomLeftBx;\n                    result[3] = bottomLeftBy;\n                    clipPointBFound = true;\n                  } else {\n                    result[2] = topRightBx;\n                    result[3] = topLeftBy;\n                    clipPointBFound = true;\n                  }\n                } else if (slopeB === slopePrime) {\n                  if (p2x > p1x) {\n                    result[2] = topLeftBx;\n                    result[3] = topLeftBy;\n                    clipPointBFound = true;\n                  } else {\n                    result[2] = bottomRightBx;\n                    result[3] = bottomLeftBy;\n                    clipPointBFound = true;\n                  }\n                }\n                if (clipPointAFound && clipPointBFound) {\n                  return false;\n                }\n                if (p1x > p2x) {\n                  if (p1y > p2y) {\n                    cardinalDirectionA = this.getCardinalDirection(slopeA, slopePrime, 4);\n                    cardinalDirectionB = this.getCardinalDirection(slopeB, slopePrime, 2);\n                  } else {\n                    cardinalDirectionA = this.getCardinalDirection(-slopeA, slopePrime, 3);\n                    cardinalDirectionB = this.getCardinalDirection(-slopeB, slopePrime, 1);\n                  }\n                } else {\n                  if (p1y > p2y) {\n                    cardinalDirectionA = this.getCardinalDirection(-slopeA, slopePrime, 1);\n                    cardinalDirectionB = this.getCardinalDirection(-slopeB, slopePrime, 3);\n                  } else {\n                    cardinalDirectionA = this.getCardinalDirection(slopeA, slopePrime, 2);\n                    cardinalDirectionB = this.getCardinalDirection(slopeB, slopePrime, 4);\n                  }\n                }\n                if (!clipPointAFound) {\n                  switch (cardinalDirectionA) {\n                    case 1:\n                      tempPointAy = topLeftAy;\n                      tempPointAx = p1x + -halfHeightA / slopePrime;\n                      result[0] = tempPointAx;\n                      result[1] = tempPointAy;\n                      break;\n                    case 2:\n                      tempPointAx = bottomRightAx;\n                      tempPointAy = p1y + halfWidthA * slopePrime;\n                      result[0] = tempPointAx;\n                      result[1] = tempPointAy;\n                      break;\n                    case 3:\n                      tempPointAy = bottomLeftAy;\n                      tempPointAx = p1x + halfHeightA / slopePrime;\n                      result[0] = tempPointAx;\n                      result[1] = tempPointAy;\n                      break;\n                    case 4:\n                      tempPointAx = bottomLeftAx;\n                      tempPointAy = p1y + -halfWidthA * slopePrime;\n                      result[0] = tempPointAx;\n                      result[1] = tempPointAy;\n                      break;\n                  }\n                }\n                if (!clipPointBFound) {\n                  switch (cardinalDirectionB) {\n                    case 1:\n                      tempPointBy = topLeftBy;\n                      tempPointBx = p2x + -halfHeightB / slopePrime;\n                      result[2] = tempPointBx;\n                      result[3] = tempPointBy;\n                      break;\n                    case 2:\n                      tempPointBx = bottomRightBx;\n                      tempPointBy = p2y + halfWidthB * slopePrime;\n                      result[2] = tempPointBx;\n                      result[3] = tempPointBy;\n                      break;\n                    case 3:\n                      tempPointBy = bottomLeftBy;\n                      tempPointBx = p2x + halfHeightB / slopePrime;\n                      result[2] = tempPointBx;\n                      result[3] = tempPointBy;\n                      break;\n                    case 4:\n                      tempPointBx = bottomLeftBx;\n                      tempPointBy = p2y + -halfWidthB * slopePrime;\n                      result[2] = tempPointBx;\n                      result[3] = tempPointBy;\n                      break;\n                  }\n                }\n              }\n              return false;\n            };\n            IGeometry.getCardinalDirection = function(slope, slopePrime, line) {\n              if (slope > slopePrime) {\n                return line;\n              } else {\n                return 1 + line % 4;\n              }\n            };\n            IGeometry.getIntersection = function(s1, s2, f1, f2) {\n              if (f2 == null) {\n                return this.getIntersection2(s1, s2, f1);\n              }\n              var x1 = s1.x;\n              var y1 = s1.y;\n              var x2 = s2.x;\n              var y2 = s2.y;\n              var x3 = f1.x;\n              var y3 = f1.y;\n              var x4 = f2.x;\n              var y4 = f2.y;\n              var x = void 0, y = void 0;\n              var a1 = void 0, a2 = void 0, b1 = void 0, b2 = void 0, c1 = void 0, c2 = void 0;\n              var denom = void 0;\n              a1 = y2 - y1;\n              b1 = x1 - x2;\n              c1 = x2 * y1 - x1 * y2;\n              a2 = y4 - y3;\n              b2 = x3 - x4;\n              c2 = x4 * y3 - x3 * y4;\n              denom = a1 * b2 - a2 * b1;\n              if (denom === 0) {\n                return null;\n              }\n              x = (b1 * c2 - b2 * c1) / denom;\n              y = (a2 * c1 - a1 * c2) / denom;\n              return new Point2(x, y);\n            };\n            IGeometry.angleOfVector = function(Cx, Cy, Nx, Ny) {\n              var C_angle = void 0;\n              if (Cx !== Nx) {\n                C_angle = Math.atan((Ny - Cy) / (Nx - Cx));\n                if (Nx < Cx) {\n                  C_angle += Math.PI;\n                } else if (Ny < Cy) {\n                  C_angle += this.TWO_PI;\n                }\n              } else if (Ny < Cy) {\n                C_angle = this.ONE_AND_HALF_PI;\n              } else {\n                C_angle = this.HALF_PI;\n              }\n              return C_angle;\n            };\n            IGeometry.doIntersect = function(p1, p2, p3, p4) {\n              var a = p1.x;\n              var b = p1.y;\n              var c = p2.x;\n              var d = p2.y;\n              var p = p3.x;\n              var q = p3.y;\n              var r = p4.x;\n              var s = p4.y;\n              var det = (c - a) * (s - q) - (r - p) * (d - b);\n              if (det === 0) {\n                return false;\n              } else {\n                var lambda = ((s - q) * (r - a) + (p - r) * (s - b)) / det;\n                var gamma = ((b - d) * (r - a) + (c - a) * (s - b)) / det;\n                return 0 < lambda && lambda < 1 && 0 < gamma && gamma < 1;\n              }\n            };\n            IGeometry.HALF_PI = 0.5 * Math.PI;\n            IGeometry.ONE_AND_HALF_PI = 1.5 * Math.PI;\n            IGeometry.TWO_PI = 2 * Math.PI;\n            IGeometry.THREE_PI = 3 * Math.PI;\n            module2.exports = IGeometry;\n          },\n          /* 9 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            function IMath() {\n            }\n            __name(IMath, \"IMath\");\n            IMath.sign = function(value) {\n              if (value > 0) {\n                return 1;\n              } else if (value < 0) {\n                return -1;\n              } else {\n                return 0;\n              }\n            };\n            IMath.floor = function(value) {\n              return value < 0 ? Math.ceil(value) : Math.floor(value);\n            };\n            IMath.ceil = function(value) {\n              return value < 0 ? Math.floor(value) : Math.ceil(value);\n            };\n            module2.exports = IMath;\n          },\n          /* 10 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            function Integer() {\n            }\n            __name(Integer, \"Integer\");\n            Integer.MAX_VALUE = 2147483647;\n            Integer.MIN_VALUE = -2147483648;\n            module2.exports = Integer;\n          },\n          /* 11 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            var _createClass = /* @__PURE__ */ function() {\n              function defineProperties(target, props) {\n                for (var i = 0; i < props.length; i++) {\n                  var descriptor = props[i];\n                  descriptor.enumerable = descriptor.enumerable || false;\n                  descriptor.configurable = true;\n                  if (\"value\" in descriptor) descriptor.writable = true;\n                  Object.defineProperty(target, descriptor.key, descriptor);\n                }\n              }\n              __name(defineProperties, \"defineProperties\");\n              return function(Constructor, protoProps, staticProps) {\n                if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                if (staticProps) defineProperties(Constructor, staticProps);\n                return Constructor;\n              };\n            }();\n            function _classCallCheck(instance2, Constructor) {\n              if (!(instance2 instanceof Constructor)) {\n                throw new TypeError(\"Cannot call a class as a function\");\n              }\n            }\n            __name(_classCallCheck, \"_classCallCheck\");\n            var nodeFrom = /* @__PURE__ */ __name(function nodeFrom2(value) {\n              return { value, next: null, prev: null };\n            }, \"nodeFrom\");\n            var add = /* @__PURE__ */ __name(function add2(prev, node, next2, list) {\n              if (prev !== null) {\n                prev.next = node;\n              } else {\n                list.head = node;\n              }\n              if (next2 !== null) {\n                next2.prev = node;\n              } else {\n                list.tail = node;\n              }\n              node.prev = prev;\n              node.next = next2;\n              list.length++;\n              return node;\n            }, \"add\");\n            var _remove = /* @__PURE__ */ __name(function _remove2(node, list) {\n              var prev = node.prev, next2 = node.next;\n              if (prev !== null) {\n                prev.next = next2;\n              } else {\n                list.head = next2;\n              }\n              if (next2 !== null) {\n                next2.prev = prev;\n              } else {\n                list.tail = prev;\n              }\n              node.prev = node.next = null;\n              list.length--;\n              return node;\n            }, \"_remove\");\n            var LinkedList = function() {\n              function LinkedList2(vals) {\n                var _this = this;\n                _classCallCheck(this, LinkedList2);\n                this.length = 0;\n                this.head = null;\n                this.tail = null;\n                if (vals != null) {\n                  vals.forEach(function(v) {\n                    return _this.push(v);\n                  });\n                }\n              }\n              __name(LinkedList2, \"LinkedList\");\n              _createClass(LinkedList2, [{\n                key: \"size\",\n                value: /* @__PURE__ */ __name(function size() {\n                  return this.length;\n                }, \"size\")\n              }, {\n                key: \"insertBefore\",\n                value: /* @__PURE__ */ __name(function insertBefore(val, otherNode) {\n                  return add(otherNode.prev, nodeFrom(val), otherNode, this);\n                }, \"insertBefore\")\n              }, {\n                key: \"insertAfter\",\n                value: /* @__PURE__ */ __name(function insertAfter(val, otherNode) {\n                  return add(otherNode, nodeFrom(val), otherNode.next, this);\n                }, \"insertAfter\")\n              }, {\n                key: \"insertNodeBefore\",\n                value: /* @__PURE__ */ __name(function insertNodeBefore(newNode, otherNode) {\n                  return add(otherNode.prev, newNode, otherNode, this);\n                }, \"insertNodeBefore\")\n              }, {\n                key: \"insertNodeAfter\",\n                value: /* @__PURE__ */ __name(function insertNodeAfter(newNode, otherNode) {\n                  return add(otherNode, newNode, otherNode.next, this);\n                }, \"insertNodeAfter\")\n              }, {\n                key: \"push\",\n                value: /* @__PURE__ */ __name(function push(val) {\n                  return add(this.tail, nodeFrom(val), null, this);\n                }, \"push\")\n              }, {\n                key: \"unshift\",\n                value: /* @__PURE__ */ __name(function unshift(val) {\n                  return add(null, nodeFrom(val), this.head, this);\n                }, \"unshift\")\n              }, {\n                key: \"remove\",\n                value: /* @__PURE__ */ __name(function remove(node) {\n                  return _remove(node, this);\n                }, \"remove\")\n              }, {\n                key: \"pop\",\n                value: /* @__PURE__ */ __name(function pop() {\n                  return _remove(this.tail, this).value;\n                }, \"pop\")\n              }, {\n                key: \"popNode\",\n                value: /* @__PURE__ */ __name(function popNode() {\n                  return _remove(this.tail, this);\n                }, \"popNode\")\n              }, {\n                key: \"shift\",\n                value: /* @__PURE__ */ __name(function shift() {\n                  return _remove(this.head, this).value;\n                }, \"shift\")\n              }, {\n                key: \"shiftNode\",\n                value: /* @__PURE__ */ __name(function shiftNode() {\n                  return _remove(this.head, this);\n                }, \"shiftNode\")\n              }, {\n                key: \"get_object_at\",\n                value: /* @__PURE__ */ __name(function get_object_at(index) {\n                  if (index <= this.length()) {\n                    var i = 1;\n                    var current = this.head;\n                    while (i < index) {\n                      current = current.next;\n                      i++;\n                    }\n                    return current.value;\n                  }\n                }, \"get_object_at\")\n              }, {\n                key: \"set_object_at\",\n                value: /* @__PURE__ */ __name(function set_object_at(index, value) {\n                  if (index <= this.length()) {\n                    var i = 1;\n                    var current = this.head;\n                    while (i < index) {\n                      current = current.next;\n                      i++;\n                    }\n                    current.value = value;\n                  }\n                }, \"set_object_at\")\n              }]);\n              return LinkedList2;\n            }();\n            module2.exports = LinkedList;\n          },\n          /* 12 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            function Point2(x, y, p) {\n              this.x = null;\n              this.y = null;\n              if (x == null && y == null && p == null) {\n                this.x = 0;\n                this.y = 0;\n              } else if (typeof x == \"number\" && typeof y == \"number\" && p == null) {\n                this.x = x;\n                this.y = y;\n              } else if (x.constructor.name == \"Point\" && y == null && p == null) {\n                p = x;\n                this.x = p.x;\n                this.y = p.y;\n              }\n            }\n            __name(Point2, \"Point\");\n            Point2.prototype.getX = function() {\n              return this.x;\n            };\n            Point2.prototype.getY = function() {\n              return this.y;\n            };\n            Point2.prototype.getLocation = function() {\n              return new Point2(this.x, this.y);\n            };\n            Point2.prototype.setLocation = function(x, y, p) {\n              if (x.constructor.name == \"Point\" && y == null && p == null) {\n                p = x;\n                this.setLocation(p.x, p.y);\n              } else if (typeof x == \"number\" && typeof y == \"number\" && p == null) {\n                if (parseInt(x) == x && parseInt(y) == y) {\n                  this.move(x, y);\n                } else {\n                  this.x = Math.floor(x + 0.5);\n                  this.y = Math.floor(y + 0.5);\n                }\n              }\n            };\n            Point2.prototype.move = function(x, y) {\n              this.x = x;\n              this.y = y;\n            };\n            Point2.prototype.translate = function(dx, dy) {\n              this.x += dx;\n              this.y += dy;\n            };\n            Point2.prototype.equals = function(obj) {\n              if (obj.constructor.name == \"Point\") {\n                var pt = obj;\n                return this.x == pt.x && this.y == pt.y;\n              }\n              return this == obj;\n            };\n            Point2.prototype.toString = function() {\n              return new Point2().constructor.name + \"[x=\" + this.x + \",y=\" + this.y + \"]\";\n            };\n            module2.exports = Point2;\n          },\n          /* 13 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            function RectangleD(x, y, width, height) {\n              this.x = 0;\n              this.y = 0;\n              this.width = 0;\n              this.height = 0;\n              if (x != null && y != null && width != null && height != null) {\n                this.x = x;\n                this.y = y;\n                this.width = width;\n                this.height = height;\n              }\n            }\n            __name(RectangleD, \"RectangleD\");\n            RectangleD.prototype.getX = function() {\n              return this.x;\n            };\n            RectangleD.prototype.setX = function(x) {\n              this.x = x;\n            };\n            RectangleD.prototype.getY = function() {\n              return this.y;\n            };\n            RectangleD.prototype.setY = function(y) {\n              this.y = y;\n            };\n            RectangleD.prototype.getWidth = function() {\n              return this.width;\n            };\n            RectangleD.prototype.setWidth = function(width) {\n              this.width = width;\n            };\n            RectangleD.prototype.getHeight = function() {\n              return this.height;\n            };\n            RectangleD.prototype.setHeight = function(height) {\n              this.height = height;\n            };\n            RectangleD.prototype.getRight = function() {\n              return this.x + this.width;\n            };\n            RectangleD.prototype.getBottom = function() {\n              return this.y + this.height;\n            };\n            RectangleD.prototype.intersects = function(a) {\n              if (this.getRight() < a.x) {\n                return false;\n              }\n              if (this.getBottom() < a.y) {\n                return false;\n              }\n              if (a.getRight() < this.x) {\n                return false;\n              }\n              if (a.getBottom() < this.y) {\n                return false;\n              }\n              return true;\n            };\n            RectangleD.prototype.getCenterX = function() {\n              return this.x + this.width / 2;\n            };\n            RectangleD.prototype.getMinX = function() {\n              return this.getX();\n            };\n            RectangleD.prototype.getMaxX = function() {\n              return this.getX() + this.width;\n            };\n            RectangleD.prototype.getCenterY = function() {\n              return this.y + this.height / 2;\n            };\n            RectangleD.prototype.getMinY = function() {\n              return this.getY();\n            };\n            RectangleD.prototype.getMaxY = function() {\n              return this.getY() + this.height;\n            };\n            RectangleD.prototype.getWidthHalf = function() {\n              return this.width / 2;\n            };\n            RectangleD.prototype.getHeightHalf = function() {\n              return this.height / 2;\n            };\n            module2.exports = RectangleD;\n          },\n          /* 14 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function(obj) {\n              return typeof obj;\n            } : function(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n            function UniqueIDGeneretor() {\n            }\n            __name(UniqueIDGeneretor, \"UniqueIDGeneretor\");\n            UniqueIDGeneretor.lastID = 0;\n            UniqueIDGeneretor.createID = function(obj) {\n              if (UniqueIDGeneretor.isPrimitive(obj)) {\n                return obj;\n              }\n              if (obj.uniqueID != null) {\n                return obj.uniqueID;\n              }\n              obj.uniqueID = UniqueIDGeneretor.getString();\n              UniqueIDGeneretor.lastID++;\n              return obj.uniqueID;\n            };\n            UniqueIDGeneretor.getString = function(id) {\n              if (id == null) id = UniqueIDGeneretor.lastID;\n              return \"Object#\" + id;\n            };\n            UniqueIDGeneretor.isPrimitive = function(arg) {\n              var type = typeof arg === \"undefined\" ? \"undefined\" : _typeof(arg);\n              return arg == null || type != \"object\" && type != \"function\";\n            };\n            module2.exports = UniqueIDGeneretor;\n          },\n          /* 15 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            function _toConsumableArray(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n                  arr2[i] = arr[i];\n                }\n                return arr2;\n              } else {\n                return Array.from(arr);\n              }\n            }\n            __name(_toConsumableArray, \"_toConsumableArray\");\n            var LayoutConstants = __webpack_require__(0);\n            var LGraphManager = __webpack_require__(6);\n            var LNode = __webpack_require__(3);\n            var LEdge = __webpack_require__(1);\n            var LGraph = __webpack_require__(5);\n            var PointD = __webpack_require__(4);\n            var Transform = __webpack_require__(17);\n            var Emitter = __webpack_require__(27);\n            function Layout2(isRemoteUse) {\n              Emitter.call(this);\n              this.layoutQuality = LayoutConstants.QUALITY;\n              this.createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;\n              this.incremental = LayoutConstants.DEFAULT_INCREMENTAL;\n              this.animationOnLayout = LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT;\n              this.animationDuringLayout = LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT;\n              this.animationPeriod = LayoutConstants.DEFAULT_ANIMATION_PERIOD;\n              this.uniformLeafNodeSizes = LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES;\n              this.edgeToDummyNodes = /* @__PURE__ */ new Map();\n              this.graphManager = new LGraphManager(this);\n              this.isLayoutFinished = false;\n              this.isSubLayout = false;\n              this.isRemoteUse = false;\n              if (isRemoteUse != null) {\n                this.isRemoteUse = isRemoteUse;\n              }\n            }\n            __name(Layout2, \"Layout\");\n            Layout2.RANDOM_SEED = 1;\n            Layout2.prototype = Object.create(Emitter.prototype);\n            Layout2.prototype.getGraphManager = function() {\n              return this.graphManager;\n            };\n            Layout2.prototype.getAllNodes = function() {\n              return this.graphManager.getAllNodes();\n            };\n            Layout2.prototype.getAllEdges = function() {\n              return this.graphManager.getAllEdges();\n            };\n            Layout2.prototype.getAllNodesToApplyGravitation = function() {\n              return this.graphManager.getAllNodesToApplyGravitation();\n            };\n            Layout2.prototype.newGraphManager = function() {\n              var gm = new LGraphManager(this);\n              this.graphManager = gm;\n              return gm;\n            };\n            Layout2.prototype.newGraph = function(vGraph) {\n              return new LGraph(null, this.graphManager, vGraph);\n            };\n            Layout2.prototype.newNode = function(vNode) {\n              return new LNode(this.graphManager, vNode);\n            };\n            Layout2.prototype.newEdge = function(vEdge) {\n              return new LEdge(null, null, vEdge);\n            };\n            Layout2.prototype.checkLayoutSuccess = function() {\n              return this.graphManager.getRoot() == null || this.graphManager.getRoot().getNodes().length == 0 || this.graphManager.includesInvalidEdge();\n            };\n            Layout2.prototype.runLayout = function() {\n              this.isLayoutFinished = false;\n              if (this.tilingPreLayout) {\n                this.tilingPreLayout();\n              }\n              this.initParameters();\n              var isLayoutSuccessfull;\n              if (this.checkLayoutSuccess()) {\n                isLayoutSuccessfull = false;\n              } else {\n                isLayoutSuccessfull = this.layout();\n              }\n              if (LayoutConstants.ANIMATE === \"during\") {\n                return false;\n              }\n              if (isLayoutSuccessfull) {\n                if (!this.isSubLayout) {\n                  this.doPostLayout();\n                }\n              }\n              if (this.tilingPostLayout) {\n                this.tilingPostLayout();\n              }\n              this.isLayoutFinished = true;\n              return isLayoutSuccessfull;\n            };\n            Layout2.prototype.doPostLayout = function() {\n              if (!this.incremental) {\n                this.transform();\n              }\n              this.update();\n            };\n            Layout2.prototype.update2 = function() {\n              if (this.createBendsAsNeeded) {\n                this.createBendpointsFromDummyNodes();\n                this.graphManager.resetAllEdges();\n              }\n              if (!this.isRemoteUse) {\n                var edge;\n                var allEdges = this.graphManager.getAllEdges();\n                for (var i = 0; i < allEdges.length; i++) {\n                  edge = allEdges[i];\n                }\n                var node;\n                var nodes2 = this.graphManager.getRoot().getNodes();\n                for (var i = 0; i < nodes2.length; i++) {\n                  node = nodes2[i];\n                }\n                this.update(this.graphManager.getRoot());\n              }\n            };\n            Layout2.prototype.update = function(obj) {\n              if (obj == null) {\n                this.update2();\n              } else if (obj instanceof LNode) {\n                var node = obj;\n                if (node.getChild() != null) {\n                  var nodes2 = node.getChild().getNodes();\n                  for (var i = 0; i < nodes2.length; i++) {\n                    update(nodes2[i]);\n                  }\n                }\n                if (node.vGraphObject != null) {\n                  var vNode = node.vGraphObject;\n                  vNode.update(node);\n                }\n              } else if (obj instanceof LEdge) {\n                var edge = obj;\n                if (edge.vGraphObject != null) {\n                  var vEdge = edge.vGraphObject;\n                  vEdge.update(edge);\n                }\n              } else if (obj instanceof LGraph) {\n                var graph = obj;\n                if (graph.vGraphObject != null) {\n                  var vGraph = graph.vGraphObject;\n                  vGraph.update(graph);\n                }\n              }\n            };\n            Layout2.prototype.initParameters = function() {\n              if (!this.isSubLayout) {\n                this.layoutQuality = LayoutConstants.QUALITY;\n                this.animationDuringLayout = LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT;\n                this.animationPeriod = LayoutConstants.DEFAULT_ANIMATION_PERIOD;\n                this.animationOnLayout = LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT;\n                this.incremental = LayoutConstants.DEFAULT_INCREMENTAL;\n                this.createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;\n                this.uniformLeafNodeSizes = LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES;\n              }\n              if (this.animationDuringLayout) {\n                this.animationOnLayout = false;\n              }\n            };\n            Layout2.prototype.transform = function(newLeftTop) {\n              if (newLeftTop == void 0) {\n                this.transform(new PointD(0, 0));\n              } else {\n                var trans = new Transform();\n                var leftTop = this.graphManager.getRoot().updateLeftTop();\n                if (leftTop != null) {\n                  trans.setWorldOrgX(newLeftTop.x);\n                  trans.setWorldOrgY(newLeftTop.y);\n                  trans.setDeviceOrgX(leftTop.x);\n                  trans.setDeviceOrgY(leftTop.y);\n                  var nodes2 = this.getAllNodes();\n                  var node;\n                  for (var i = 0; i < nodes2.length; i++) {\n                    node = nodes2[i];\n                    node.transform(trans);\n                  }\n                }\n              }\n            };\n            Layout2.prototype.positionNodesRandomly = function(graph) {\n              if (graph == void 0) {\n                this.positionNodesRandomly(this.getGraphManager().getRoot());\n                this.getGraphManager().getRoot().updateBounds(true);\n              } else {\n                var lNode;\n                var childGraph;\n                var nodes2 = graph.getNodes();\n                for (var i = 0; i < nodes2.length; i++) {\n                  lNode = nodes2[i];\n                  childGraph = lNode.getChild();\n                  if (childGraph == null) {\n                    lNode.scatter();\n                  } else if (childGraph.getNodes().length == 0) {\n                    lNode.scatter();\n                  } else {\n                    this.positionNodesRandomly(childGraph);\n                    lNode.updateBounds();\n                  }\n                }\n              }\n            };\n            Layout2.prototype.getFlatForest = function() {\n              var flatForest = [];\n              var isForest = true;\n              var allNodes = this.graphManager.getRoot().getNodes();\n              var isFlat = true;\n              for (var i = 0; i < allNodes.length; i++) {\n                if (allNodes[i].getChild() != null) {\n                  isFlat = false;\n                }\n              }\n              if (!isFlat) {\n                return flatForest;\n              }\n              var visited = /* @__PURE__ */ new Set();\n              var toBeVisited = [];\n              var parents = /* @__PURE__ */ new Map();\n              var unProcessedNodes = [];\n              unProcessedNodes = unProcessedNodes.concat(allNodes);\n              while (unProcessedNodes.length > 0 && isForest) {\n                toBeVisited.push(unProcessedNodes[0]);\n                while (toBeVisited.length > 0 && isForest) {\n                  var currentNode = toBeVisited[0];\n                  toBeVisited.splice(0, 1);\n                  visited.add(currentNode);\n                  var neighborEdges = currentNode.getEdges();\n                  for (var i = 0; i < neighborEdges.length; i++) {\n                    var currentNeighbor = neighborEdges[i].getOtherEnd(currentNode);\n                    if (parents.get(currentNode) != currentNeighbor) {\n                      if (!visited.has(currentNeighbor)) {\n                        toBeVisited.push(currentNeighbor);\n                        parents.set(currentNeighbor, currentNode);\n                      } else {\n                        isForest = false;\n                        break;\n                      }\n                    }\n                  }\n                }\n                if (!isForest) {\n                  flatForest = [];\n                } else {\n                  var temp = [].concat(_toConsumableArray(visited));\n                  flatForest.push(temp);\n                  for (var i = 0; i < temp.length; i++) {\n                    var value = temp[i];\n                    var index = unProcessedNodes.indexOf(value);\n                    if (index > -1) {\n                      unProcessedNodes.splice(index, 1);\n                    }\n                  }\n                  visited = /* @__PURE__ */ new Set();\n                  parents = /* @__PURE__ */ new Map();\n                }\n              }\n              return flatForest;\n            };\n            Layout2.prototype.createDummyNodesForBendpoints = function(edge) {\n              var dummyNodes = [];\n              var prev = edge.source;\n              var graph = this.graphManager.calcLowestCommonAncestor(edge.source, edge.target);\n              for (var i = 0; i < edge.bendpoints.length; i++) {\n                var dummyNode = this.newNode(null);\n                dummyNode.setRect(new Point(0, 0), new Dimension(1, 1));\n                graph.add(dummyNode);\n                var dummyEdge = this.newEdge(null);\n                this.graphManager.add(dummyEdge, prev, dummyNode);\n                dummyNodes.add(dummyNode);\n                prev = dummyNode;\n              }\n              var dummyEdge = this.newEdge(null);\n              this.graphManager.add(dummyEdge, prev, edge.target);\n              this.edgeToDummyNodes.set(edge, dummyNodes);\n              if (edge.isInterGraph()) {\n                this.graphManager.remove(edge);\n              } else {\n                graph.remove(edge);\n              }\n              return dummyNodes;\n            };\n            Layout2.prototype.createBendpointsFromDummyNodes = function() {\n              var edges = [];\n              edges = edges.concat(this.graphManager.getAllEdges());\n              edges = [].concat(_toConsumableArray(this.edgeToDummyNodes.keys())).concat(edges);\n              for (var k = 0; k < edges.length; k++) {\n                var lEdge = edges[k];\n                if (lEdge.bendpoints.length > 0) {\n                  var path = this.edgeToDummyNodes.get(lEdge);\n                  for (var i = 0; i < path.length; i++) {\n                    var dummyNode = path[i];\n                    var p = new PointD(dummyNode.getCenterX(), dummyNode.getCenterY());\n                    var ebp = lEdge.bendpoints.get(i);\n                    ebp.x = p.x;\n                    ebp.y = p.y;\n                    dummyNode.getOwner().remove(dummyNode);\n                  }\n                  this.graphManager.add(lEdge, lEdge.source, lEdge.target);\n                }\n              }\n            };\n            Layout2.transform = function(sliderValue, defaultValue, minDiv, maxMul) {\n              if (minDiv != void 0 && maxMul != void 0) {\n                var value = defaultValue;\n                if (sliderValue <= 50) {\n                  var minValue = defaultValue / minDiv;\n                  value -= (defaultValue - minValue) / 50 * (50 - sliderValue);\n                } else {\n                  var maxValue = defaultValue * maxMul;\n                  value += (maxValue - defaultValue) / 50 * (sliderValue - 50);\n                }\n                return value;\n              } else {\n                var a, b;\n                if (sliderValue <= 50) {\n                  a = 9 * defaultValue / 500;\n                  b = defaultValue / 10;\n                } else {\n                  a = 9 * defaultValue / 50;\n                  b = -8 * defaultValue;\n                }\n                return a * sliderValue + b;\n              }\n            };\n            Layout2.findCenterOfTree = function(nodes2) {\n              var list = [];\n              list = list.concat(nodes2);\n              var removedNodes = [];\n              var remainingDegrees = /* @__PURE__ */ new Map();\n              var foundCenter = false;\n              var centerNode = null;\n              if (list.length == 1 || list.length == 2) {\n                foundCenter = true;\n                centerNode = list[0];\n              }\n              for (var i = 0; i < list.length; i++) {\n                var node = list[i];\n                var degree = node.getNeighborsList().size;\n                remainingDegrees.set(node, node.getNeighborsList().size);\n                if (degree == 1) {\n                  removedNodes.push(node);\n                }\n              }\n              var tempList = [];\n              tempList = tempList.concat(removedNodes);\n              while (!foundCenter) {\n                var tempList2 = [];\n                tempList2 = tempList2.concat(tempList);\n                tempList = [];\n                for (var i = 0; i < list.length; i++) {\n                  var node = list[i];\n                  var index = list.indexOf(node);\n                  if (index >= 0) {\n                    list.splice(index, 1);\n                  }\n                  var neighbours = node.getNeighborsList();\n                  neighbours.forEach(function(neighbour) {\n                    if (removedNodes.indexOf(neighbour) < 0) {\n                      var otherDegree = remainingDegrees.get(neighbour);\n                      var newDegree = otherDegree - 1;\n                      if (newDegree == 1) {\n                        tempList.push(neighbour);\n                      }\n                      remainingDegrees.set(neighbour, newDegree);\n                    }\n                  });\n                }\n                removedNodes = removedNodes.concat(tempList);\n                if (list.length == 1 || list.length == 2) {\n                  foundCenter = true;\n                  centerNode = list[0];\n                }\n              }\n              return centerNode;\n            };\n            Layout2.prototype.setGraphManager = function(gm) {\n              this.graphManager = gm;\n            };\n            module2.exports = Layout2;\n          },\n          /* 16 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            function RandomSeed() {\n            }\n            __name(RandomSeed, \"RandomSeed\");\n            RandomSeed.seed = 1;\n            RandomSeed.x = 0;\n            RandomSeed.nextDouble = function() {\n              RandomSeed.x = Math.sin(RandomSeed.seed++) * 1e4;\n              return RandomSeed.x - Math.floor(RandomSeed.x);\n            };\n            module2.exports = RandomSeed;\n          },\n          /* 17 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            var PointD = __webpack_require__(4);\n            function Transform(x, y) {\n              this.lworldOrgX = 0;\n              this.lworldOrgY = 0;\n              this.ldeviceOrgX = 0;\n              this.ldeviceOrgY = 0;\n              this.lworldExtX = 1;\n              this.lworldExtY = 1;\n              this.ldeviceExtX = 1;\n              this.ldeviceExtY = 1;\n            }\n            __name(Transform, \"Transform\");\n            Transform.prototype.getWorldOrgX = function() {\n              return this.lworldOrgX;\n            };\n            Transform.prototype.setWorldOrgX = function(wox) {\n              this.lworldOrgX = wox;\n            };\n            Transform.prototype.getWorldOrgY = function() {\n              return this.lworldOrgY;\n            };\n            Transform.prototype.setWorldOrgY = function(woy) {\n              this.lworldOrgY = woy;\n            };\n            Transform.prototype.getWorldExtX = function() {\n              return this.lworldExtX;\n            };\n            Transform.prototype.setWorldExtX = function(wex) {\n              this.lworldExtX = wex;\n            };\n            Transform.prototype.getWorldExtY = function() {\n              return this.lworldExtY;\n            };\n            Transform.prototype.setWorldExtY = function(wey) {\n              this.lworldExtY = wey;\n            };\n            Transform.prototype.getDeviceOrgX = function() {\n              return this.ldeviceOrgX;\n            };\n            Transform.prototype.setDeviceOrgX = function(dox) {\n              this.ldeviceOrgX = dox;\n            };\n            Transform.prototype.getDeviceOrgY = function() {\n              return this.ldeviceOrgY;\n            };\n            Transform.prototype.setDeviceOrgY = function(doy) {\n              this.ldeviceOrgY = doy;\n            };\n            Transform.prototype.getDeviceExtX = function() {\n              return this.ldeviceExtX;\n            };\n            Transform.prototype.setDeviceExtX = function(dex) {\n              this.ldeviceExtX = dex;\n            };\n            Transform.prototype.getDeviceExtY = function() {\n              return this.ldeviceExtY;\n            };\n            Transform.prototype.setDeviceExtY = function(dey) {\n              this.ldeviceExtY = dey;\n            };\n            Transform.prototype.transformX = function(x) {\n              var xDevice = 0;\n              var worldExtX = this.lworldExtX;\n              if (worldExtX != 0) {\n                xDevice = this.ldeviceOrgX + (x - this.lworldOrgX) * this.ldeviceExtX / worldExtX;\n              }\n              return xDevice;\n            };\n            Transform.prototype.transformY = function(y) {\n              var yDevice = 0;\n              var worldExtY = this.lworldExtY;\n              if (worldExtY != 0) {\n                yDevice = this.ldeviceOrgY + (y - this.lworldOrgY) * this.ldeviceExtY / worldExtY;\n              }\n              return yDevice;\n            };\n            Transform.prototype.inverseTransformX = function(x) {\n              var xWorld = 0;\n              var deviceExtX = this.ldeviceExtX;\n              if (deviceExtX != 0) {\n                xWorld = this.lworldOrgX + (x - this.ldeviceOrgX) * this.lworldExtX / deviceExtX;\n              }\n              return xWorld;\n            };\n            Transform.prototype.inverseTransformY = function(y) {\n              var yWorld = 0;\n              var deviceExtY = this.ldeviceExtY;\n              if (deviceExtY != 0) {\n                yWorld = this.lworldOrgY + (y - this.ldeviceOrgY) * this.lworldExtY / deviceExtY;\n              }\n              return yWorld;\n            };\n            Transform.prototype.inverseTransformPoint = function(inPoint) {\n              var outPoint = new PointD(this.inverseTransformX(inPoint.x), this.inverseTransformY(inPoint.y));\n              return outPoint;\n            };\n            module2.exports = Transform;\n          },\n          /* 18 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            function _toConsumableArray(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n                  arr2[i] = arr[i];\n                }\n                return arr2;\n              } else {\n                return Array.from(arr);\n              }\n            }\n            __name(_toConsumableArray, \"_toConsumableArray\");\n            var Layout2 = __webpack_require__(15);\n            var FDLayoutConstants = __webpack_require__(7);\n            var LayoutConstants = __webpack_require__(0);\n            var IGeometry = __webpack_require__(8);\n            var IMath = __webpack_require__(9);\n            function FDLayout() {\n              Layout2.call(this);\n              this.useSmartIdealEdgeLengthCalculation = FDLayoutConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION;\n              this.idealEdgeLength = FDLayoutConstants.DEFAULT_EDGE_LENGTH;\n              this.springConstant = FDLayoutConstants.DEFAULT_SPRING_STRENGTH;\n              this.repulsionConstant = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH;\n              this.gravityConstant = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH;\n              this.compoundGravityConstant = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH;\n              this.gravityRangeFactor = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR;\n              this.compoundGravityRangeFactor = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR;\n              this.displacementThresholdPerNode = 3 * FDLayoutConstants.DEFAULT_EDGE_LENGTH / 100;\n              this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;\n              this.initialCoolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;\n              this.totalDisplacement = 0;\n              this.oldTotalDisplacement = 0;\n              this.maxIterations = FDLayoutConstants.MAX_ITERATIONS;\n            }\n            __name(FDLayout, \"FDLayout\");\n            FDLayout.prototype = Object.create(Layout2.prototype);\n            for (var prop in Layout2) {\n              FDLayout[prop] = Layout2[prop];\n            }\n            FDLayout.prototype.initParameters = function() {\n              Layout2.prototype.initParameters.call(this, arguments);\n              this.totalIterations = 0;\n              this.notAnimatedIterations = 0;\n              this.useFRGridVariant = FDLayoutConstants.DEFAULT_USE_SMART_REPULSION_RANGE_CALCULATION;\n              this.grid = [];\n            };\n            FDLayout.prototype.calcIdealEdgeLengths = function() {\n              var edge;\n              var lcaDepth;\n              var source;\n              var target;\n              var sizeOfSourceInLca;\n              var sizeOfTargetInLca;\n              var allEdges = this.getGraphManager().getAllEdges();\n              for (var i = 0; i < allEdges.length; i++) {\n                edge = allEdges[i];\n                edge.idealLength = this.idealEdgeLength;\n                if (edge.isInterGraph) {\n                  source = edge.getSource();\n                  target = edge.getTarget();\n                  sizeOfSourceInLca = edge.getSourceInLca().getEstimatedSize();\n                  sizeOfTargetInLca = edge.getTargetInLca().getEstimatedSize();\n                  if (this.useSmartIdealEdgeLengthCalculation) {\n                    edge.idealLength += sizeOfSourceInLca + sizeOfTargetInLca - 2 * LayoutConstants.SIMPLE_NODE_SIZE;\n                  }\n                  lcaDepth = edge.getLca().getInclusionTreeDepth();\n                  edge.idealLength += FDLayoutConstants.DEFAULT_EDGE_LENGTH * FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR * (source.getInclusionTreeDepth() + target.getInclusionTreeDepth() - 2 * lcaDepth);\n                }\n              }\n            };\n            FDLayout.prototype.initSpringEmbedder = function() {\n              var s = this.getAllNodes().length;\n              if (this.incremental) {\n                if (s > FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) {\n                  this.coolingFactor = Math.max(this.coolingFactor * FDLayoutConstants.COOLING_ADAPTATION_FACTOR, this.coolingFactor - (s - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) / (FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) * this.coolingFactor * (1 - FDLayoutConstants.COOLING_ADAPTATION_FACTOR));\n                }\n                this.maxNodeDisplacement = FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL;\n              } else {\n                if (s > FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) {\n                  this.coolingFactor = Math.max(FDLayoutConstants.COOLING_ADAPTATION_FACTOR, 1 - (s - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) / (FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) * (1 - FDLayoutConstants.COOLING_ADAPTATION_FACTOR));\n                } else {\n                  this.coolingFactor = 1;\n                }\n                this.initialCoolingFactor = this.coolingFactor;\n                this.maxNodeDisplacement = FDLayoutConstants.MAX_NODE_DISPLACEMENT;\n              }\n              this.maxIterations = Math.max(this.getAllNodes().length * 5, this.maxIterations);\n              this.totalDisplacementThreshold = this.displacementThresholdPerNode * this.getAllNodes().length;\n              this.repulsionRange = this.calcRepulsionRange();\n            };\n            FDLayout.prototype.calcSpringForces = function() {\n              var lEdges = this.getAllEdges();\n              var edge;\n              for (var i = 0; i < lEdges.length; i++) {\n                edge = lEdges[i];\n                this.calcSpringForce(edge, edge.idealLength);\n              }\n            };\n            FDLayout.prototype.calcRepulsionForces = function() {\n              var gridUpdateAllowed = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;\n              var forceToNodeSurroundingUpdate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n              var i, j;\n              var nodeA, nodeB;\n              var lNodes = this.getAllNodes();\n              var processedNodeSet;\n              if (this.useFRGridVariant) {\n                if (this.totalIterations % FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD == 1 && gridUpdateAllowed) {\n                  this.updateGrid();\n                }\n                processedNodeSet = /* @__PURE__ */ new Set();\n                for (i = 0; i < lNodes.length; i++) {\n                  nodeA = lNodes[i];\n                  this.calculateRepulsionForceOfANode(nodeA, processedNodeSet, gridUpdateAllowed, forceToNodeSurroundingUpdate);\n                  processedNodeSet.add(nodeA);\n                }\n              } else {\n                for (i = 0; i < lNodes.length; i++) {\n                  nodeA = lNodes[i];\n                  for (j = i + 1; j < lNodes.length; j++) {\n                    nodeB = lNodes[j];\n                    if (nodeA.getOwner() != nodeB.getOwner()) {\n                      continue;\n                    }\n                    this.calcRepulsionForce(nodeA, nodeB);\n                  }\n                }\n              }\n            };\n            FDLayout.prototype.calcGravitationalForces = function() {\n              var node;\n              var lNodes = this.getAllNodesToApplyGravitation();\n              for (var i = 0; i < lNodes.length; i++) {\n                node = lNodes[i];\n                this.calcGravitationalForce(node);\n              }\n            };\n            FDLayout.prototype.moveNodes = function() {\n              var lNodes = this.getAllNodes();\n              var node;\n              for (var i = 0; i < lNodes.length; i++) {\n                node = lNodes[i];\n                node.move();\n              }\n            };\n            FDLayout.prototype.calcSpringForce = function(edge, idealLength) {\n              var sourceNode = edge.getSource();\n              var targetNode = edge.getTarget();\n              var length;\n              var springForce;\n              var springForceX;\n              var springForceY;\n              if (this.uniformLeafNodeSizes && sourceNode.getChild() == null && targetNode.getChild() == null) {\n                edge.updateLengthSimple();\n              } else {\n                edge.updateLength();\n                if (edge.isOverlapingSourceAndTarget) {\n                  return;\n                }\n              }\n              length = edge.getLength();\n              if (length == 0) return;\n              springForce = this.springConstant * (length - idealLength);\n              springForceX = springForce * (edge.lengthX / length);\n              springForceY = springForce * (edge.lengthY / length);\n              sourceNode.springForceX += springForceX;\n              sourceNode.springForceY += springForceY;\n              targetNode.springForceX -= springForceX;\n              targetNode.springForceY -= springForceY;\n            };\n            FDLayout.prototype.calcRepulsionForce = function(nodeA, nodeB) {\n              var rectA = nodeA.getRect();\n              var rectB = nodeB.getRect();\n              var overlapAmount = new Array(2);\n              var clipPoints = new Array(4);\n              var distanceX;\n              var distanceY;\n              var distanceSquared;\n              var distance;\n              var repulsionForce;\n              var repulsionForceX;\n              var repulsionForceY;\n              if (rectA.intersects(rectB)) {\n                IGeometry.calcSeparationAmount(rectA, rectB, overlapAmount, FDLayoutConstants.DEFAULT_EDGE_LENGTH / 2);\n                repulsionForceX = 2 * overlapAmount[0];\n                repulsionForceY = 2 * overlapAmount[1];\n                var childrenConstant = nodeA.noOfChildren * nodeB.noOfChildren / (nodeA.noOfChildren + nodeB.noOfChildren);\n                nodeA.repulsionForceX -= childrenConstant * repulsionForceX;\n                nodeA.repulsionForceY -= childrenConstant * repulsionForceY;\n                nodeB.repulsionForceX += childrenConstant * repulsionForceX;\n                nodeB.repulsionForceY += childrenConstant * repulsionForceY;\n              } else {\n                if (this.uniformLeafNodeSizes && nodeA.getChild() == null && nodeB.getChild() == null) {\n                  distanceX = rectB.getCenterX() - rectA.getCenterX();\n                  distanceY = rectB.getCenterY() - rectA.getCenterY();\n                } else {\n                  IGeometry.getIntersection(rectA, rectB, clipPoints);\n                  distanceX = clipPoints[2] - clipPoints[0];\n                  distanceY = clipPoints[3] - clipPoints[1];\n                }\n                if (Math.abs(distanceX) < FDLayoutConstants.MIN_REPULSION_DIST) {\n                  distanceX = IMath.sign(distanceX) * FDLayoutConstants.MIN_REPULSION_DIST;\n                }\n                if (Math.abs(distanceY) < FDLayoutConstants.MIN_REPULSION_DIST) {\n                  distanceY = IMath.sign(distanceY) * FDLayoutConstants.MIN_REPULSION_DIST;\n                }\n                distanceSquared = distanceX * distanceX + distanceY * distanceY;\n                distance = Math.sqrt(distanceSquared);\n                repulsionForce = this.repulsionConstant * nodeA.noOfChildren * nodeB.noOfChildren / distanceSquared;\n                repulsionForceX = repulsionForce * distanceX / distance;\n                repulsionForceY = repulsionForce * distanceY / distance;\n                nodeA.repulsionForceX -= repulsionForceX;\n                nodeA.repulsionForceY -= repulsionForceY;\n                nodeB.repulsionForceX += repulsionForceX;\n                nodeB.repulsionForceY += repulsionForceY;\n              }\n            };\n            FDLayout.prototype.calcGravitationalForce = function(node) {\n              var ownerGraph;\n              var ownerCenterX;\n              var ownerCenterY;\n              var distanceX;\n              var distanceY;\n              var absDistanceX;\n              var absDistanceY;\n              var estimatedSize;\n              ownerGraph = node.getOwner();\n              ownerCenterX = (ownerGraph.getRight() + ownerGraph.getLeft()) / 2;\n              ownerCenterY = (ownerGraph.getTop() + ownerGraph.getBottom()) / 2;\n              distanceX = node.getCenterX() - ownerCenterX;\n              distanceY = node.getCenterY() - ownerCenterY;\n              absDistanceX = Math.abs(distanceX) + node.getWidth() / 2;\n              absDistanceY = Math.abs(distanceY) + node.getHeight() / 2;\n              if (node.getOwner() == this.graphManager.getRoot()) {\n                estimatedSize = ownerGraph.getEstimatedSize() * this.gravityRangeFactor;\n                if (absDistanceX > estimatedSize || absDistanceY > estimatedSize) {\n                  node.gravitationForceX = -this.gravityConstant * distanceX;\n                  node.gravitationForceY = -this.gravityConstant * distanceY;\n                }\n              } else {\n                estimatedSize = ownerGraph.getEstimatedSize() * this.compoundGravityRangeFactor;\n                if (absDistanceX > estimatedSize || absDistanceY > estimatedSize) {\n                  node.gravitationForceX = -this.gravityConstant * distanceX * this.compoundGravityConstant;\n                  node.gravitationForceY = -this.gravityConstant * distanceY * this.compoundGravityConstant;\n                }\n              }\n            };\n            FDLayout.prototype.isConverged = function() {\n              var converged;\n              var oscilating = false;\n              if (this.totalIterations > this.maxIterations / 3) {\n                oscilating = Math.abs(this.totalDisplacement - this.oldTotalDisplacement) < 2;\n              }\n              converged = this.totalDisplacement < this.totalDisplacementThreshold;\n              this.oldTotalDisplacement = this.totalDisplacement;\n              return converged || oscilating;\n            };\n            FDLayout.prototype.animate = function() {\n              if (this.animationDuringLayout && !this.isSubLayout) {\n                if (this.notAnimatedIterations == this.animationPeriod) {\n                  this.update();\n                  this.notAnimatedIterations = 0;\n                } else {\n                  this.notAnimatedIterations++;\n                }\n              }\n            };\n            FDLayout.prototype.calcNoOfChildrenForAllNodes = function() {\n              var node;\n              var allNodes = this.graphManager.getAllNodes();\n              for (var i = 0; i < allNodes.length; i++) {\n                node = allNodes[i];\n                node.noOfChildren = node.getNoOfChildren();\n              }\n            };\n            FDLayout.prototype.calcGrid = function(graph) {\n              var sizeX = 0;\n              var sizeY = 0;\n              sizeX = parseInt(Math.ceil((graph.getRight() - graph.getLeft()) / this.repulsionRange));\n              sizeY = parseInt(Math.ceil((graph.getBottom() - graph.getTop()) / this.repulsionRange));\n              var grid = new Array(sizeX);\n              for (var i = 0; i < sizeX; i++) {\n                grid[i] = new Array(sizeY);\n              }\n              for (var i = 0; i < sizeX; i++) {\n                for (var j = 0; j < sizeY; j++) {\n                  grid[i][j] = new Array();\n                }\n              }\n              return grid;\n            };\n            FDLayout.prototype.addNodeToGrid = function(v, left, top) {\n              var startX = 0;\n              var finishX = 0;\n              var startY = 0;\n              var finishY = 0;\n              startX = parseInt(Math.floor((v.getRect().x - left) / this.repulsionRange));\n              finishX = parseInt(Math.floor((v.getRect().width + v.getRect().x - left) / this.repulsionRange));\n              startY = parseInt(Math.floor((v.getRect().y - top) / this.repulsionRange));\n              finishY = parseInt(Math.floor((v.getRect().height + v.getRect().y - top) / this.repulsionRange));\n              for (var i = startX; i <= finishX; i++) {\n                for (var j = startY; j <= finishY; j++) {\n                  this.grid[i][j].push(v);\n                  v.setGridCoordinates(startX, finishX, startY, finishY);\n                }\n              }\n            };\n            FDLayout.prototype.updateGrid = function() {\n              var i;\n              var nodeA;\n              var lNodes = this.getAllNodes();\n              this.grid = this.calcGrid(this.graphManager.getRoot());\n              for (i = 0; i < lNodes.length; i++) {\n                nodeA = lNodes[i];\n                this.addNodeToGrid(nodeA, this.graphManager.getRoot().getLeft(), this.graphManager.getRoot().getTop());\n              }\n            };\n            FDLayout.prototype.calculateRepulsionForceOfANode = function(nodeA, processedNodeSet, gridUpdateAllowed, forceToNodeSurroundingUpdate) {\n              if (this.totalIterations % FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD == 1 && gridUpdateAllowed || forceToNodeSurroundingUpdate) {\n                var surrounding = /* @__PURE__ */ new Set();\n                nodeA.surrounding = new Array();\n                var nodeB;\n                var grid = this.grid;\n                for (var i = nodeA.startX - 1; i < nodeA.finishX + 2; i++) {\n                  for (var j = nodeA.startY - 1; j < nodeA.finishY + 2; j++) {\n                    if (!(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length)) {\n                      for (var k = 0; k < grid[i][j].length; k++) {\n                        nodeB = grid[i][j][k];\n                        if (nodeA.getOwner() != nodeB.getOwner() || nodeA == nodeB) {\n                          continue;\n                        }\n                        if (!processedNodeSet.has(nodeB) && !surrounding.has(nodeB)) {\n                          var distanceX = Math.abs(nodeA.getCenterX() - nodeB.getCenterX()) - (nodeA.getWidth() / 2 + nodeB.getWidth() / 2);\n                          var distanceY = Math.abs(nodeA.getCenterY() - nodeB.getCenterY()) - (nodeA.getHeight() / 2 + nodeB.getHeight() / 2);\n                          if (distanceX <= this.repulsionRange && distanceY <= this.repulsionRange) {\n                            surrounding.add(nodeB);\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n                nodeA.surrounding = [].concat(_toConsumableArray(surrounding));\n              }\n              for (i = 0; i < nodeA.surrounding.length; i++) {\n                this.calcRepulsionForce(nodeA, nodeA.surrounding[i]);\n              }\n            };\n            FDLayout.prototype.calcRepulsionRange = function() {\n              return 0;\n            };\n            module2.exports = FDLayout;\n          },\n          /* 19 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            var LEdge = __webpack_require__(1);\n            var FDLayoutConstants = __webpack_require__(7);\n            function FDLayoutEdge(source, target, vEdge) {\n              LEdge.call(this, source, target, vEdge);\n              this.idealLength = FDLayoutConstants.DEFAULT_EDGE_LENGTH;\n            }\n            __name(FDLayoutEdge, \"FDLayoutEdge\");\n            FDLayoutEdge.prototype = Object.create(LEdge.prototype);\n            for (var prop in LEdge) {\n              FDLayoutEdge[prop] = LEdge[prop];\n            }\n            module2.exports = FDLayoutEdge;\n          },\n          /* 20 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            var LNode = __webpack_require__(3);\n            function FDLayoutNode(gm, loc, size, vNode) {\n              LNode.call(this, gm, loc, size, vNode);\n              this.springForceX = 0;\n              this.springForceY = 0;\n              this.repulsionForceX = 0;\n              this.repulsionForceY = 0;\n              this.gravitationForceX = 0;\n              this.gravitationForceY = 0;\n              this.displacementX = 0;\n              this.displacementY = 0;\n              this.startX = 0;\n              this.finishX = 0;\n              this.startY = 0;\n              this.finishY = 0;\n              this.surrounding = [];\n            }\n            __name(FDLayoutNode, \"FDLayoutNode\");\n            FDLayoutNode.prototype = Object.create(LNode.prototype);\n            for (var prop in LNode) {\n              FDLayoutNode[prop] = LNode[prop];\n            }\n            FDLayoutNode.prototype.setGridCoordinates = function(_startX, _finishX, _startY, _finishY) {\n              this.startX = _startX;\n              this.finishX = _finishX;\n              this.startY = _startY;\n              this.finishY = _finishY;\n            };\n            module2.exports = FDLayoutNode;\n          },\n          /* 21 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            function DimensionD2(width, height) {\n              this.width = 0;\n              this.height = 0;\n              if (width !== null && height !== null) {\n                this.height = height;\n                this.width = width;\n              }\n            }\n            __name(DimensionD2, \"DimensionD\");\n            DimensionD2.prototype.getWidth = function() {\n              return this.width;\n            };\n            DimensionD2.prototype.setWidth = function(width) {\n              this.width = width;\n            };\n            DimensionD2.prototype.getHeight = function() {\n              return this.height;\n            };\n            DimensionD2.prototype.setHeight = function(height) {\n              this.height = height;\n            };\n            module2.exports = DimensionD2;\n          },\n          /* 22 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            var UniqueIDGeneretor = __webpack_require__(14);\n            function HashMap() {\n              this.map = {};\n              this.keys = [];\n            }\n            __name(HashMap, \"HashMap\");\n            HashMap.prototype.put = function(key, value) {\n              var theId = UniqueIDGeneretor.createID(key);\n              if (!this.contains(theId)) {\n                this.map[theId] = value;\n                this.keys.push(key);\n              }\n            };\n            HashMap.prototype.contains = function(key) {\n              var theId = UniqueIDGeneretor.createID(key);\n              return this.map[key] != null;\n            };\n            HashMap.prototype.get = function(key) {\n              var theId = UniqueIDGeneretor.createID(key);\n              return this.map[theId];\n            };\n            HashMap.prototype.keySet = function() {\n              return this.keys;\n            };\n            module2.exports = HashMap;\n          },\n          /* 23 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            var UniqueIDGeneretor = __webpack_require__(14);\n            function HashSet() {\n              this.set = {};\n            }\n            __name(HashSet, \"HashSet\");\n            ;\n            HashSet.prototype.add = function(obj) {\n              var theId = UniqueIDGeneretor.createID(obj);\n              if (!this.contains(theId)) this.set[theId] = obj;\n            };\n            HashSet.prototype.remove = function(obj) {\n              delete this.set[UniqueIDGeneretor.createID(obj)];\n            };\n            HashSet.prototype.clear = function() {\n              this.set = {};\n            };\n            HashSet.prototype.contains = function(obj) {\n              return this.set[UniqueIDGeneretor.createID(obj)] == obj;\n            };\n            HashSet.prototype.isEmpty = function() {\n              return this.size() === 0;\n            };\n            HashSet.prototype.size = function() {\n              return Object.keys(this.set).length;\n            };\n            HashSet.prototype.addAllTo = function(list) {\n              var keys = Object.keys(this.set);\n              var length = keys.length;\n              for (var i = 0; i < length; i++) {\n                list.push(this.set[keys[i]]);\n              }\n            };\n            HashSet.prototype.size = function() {\n              return Object.keys(this.set).length;\n            };\n            HashSet.prototype.addAll = function(list) {\n              var s = list.length;\n              for (var i = 0; i < s; i++) {\n                var v = list[i];\n                this.add(v);\n              }\n            };\n            module2.exports = HashSet;\n          },\n          /* 24 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            var _createClass = /* @__PURE__ */ function() {\n              function defineProperties(target, props) {\n                for (var i = 0; i < props.length; i++) {\n                  var descriptor = props[i];\n                  descriptor.enumerable = descriptor.enumerable || false;\n                  descriptor.configurable = true;\n                  if (\"value\" in descriptor) descriptor.writable = true;\n                  Object.defineProperty(target, descriptor.key, descriptor);\n                }\n              }\n              __name(defineProperties, \"defineProperties\");\n              return function(Constructor, protoProps, staticProps) {\n                if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                if (staticProps) defineProperties(Constructor, staticProps);\n                return Constructor;\n              };\n            }();\n            function _classCallCheck(instance2, Constructor) {\n              if (!(instance2 instanceof Constructor)) {\n                throw new TypeError(\"Cannot call a class as a function\");\n              }\n            }\n            __name(_classCallCheck, \"_classCallCheck\");\n            var LinkedList = __webpack_require__(11);\n            var Quicksort = function() {\n              function Quicksort2(A, compareFunction) {\n                _classCallCheck(this, Quicksort2);\n                if (compareFunction !== null || compareFunction !== void 0) this.compareFunction = this._defaultCompareFunction;\n                var length = void 0;\n                if (A instanceof LinkedList) length = A.size();\n                else length = A.length;\n                this._quicksort(A, 0, length - 1);\n              }\n              __name(Quicksort2, \"Quicksort\");\n              _createClass(Quicksort2, [{\n                key: \"_quicksort\",\n                value: /* @__PURE__ */ __name(function _quicksort(A, p, r) {\n                  if (p < r) {\n                    var q = this._partition(A, p, r);\n                    this._quicksort(A, p, q);\n                    this._quicksort(A, q + 1, r);\n                  }\n                }, \"_quicksort\")\n              }, {\n                key: \"_partition\",\n                value: /* @__PURE__ */ __name(function _partition(A, p, r) {\n                  var x = this._get(A, p);\n                  var i = p;\n                  var j = r;\n                  while (true) {\n                    while (this.compareFunction(x, this._get(A, j))) {\n                      j--;\n                    }\n                    while (this.compareFunction(this._get(A, i), x)) {\n                      i++;\n                    }\n                    if (i < j) {\n                      this._swap(A, i, j);\n                      i++;\n                      j--;\n                    } else return j;\n                  }\n                }, \"_partition\")\n              }, {\n                key: \"_get\",\n                value: /* @__PURE__ */ __name(function _get(object, index) {\n                  if (object instanceof LinkedList) return object.get_object_at(index);\n                  else return object[index];\n                }, \"_get\")\n              }, {\n                key: \"_set\",\n                value: /* @__PURE__ */ __name(function _set(object, index, value) {\n                  if (object instanceof LinkedList) object.set_object_at(index, value);\n                  else object[index] = value;\n                }, \"_set\")\n              }, {\n                key: \"_swap\",\n                value: /* @__PURE__ */ __name(function _swap(A, i, j) {\n                  var temp = this._get(A, i);\n                  this._set(A, i, this._get(A, j));\n                  this._set(A, j, temp);\n                }, \"_swap\")\n              }, {\n                key: \"_defaultCompareFunction\",\n                value: /* @__PURE__ */ __name(function _defaultCompareFunction(a, b) {\n                  return b > a;\n                }, \"_defaultCompareFunction\")\n              }]);\n              return Quicksort2;\n            }();\n            module2.exports = Quicksort;\n          },\n          /* 25 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            var _createClass = /* @__PURE__ */ function() {\n              function defineProperties(target, props) {\n                for (var i = 0; i < props.length; i++) {\n                  var descriptor = props[i];\n                  descriptor.enumerable = descriptor.enumerable || false;\n                  descriptor.configurable = true;\n                  if (\"value\" in descriptor) descriptor.writable = true;\n                  Object.defineProperty(target, descriptor.key, descriptor);\n                }\n              }\n              __name(defineProperties, \"defineProperties\");\n              return function(Constructor, protoProps, staticProps) {\n                if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                if (staticProps) defineProperties(Constructor, staticProps);\n                return Constructor;\n              };\n            }();\n            function _classCallCheck(instance2, Constructor) {\n              if (!(instance2 instanceof Constructor)) {\n                throw new TypeError(\"Cannot call a class as a function\");\n              }\n            }\n            __name(_classCallCheck, \"_classCallCheck\");\n            var NeedlemanWunsch = function() {\n              function NeedlemanWunsch2(sequence1, sequence2) {\n                var match_score = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;\n                var mismatch_penalty = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : -1;\n                var gap_penalty = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : -1;\n                _classCallCheck(this, NeedlemanWunsch2);\n                this.sequence1 = sequence1;\n                this.sequence2 = sequence2;\n                this.match_score = match_score;\n                this.mismatch_penalty = mismatch_penalty;\n                this.gap_penalty = gap_penalty;\n                this.iMax = sequence1.length + 1;\n                this.jMax = sequence2.length + 1;\n                this.grid = new Array(this.iMax);\n                for (var i = 0; i < this.iMax; i++) {\n                  this.grid[i] = new Array(this.jMax);\n                  for (var j = 0; j < this.jMax; j++) {\n                    this.grid[i][j] = 0;\n                  }\n                }\n                this.tracebackGrid = new Array(this.iMax);\n                for (var _i = 0; _i < this.iMax; _i++) {\n                  this.tracebackGrid[_i] = new Array(this.jMax);\n                  for (var _j = 0; _j < this.jMax; _j++) {\n                    this.tracebackGrid[_i][_j] = [null, null, null];\n                  }\n                }\n                this.alignments = [];\n                this.score = -1;\n                this.computeGrids();\n              }\n              __name(NeedlemanWunsch2, \"NeedlemanWunsch\");\n              _createClass(NeedlemanWunsch2, [{\n                key: \"getScore\",\n                value: /* @__PURE__ */ __name(function getScore() {\n                  return this.score;\n                }, \"getScore\")\n              }, {\n                key: \"getAlignments\",\n                value: /* @__PURE__ */ __name(function getAlignments() {\n                  return this.alignments;\n                }, \"getAlignments\")\n                // Main dynamic programming procedure\n              }, {\n                key: \"computeGrids\",\n                value: /* @__PURE__ */ __name(function computeGrids() {\n                  for (var j = 1; j < this.jMax; j++) {\n                    this.grid[0][j] = this.grid[0][j - 1] + this.gap_penalty;\n                    this.tracebackGrid[0][j] = [false, false, true];\n                  }\n                  for (var i = 1; i < this.iMax; i++) {\n                    this.grid[i][0] = this.grid[i - 1][0] + this.gap_penalty;\n                    this.tracebackGrid[i][0] = [false, true, false];\n                  }\n                  for (var _i2 = 1; _i2 < this.iMax; _i2++) {\n                    for (var _j2 = 1; _j2 < this.jMax; _j2++) {\n                      var diag = void 0;\n                      if (this.sequence1[_i2 - 1] === this.sequence2[_j2 - 1]) diag = this.grid[_i2 - 1][_j2 - 1] + this.match_score;\n                      else diag = this.grid[_i2 - 1][_j2 - 1] + this.mismatch_penalty;\n                      var up = this.grid[_i2 - 1][_j2] + this.gap_penalty;\n                      var left = this.grid[_i2][_j2 - 1] + this.gap_penalty;\n                      var maxOf = [diag, up, left];\n                      var indices = this.arrayAllMaxIndexes(maxOf);\n                      this.grid[_i2][_j2] = maxOf[indices[0]];\n                      this.tracebackGrid[_i2][_j2] = [indices.includes(0), indices.includes(1), indices.includes(2)];\n                    }\n                  }\n                  this.score = this.grid[this.iMax - 1][this.jMax - 1];\n                }, \"computeGrids\")\n                // Gets all possible valid sequence combinations\n              }, {\n                key: \"alignmentTraceback\",\n                value: /* @__PURE__ */ __name(function alignmentTraceback() {\n                  var inProcessAlignments = [];\n                  inProcessAlignments.push({\n                    pos: [this.sequence1.length, this.sequence2.length],\n                    seq1: \"\",\n                    seq2: \"\"\n                  });\n                  while (inProcessAlignments[0]) {\n                    var current = inProcessAlignments[0];\n                    var directions = this.tracebackGrid[current.pos[0]][current.pos[1]];\n                    if (directions[0]) {\n                      inProcessAlignments.push({\n                        pos: [current.pos[0] - 1, current.pos[1] - 1],\n                        seq1: this.sequence1[current.pos[0] - 1] + current.seq1,\n                        seq2: this.sequence2[current.pos[1] - 1] + current.seq2\n                      });\n                    }\n                    if (directions[1]) {\n                      inProcessAlignments.push({\n                        pos: [current.pos[0] - 1, current.pos[1]],\n                        seq1: this.sequence1[current.pos[0] - 1] + current.seq1,\n                        seq2: \"-\" + current.seq2\n                      });\n                    }\n                    if (directions[2]) {\n                      inProcessAlignments.push({\n                        pos: [current.pos[0], current.pos[1] - 1],\n                        seq1: \"-\" + current.seq1,\n                        seq2: this.sequence2[current.pos[1] - 1] + current.seq2\n                      });\n                    }\n                    if (current.pos[0] === 0 && current.pos[1] === 0) this.alignments.push({\n                      sequence1: current.seq1,\n                      sequence2: current.seq2\n                    });\n                    inProcessAlignments.shift();\n                  }\n                  return this.alignments;\n                }, \"alignmentTraceback\")\n                // Helper Functions\n              }, {\n                key: \"getAllIndexes\",\n                value: /* @__PURE__ */ __name(function getAllIndexes(arr, val) {\n                  var indexes = [], i = -1;\n                  while ((i = arr.indexOf(val, i + 1)) !== -1) {\n                    indexes.push(i);\n                  }\n                  return indexes;\n                }, \"getAllIndexes\")\n              }, {\n                key: \"arrayAllMaxIndexes\",\n                value: /* @__PURE__ */ __name(function arrayAllMaxIndexes(array) {\n                  return this.getAllIndexes(array, Math.max.apply(null, array));\n                }, \"arrayAllMaxIndexes\")\n              }]);\n              return NeedlemanWunsch2;\n            }();\n            module2.exports = NeedlemanWunsch;\n          },\n          /* 26 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            var layoutBase = /* @__PURE__ */ __name(function layoutBase2() {\n              return;\n            }, \"layoutBase\");\n            layoutBase.FDLayout = __webpack_require__(18);\n            layoutBase.FDLayoutConstants = __webpack_require__(7);\n            layoutBase.FDLayoutEdge = __webpack_require__(19);\n            layoutBase.FDLayoutNode = __webpack_require__(20);\n            layoutBase.DimensionD = __webpack_require__(21);\n            layoutBase.HashMap = __webpack_require__(22);\n            layoutBase.HashSet = __webpack_require__(23);\n            layoutBase.IGeometry = __webpack_require__(8);\n            layoutBase.IMath = __webpack_require__(9);\n            layoutBase.Integer = __webpack_require__(10);\n            layoutBase.Point = __webpack_require__(12);\n            layoutBase.PointD = __webpack_require__(4);\n            layoutBase.RandomSeed = __webpack_require__(16);\n            layoutBase.RectangleD = __webpack_require__(13);\n            layoutBase.Transform = __webpack_require__(17);\n            layoutBase.UniqueIDGeneretor = __webpack_require__(14);\n            layoutBase.Quicksort = __webpack_require__(24);\n            layoutBase.LinkedList = __webpack_require__(11);\n            layoutBase.LGraphObject = __webpack_require__(2);\n            layoutBase.LGraph = __webpack_require__(5);\n            layoutBase.LEdge = __webpack_require__(1);\n            layoutBase.LGraphManager = __webpack_require__(6);\n            layoutBase.LNode = __webpack_require__(3);\n            layoutBase.Layout = __webpack_require__(15);\n            layoutBase.LayoutConstants = __webpack_require__(0);\n            layoutBase.NeedlemanWunsch = __webpack_require__(25);\n            module2.exports = layoutBase;\n          },\n          /* 27 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            function Emitter() {\n              this.listeners = [];\n            }\n            __name(Emitter, \"Emitter\");\n            var p = Emitter.prototype;\n            p.addListener = function(event, callback) {\n              this.listeners.push({\n                event,\n                callback\n              });\n            };\n            p.removeListener = function(event, callback) {\n              for (var i = this.listeners.length; i >= 0; i--) {\n                var l = this.listeners[i];\n                if (l.event === event && l.callback === callback) {\n                  this.listeners.splice(i, 1);\n                }\n              }\n            };\n            p.emit = function(event, data) {\n              for (var i = 0; i < this.listeners.length; i++) {\n                var l = this.listeners[i];\n                if (event === l.event) {\n                  l.callback(data);\n                }\n              }\n            };\n            module2.exports = Emitter;\n          }\n          /******/\n        ])\n      );\n    });\n  }\n});\n\n// ../../node_modules/.pnpm/cose-base@1.0.3/node_modules/cose-base/cose-base.js\nvar require_cose_base = __commonJS({\n  \"../../node_modules/.pnpm/cose-base@1.0.3/node_modules/cose-base/cose-base.js\"(exports, module) {\n    \"use strict\";\n    (/* @__PURE__ */ __name(function webpackUniversalModuleDefinition(root, factory) {\n      if (typeof exports === \"object\" && typeof module === \"object\")\n        module.exports = factory(require_layout_base());\n      else if (typeof define === \"function\" && define.amd)\n        define([\"layout-base\"], factory);\n      else if (typeof exports === \"object\")\n        exports[\"coseBase\"] = factory(require_layout_base());\n      else\n        root[\"coseBase\"] = factory(root[\"layoutBase\"]);\n    }, \"webpackUniversalModuleDefinition\"))(exports, function(__WEBPACK_EXTERNAL_MODULE_0__) {\n      return (\n        /******/\n        function(modules) {\n          var installedModules = {};\n          function __webpack_require__(moduleId) {\n            if (installedModules[moduleId]) {\n              return installedModules[moduleId].exports;\n            }\n            var module2 = installedModules[moduleId] = {\n              /******/\n              i: moduleId,\n              /******/\n              l: false,\n              /******/\n              exports: {}\n              /******/\n            };\n            modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);\n            module2.l = true;\n            return module2.exports;\n          }\n          __name(__webpack_require__, \"__webpack_require__\");\n          __webpack_require__.m = modules;\n          __webpack_require__.c = installedModules;\n          __webpack_require__.i = function(value) {\n            return value;\n          };\n          __webpack_require__.d = function(exports2, name, getter) {\n            if (!__webpack_require__.o(exports2, name)) {\n              Object.defineProperty(exports2, name, {\n                /******/\n                configurable: false,\n                /******/\n                enumerable: true,\n                /******/\n                get: getter\n                /******/\n              });\n            }\n          };\n          __webpack_require__.n = function(module2) {\n            var getter = module2 && module2.__esModule ? (\n              /******/\n              /* @__PURE__ */ __name(function getDefault() {\n                return module2[\"default\"];\n              }, \"getDefault\")\n            ) : (\n              /******/\n              /* @__PURE__ */ __name(function getModuleExports() {\n                return module2;\n              }, \"getModuleExports\")\n            );\n            __webpack_require__.d(getter, \"a\", getter);\n            return getter;\n          };\n          __webpack_require__.o = function(object, property) {\n            return Object.prototype.hasOwnProperty.call(object, property);\n          };\n          __webpack_require__.p = \"\";\n          return __webpack_require__(__webpack_require__.s = 7);\n        }([\n          /* 0 */\n          /***/\n          function(module2, exports2) {\n            module2.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n          },\n          /* 1 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            var FDLayoutConstants = __webpack_require__(0).FDLayoutConstants;\n            function CoSEConstants() {\n            }\n            __name(CoSEConstants, \"CoSEConstants\");\n            for (var prop in FDLayoutConstants) {\n              CoSEConstants[prop] = FDLayoutConstants[prop];\n            }\n            CoSEConstants.DEFAULT_USE_MULTI_LEVEL_SCALING = false;\n            CoSEConstants.DEFAULT_RADIAL_SEPARATION = FDLayoutConstants.DEFAULT_EDGE_LENGTH;\n            CoSEConstants.DEFAULT_COMPONENT_SEPERATION = 60;\n            CoSEConstants.TILE = true;\n            CoSEConstants.TILING_PADDING_VERTICAL = 10;\n            CoSEConstants.TILING_PADDING_HORIZONTAL = 10;\n            CoSEConstants.TREE_REDUCTION_ON_INCREMENTAL = false;\n            module2.exports = CoSEConstants;\n          },\n          /* 2 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            var FDLayoutEdge = __webpack_require__(0).FDLayoutEdge;\n            function CoSEEdge(source, target, vEdge) {\n              FDLayoutEdge.call(this, source, target, vEdge);\n            }\n            __name(CoSEEdge, \"CoSEEdge\");\n            CoSEEdge.prototype = Object.create(FDLayoutEdge.prototype);\n            for (var prop in FDLayoutEdge) {\n              CoSEEdge[prop] = FDLayoutEdge[prop];\n            }\n            module2.exports = CoSEEdge;\n          },\n          /* 3 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            var LGraph = __webpack_require__(0).LGraph;\n            function CoSEGraph(parent, graphMgr, vGraph) {\n              LGraph.call(this, parent, graphMgr, vGraph);\n            }\n            __name(CoSEGraph, \"CoSEGraph\");\n            CoSEGraph.prototype = Object.create(LGraph.prototype);\n            for (var prop in LGraph) {\n              CoSEGraph[prop] = LGraph[prop];\n            }\n            module2.exports = CoSEGraph;\n          },\n          /* 4 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            var LGraphManager = __webpack_require__(0).LGraphManager;\n            function CoSEGraphManager(layout) {\n              LGraphManager.call(this, layout);\n            }\n            __name(CoSEGraphManager, \"CoSEGraphManager\");\n            CoSEGraphManager.prototype = Object.create(LGraphManager.prototype);\n            for (var prop in LGraphManager) {\n              CoSEGraphManager[prop] = LGraphManager[prop];\n            }\n            module2.exports = CoSEGraphManager;\n          },\n          /* 5 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            var FDLayoutNode = __webpack_require__(0).FDLayoutNode;\n            var IMath = __webpack_require__(0).IMath;\n            function CoSENode(gm, loc, size, vNode) {\n              FDLayoutNode.call(this, gm, loc, size, vNode);\n            }\n            __name(CoSENode, \"CoSENode\");\n            CoSENode.prototype = Object.create(FDLayoutNode.prototype);\n            for (var prop in FDLayoutNode) {\n              CoSENode[prop] = FDLayoutNode[prop];\n            }\n            CoSENode.prototype.move = function() {\n              var layout = this.graphManager.getLayout();\n              this.displacementX = layout.coolingFactor * (this.springForceX + this.repulsionForceX + this.gravitationForceX) / this.noOfChildren;\n              this.displacementY = layout.coolingFactor * (this.springForceY + this.repulsionForceY + this.gravitationForceY) / this.noOfChildren;\n              if (Math.abs(this.displacementX) > layout.coolingFactor * layout.maxNodeDisplacement) {\n                this.displacementX = layout.coolingFactor * layout.maxNodeDisplacement * IMath.sign(this.displacementX);\n              }\n              if (Math.abs(this.displacementY) > layout.coolingFactor * layout.maxNodeDisplacement) {\n                this.displacementY = layout.coolingFactor * layout.maxNodeDisplacement * IMath.sign(this.displacementY);\n              }\n              if (this.child == null) {\n                this.moveBy(this.displacementX, this.displacementY);\n              } else if (this.child.getNodes().length == 0) {\n                this.moveBy(this.displacementX, this.displacementY);\n              } else {\n                this.propogateDisplacementToChildren(this.displacementX, this.displacementY);\n              }\n              layout.totalDisplacement += Math.abs(this.displacementX) + Math.abs(this.displacementY);\n              this.springForceX = 0;\n              this.springForceY = 0;\n              this.repulsionForceX = 0;\n              this.repulsionForceY = 0;\n              this.gravitationForceX = 0;\n              this.gravitationForceY = 0;\n              this.displacementX = 0;\n              this.displacementY = 0;\n            };\n            CoSENode.prototype.propogateDisplacementToChildren = function(dX, dY) {\n              var nodes2 = this.getChild().getNodes();\n              var node;\n              for (var i = 0; i < nodes2.length; i++) {\n                node = nodes2[i];\n                if (node.getChild() == null) {\n                  node.moveBy(dX, dY);\n                  node.displacementX += dX;\n                  node.displacementY += dY;\n                } else {\n                  node.propogateDisplacementToChildren(dX, dY);\n                }\n              }\n            };\n            CoSENode.prototype.setPred1 = function(pred12) {\n              this.pred1 = pred12;\n            };\n            CoSENode.prototype.getPred1 = function() {\n              return pred1;\n            };\n            CoSENode.prototype.getPred2 = function() {\n              return pred2;\n            };\n            CoSENode.prototype.setNext = function(next2) {\n              this.next = next2;\n            };\n            CoSENode.prototype.getNext = function() {\n              return next;\n            };\n            CoSENode.prototype.setProcessed = function(processed2) {\n              this.processed = processed2;\n            };\n            CoSENode.prototype.isProcessed = function() {\n              return processed;\n            };\n            module2.exports = CoSENode;\n          },\n          /* 6 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            var FDLayout = __webpack_require__(0).FDLayout;\n            var CoSEGraphManager = __webpack_require__(4);\n            var CoSEGraph = __webpack_require__(3);\n            var CoSENode = __webpack_require__(5);\n            var CoSEEdge = __webpack_require__(2);\n            var CoSEConstants = __webpack_require__(1);\n            var FDLayoutConstants = __webpack_require__(0).FDLayoutConstants;\n            var LayoutConstants = __webpack_require__(0).LayoutConstants;\n            var Point2 = __webpack_require__(0).Point;\n            var PointD = __webpack_require__(0).PointD;\n            var Layout2 = __webpack_require__(0).Layout;\n            var Integer = __webpack_require__(0).Integer;\n            var IGeometry = __webpack_require__(0).IGeometry;\n            var LGraph = __webpack_require__(0).LGraph;\n            var Transform = __webpack_require__(0).Transform;\n            function CoSELayout() {\n              FDLayout.call(this);\n              this.toBeTiled = {};\n            }\n            __name(CoSELayout, \"CoSELayout\");\n            CoSELayout.prototype = Object.create(FDLayout.prototype);\n            for (var prop in FDLayout) {\n              CoSELayout[prop] = FDLayout[prop];\n            }\n            CoSELayout.prototype.newGraphManager = function() {\n              var gm = new CoSEGraphManager(this);\n              this.graphManager = gm;\n              return gm;\n            };\n            CoSELayout.prototype.newGraph = function(vGraph) {\n              return new CoSEGraph(null, this.graphManager, vGraph);\n            };\n            CoSELayout.prototype.newNode = function(vNode) {\n              return new CoSENode(this.graphManager, vNode);\n            };\n            CoSELayout.prototype.newEdge = function(vEdge) {\n              return new CoSEEdge(null, null, vEdge);\n            };\n            CoSELayout.prototype.initParameters = function() {\n              FDLayout.prototype.initParameters.call(this, arguments);\n              if (!this.isSubLayout) {\n                if (CoSEConstants.DEFAULT_EDGE_LENGTH < 10) {\n                  this.idealEdgeLength = 10;\n                } else {\n                  this.idealEdgeLength = CoSEConstants.DEFAULT_EDGE_LENGTH;\n                }\n                this.useSmartIdealEdgeLengthCalculation = CoSEConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION;\n                this.springConstant = FDLayoutConstants.DEFAULT_SPRING_STRENGTH;\n                this.repulsionConstant = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH;\n                this.gravityConstant = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH;\n                this.compoundGravityConstant = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH;\n                this.gravityRangeFactor = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR;\n                this.compoundGravityRangeFactor = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR;\n                this.prunedNodesAll = [];\n                this.growTreeIterations = 0;\n                this.afterGrowthIterations = 0;\n                this.isTreeGrowing = false;\n                this.isGrowthFinished = false;\n                this.coolingCycle = 0;\n                this.maxCoolingCycle = this.maxIterations / FDLayoutConstants.CONVERGENCE_CHECK_PERIOD;\n                this.finalTemperature = FDLayoutConstants.CONVERGENCE_CHECK_PERIOD / this.maxIterations;\n                this.coolingAdjuster = 1;\n              }\n            };\n            CoSELayout.prototype.layout = function() {\n              var createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;\n              if (createBendsAsNeeded) {\n                this.createBendpoints();\n                this.graphManager.resetAllEdges();\n              }\n              this.level = 0;\n              return this.classicLayout();\n            };\n            CoSELayout.prototype.classicLayout = function() {\n              this.nodesWithGravity = this.calculateNodesToApplyGravitationTo();\n              this.graphManager.setAllNodesToApplyGravitation(this.nodesWithGravity);\n              this.calcNoOfChildrenForAllNodes();\n              this.graphManager.calcLowestCommonAncestors();\n              this.graphManager.calcInclusionTreeDepths();\n              this.graphManager.getRoot().calcEstimatedSize();\n              this.calcIdealEdgeLengths();\n              if (!this.incremental) {\n                var forest = this.getFlatForest();\n                if (forest.length > 0) {\n                  this.positionNodesRadially(forest);\n                } else {\n                  this.reduceTrees();\n                  this.graphManager.resetAllNodesToApplyGravitation();\n                  var allNodes = new Set(this.getAllNodes());\n                  var intersection = this.nodesWithGravity.filter(function(x) {\n                    return allNodes.has(x);\n                  });\n                  this.graphManager.setAllNodesToApplyGravitation(intersection);\n                  this.positionNodesRandomly();\n                }\n              } else {\n                if (CoSEConstants.TREE_REDUCTION_ON_INCREMENTAL) {\n                  this.reduceTrees();\n                  this.graphManager.resetAllNodesToApplyGravitation();\n                  var allNodes = new Set(this.getAllNodes());\n                  var intersection = this.nodesWithGravity.filter(function(x) {\n                    return allNodes.has(x);\n                  });\n                  this.graphManager.setAllNodesToApplyGravitation(intersection);\n                }\n              }\n              this.initSpringEmbedder();\n              this.runSpringEmbedder();\n              return true;\n            };\n            CoSELayout.prototype.tick = function() {\n              this.totalIterations++;\n              if (this.totalIterations === this.maxIterations && !this.isTreeGrowing && !this.isGrowthFinished) {\n                if (this.prunedNodesAll.length > 0) {\n                  this.isTreeGrowing = true;\n                } else {\n                  return true;\n                }\n              }\n              if (this.totalIterations % FDLayoutConstants.CONVERGENCE_CHECK_PERIOD == 0 && !this.isTreeGrowing && !this.isGrowthFinished) {\n                if (this.isConverged()) {\n                  if (this.prunedNodesAll.length > 0) {\n                    this.isTreeGrowing = true;\n                  } else {\n                    return true;\n                  }\n                }\n                this.coolingCycle++;\n                if (this.layoutQuality == 0) {\n                  this.coolingAdjuster = this.coolingCycle;\n                } else if (this.layoutQuality == 1) {\n                  this.coolingAdjuster = this.coolingCycle / 3;\n                }\n                this.coolingFactor = Math.max(this.initialCoolingFactor - Math.pow(this.coolingCycle, Math.log(100 * (this.initialCoolingFactor - this.finalTemperature)) / Math.log(this.maxCoolingCycle)) / 100 * this.coolingAdjuster, this.finalTemperature);\n                this.animationPeriod = Math.ceil(this.initialAnimationPeriod * Math.sqrt(this.coolingFactor));\n              }\n              if (this.isTreeGrowing) {\n                if (this.growTreeIterations % 10 == 0) {\n                  if (this.prunedNodesAll.length > 0) {\n                    this.graphManager.updateBounds();\n                    this.updateGrid();\n                    this.growTree(this.prunedNodesAll);\n                    this.graphManager.resetAllNodesToApplyGravitation();\n                    var allNodes = new Set(this.getAllNodes());\n                    var intersection = this.nodesWithGravity.filter(function(x) {\n                      return allNodes.has(x);\n                    });\n                    this.graphManager.setAllNodesToApplyGravitation(intersection);\n                    this.graphManager.updateBounds();\n                    this.updateGrid();\n                    this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;\n                  } else {\n                    this.isTreeGrowing = false;\n                    this.isGrowthFinished = true;\n                  }\n                }\n                this.growTreeIterations++;\n              }\n              if (this.isGrowthFinished) {\n                if (this.isConverged()) {\n                  return true;\n                }\n                if (this.afterGrowthIterations % 10 == 0) {\n                  this.graphManager.updateBounds();\n                  this.updateGrid();\n                }\n                this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL * ((100 - this.afterGrowthIterations) / 100);\n                this.afterGrowthIterations++;\n              }\n              var gridUpdateAllowed = !this.isTreeGrowing && !this.isGrowthFinished;\n              var forceToNodeSurroundingUpdate = this.growTreeIterations % 10 == 1 && this.isTreeGrowing || this.afterGrowthIterations % 10 == 1 && this.isGrowthFinished;\n              this.totalDisplacement = 0;\n              this.graphManager.updateBounds();\n              this.calcSpringForces();\n              this.calcRepulsionForces(gridUpdateAllowed, forceToNodeSurroundingUpdate);\n              this.calcGravitationalForces();\n              this.moveNodes();\n              this.animate();\n              return false;\n            };\n            CoSELayout.prototype.getPositionsData = function() {\n              var allNodes = this.graphManager.getAllNodes();\n              var pData = {};\n              for (var i = 0; i < allNodes.length; i++) {\n                var rect = allNodes[i].rect;\n                var id = allNodes[i].id;\n                pData[id] = {\n                  id,\n                  x: rect.getCenterX(),\n                  y: rect.getCenterY(),\n                  w: rect.width,\n                  h: rect.height\n                };\n              }\n              return pData;\n            };\n            CoSELayout.prototype.runSpringEmbedder = function() {\n              this.initialAnimationPeriod = 25;\n              this.animationPeriod = this.initialAnimationPeriod;\n              var layoutEnded = false;\n              if (FDLayoutConstants.ANIMATE === \"during\") {\n                this.emit(\"layoutstarted\");\n              } else {\n                while (!layoutEnded) {\n                  layoutEnded = this.tick();\n                }\n                this.graphManager.updateBounds();\n              }\n            };\n            CoSELayout.prototype.calculateNodesToApplyGravitationTo = function() {\n              var nodeList = [];\n              var graph;\n              var graphs = this.graphManager.getGraphs();\n              var size = graphs.length;\n              var i;\n              for (i = 0; i < size; i++) {\n                graph = graphs[i];\n                graph.updateConnected();\n                if (!graph.isConnected) {\n                  nodeList = nodeList.concat(graph.getNodes());\n                }\n              }\n              return nodeList;\n            };\n            CoSELayout.prototype.createBendpoints = function() {\n              var edges = [];\n              edges = edges.concat(this.graphManager.getAllEdges());\n              var visited = /* @__PURE__ */ new Set();\n              var i;\n              for (i = 0; i < edges.length; i++) {\n                var edge = edges[i];\n                if (!visited.has(edge)) {\n                  var source = edge.getSource();\n                  var target = edge.getTarget();\n                  if (source == target) {\n                    edge.getBendpoints().push(new PointD());\n                    edge.getBendpoints().push(new PointD());\n                    this.createDummyNodesForBendpoints(edge);\n                    visited.add(edge);\n                  } else {\n                    var edgeList = [];\n                    edgeList = edgeList.concat(source.getEdgeListToNode(target));\n                    edgeList = edgeList.concat(target.getEdgeListToNode(source));\n                    if (!visited.has(edgeList[0])) {\n                      if (edgeList.length > 1) {\n                        var k;\n                        for (k = 0; k < edgeList.length; k++) {\n                          var multiEdge = edgeList[k];\n                          multiEdge.getBendpoints().push(new PointD());\n                          this.createDummyNodesForBendpoints(multiEdge);\n                        }\n                      }\n                      edgeList.forEach(function(edge2) {\n                        visited.add(edge2);\n                      });\n                    }\n                  }\n                }\n                if (visited.size == edges.length) {\n                  break;\n                }\n              }\n            };\n            CoSELayout.prototype.positionNodesRadially = function(forest) {\n              var currentStartingPoint = new Point2(0, 0);\n              var numberOfColumns = Math.ceil(Math.sqrt(forest.length));\n              var height = 0;\n              var currentY = 0;\n              var currentX = 0;\n              var point = new PointD(0, 0);\n              for (var i = 0; i < forest.length; i++) {\n                if (i % numberOfColumns == 0) {\n                  currentX = 0;\n                  currentY = height;\n                  if (i != 0) {\n                    currentY += CoSEConstants.DEFAULT_COMPONENT_SEPERATION;\n                  }\n                  height = 0;\n                }\n                var tree = forest[i];\n                var centerNode = Layout2.findCenterOfTree(tree);\n                currentStartingPoint.x = currentX;\n                currentStartingPoint.y = currentY;\n                point = CoSELayout.radialLayout(tree, centerNode, currentStartingPoint);\n                if (point.y > height) {\n                  height = Math.floor(point.y);\n                }\n                currentX = Math.floor(point.x + CoSEConstants.DEFAULT_COMPONENT_SEPERATION);\n              }\n              this.transform(new PointD(LayoutConstants.WORLD_CENTER_X - point.x / 2, LayoutConstants.WORLD_CENTER_Y - point.y / 2));\n            };\n            CoSELayout.radialLayout = function(tree, centerNode, startingPoint) {\n              var radialSep = Math.max(this.maxDiagonalInTree(tree), CoSEConstants.DEFAULT_RADIAL_SEPARATION);\n              CoSELayout.branchRadialLayout(centerNode, null, 0, 359, 0, radialSep);\n              var bounds = LGraph.calculateBounds(tree);\n              var transform = new Transform();\n              transform.setDeviceOrgX(bounds.getMinX());\n              transform.setDeviceOrgY(bounds.getMinY());\n              transform.setWorldOrgX(startingPoint.x);\n              transform.setWorldOrgY(startingPoint.y);\n              for (var i = 0; i < tree.length; i++) {\n                var node = tree[i];\n                node.transform(transform);\n              }\n              var bottomRight = new PointD(bounds.getMaxX(), bounds.getMaxY());\n              return transform.inverseTransformPoint(bottomRight);\n            };\n            CoSELayout.branchRadialLayout = function(node, parentOfNode, startAngle, endAngle, distance, radialSeparation) {\n              var halfInterval = (endAngle - startAngle + 1) / 2;\n              if (halfInterval < 0) {\n                halfInterval += 180;\n              }\n              var nodeAngle = (halfInterval + startAngle) % 360;\n              var teta = nodeAngle * IGeometry.TWO_PI / 360;\n              var cos_teta = Math.cos(teta);\n              var x_ = distance * Math.cos(teta);\n              var y_ = distance * Math.sin(teta);\n              node.setCenter(x_, y_);\n              var neighborEdges = [];\n              neighborEdges = neighborEdges.concat(node.getEdges());\n              var childCount = neighborEdges.length;\n              if (parentOfNode != null) {\n                childCount--;\n              }\n              var branchCount = 0;\n              var incEdgesCount = neighborEdges.length;\n              var startIndex;\n              var edges = node.getEdgesBetween(parentOfNode);\n              while (edges.length > 1) {\n                var temp = edges[0];\n                edges.splice(0, 1);\n                var index = neighborEdges.indexOf(temp);\n                if (index >= 0) {\n                  neighborEdges.splice(index, 1);\n                }\n                incEdgesCount--;\n                childCount--;\n              }\n              if (parentOfNode != null) {\n                startIndex = (neighborEdges.indexOf(edges[0]) + 1) % incEdgesCount;\n              } else {\n                startIndex = 0;\n              }\n              var stepAngle = Math.abs(endAngle - startAngle) / childCount;\n              for (var i = startIndex; branchCount != childCount; i = ++i % incEdgesCount) {\n                var currentNeighbor = neighborEdges[i].getOtherEnd(node);\n                if (currentNeighbor == parentOfNode) {\n                  continue;\n                }\n                var childStartAngle = (startAngle + branchCount * stepAngle) % 360;\n                var childEndAngle = (childStartAngle + stepAngle) % 360;\n                CoSELayout.branchRadialLayout(currentNeighbor, node, childStartAngle, childEndAngle, distance + radialSeparation, radialSeparation);\n                branchCount++;\n              }\n            };\n            CoSELayout.maxDiagonalInTree = function(tree) {\n              var maxDiagonal = Integer.MIN_VALUE;\n              for (var i = 0; i < tree.length; i++) {\n                var node = tree[i];\n                var diagonal = node.getDiagonal();\n                if (diagonal > maxDiagonal) {\n                  maxDiagonal = diagonal;\n                }\n              }\n              return maxDiagonal;\n            };\n            CoSELayout.prototype.calcRepulsionRange = function() {\n              return 2 * (this.level + 1) * this.idealEdgeLength;\n            };\n            CoSELayout.prototype.groupZeroDegreeMembers = function() {\n              var self = this;\n              var tempMemberGroups = {};\n              this.memberGroups = {};\n              this.idToDummyNode = {};\n              var zeroDegree = [];\n              var allNodes = this.graphManager.getAllNodes();\n              for (var i = 0; i < allNodes.length; i++) {\n                var node = allNodes[i];\n                var parent = node.getParent();\n                if (this.getNodeDegreeWithChildren(node) === 0 && (parent.id == void 0 || !this.getToBeTiled(parent))) {\n                  zeroDegree.push(node);\n                }\n              }\n              for (var i = 0; i < zeroDegree.length; i++) {\n                var node = zeroDegree[i];\n                var p_id = node.getParent().id;\n                if (typeof tempMemberGroups[p_id] === \"undefined\") tempMemberGroups[p_id] = [];\n                tempMemberGroups[p_id] = tempMemberGroups[p_id].concat(node);\n              }\n              Object.keys(tempMemberGroups).forEach(function(p_id2) {\n                if (tempMemberGroups[p_id2].length > 1) {\n                  var dummyCompoundId = \"DummyCompound_\" + p_id2;\n                  self.memberGroups[dummyCompoundId] = tempMemberGroups[p_id2];\n                  var parent2 = tempMemberGroups[p_id2][0].getParent();\n                  var dummyCompound = new CoSENode(self.graphManager);\n                  dummyCompound.id = dummyCompoundId;\n                  dummyCompound.paddingLeft = parent2.paddingLeft || 0;\n                  dummyCompound.paddingRight = parent2.paddingRight || 0;\n                  dummyCompound.paddingBottom = parent2.paddingBottom || 0;\n                  dummyCompound.paddingTop = parent2.paddingTop || 0;\n                  self.idToDummyNode[dummyCompoundId] = dummyCompound;\n                  var dummyParentGraph = self.getGraphManager().add(self.newGraph(), dummyCompound);\n                  var parentGraph = parent2.getChild();\n                  parentGraph.add(dummyCompound);\n                  for (var i2 = 0; i2 < tempMemberGroups[p_id2].length; i2++) {\n                    var node2 = tempMemberGroups[p_id2][i2];\n                    parentGraph.remove(node2);\n                    dummyParentGraph.add(node2);\n                  }\n                }\n              });\n            };\n            CoSELayout.prototype.clearCompounds = function() {\n              var childGraphMap = {};\n              var idToNode = {};\n              this.performDFSOnCompounds();\n              for (var i = 0; i < this.compoundOrder.length; i++) {\n                idToNode[this.compoundOrder[i].id] = this.compoundOrder[i];\n                childGraphMap[this.compoundOrder[i].id] = [].concat(this.compoundOrder[i].getChild().getNodes());\n                this.graphManager.remove(this.compoundOrder[i].getChild());\n                this.compoundOrder[i].child = null;\n              }\n              this.graphManager.resetAllNodes();\n              this.tileCompoundMembers(childGraphMap, idToNode);\n            };\n            CoSELayout.prototype.clearZeroDegreeMembers = function() {\n              var self = this;\n              var tiledZeroDegreePack = this.tiledZeroDegreePack = [];\n              Object.keys(this.memberGroups).forEach(function(id) {\n                var compoundNode = self.idToDummyNode[id];\n                tiledZeroDegreePack[id] = self.tileNodes(self.memberGroups[id], compoundNode.paddingLeft + compoundNode.paddingRight);\n                compoundNode.rect.width = tiledZeroDegreePack[id].width;\n                compoundNode.rect.height = tiledZeroDegreePack[id].height;\n              });\n            };\n            CoSELayout.prototype.repopulateCompounds = function() {\n              for (var i = this.compoundOrder.length - 1; i >= 0; i--) {\n                var lCompoundNode = this.compoundOrder[i];\n                var id = lCompoundNode.id;\n                var horizontalMargin = lCompoundNode.paddingLeft;\n                var verticalMargin = lCompoundNode.paddingTop;\n                this.adjustLocations(this.tiledMemberPack[id], lCompoundNode.rect.x, lCompoundNode.rect.y, horizontalMargin, verticalMargin);\n              }\n            };\n            CoSELayout.prototype.repopulateZeroDegreeMembers = function() {\n              var self = this;\n              var tiledPack = this.tiledZeroDegreePack;\n              Object.keys(tiledPack).forEach(function(id) {\n                var compoundNode = self.idToDummyNode[id];\n                var horizontalMargin = compoundNode.paddingLeft;\n                var verticalMargin = compoundNode.paddingTop;\n                self.adjustLocations(tiledPack[id], compoundNode.rect.x, compoundNode.rect.y, horizontalMargin, verticalMargin);\n              });\n            };\n            CoSELayout.prototype.getToBeTiled = function(node) {\n              var id = node.id;\n              if (this.toBeTiled[id] != null) {\n                return this.toBeTiled[id];\n              }\n              var childGraph = node.getChild();\n              if (childGraph == null) {\n                this.toBeTiled[id] = false;\n                return false;\n              }\n              var children = childGraph.getNodes();\n              for (var i = 0; i < children.length; i++) {\n                var theChild = children[i];\n                if (this.getNodeDegree(theChild) > 0) {\n                  this.toBeTiled[id] = false;\n                  return false;\n                }\n                if (theChild.getChild() == null) {\n                  this.toBeTiled[theChild.id] = false;\n                  continue;\n                }\n                if (!this.getToBeTiled(theChild)) {\n                  this.toBeTiled[id] = false;\n                  return false;\n                }\n              }\n              this.toBeTiled[id] = true;\n              return true;\n            };\n            CoSELayout.prototype.getNodeDegree = function(node) {\n              var id = node.id;\n              var edges = node.getEdges();\n              var degree = 0;\n              for (var i = 0; i < edges.length; i++) {\n                var edge = edges[i];\n                if (edge.getSource().id !== edge.getTarget().id) {\n                  degree = degree + 1;\n                }\n              }\n              return degree;\n            };\n            CoSELayout.prototype.getNodeDegreeWithChildren = function(node) {\n              var degree = this.getNodeDegree(node);\n              if (node.getChild() == null) {\n                return degree;\n              }\n              var children = node.getChild().getNodes();\n              for (var i = 0; i < children.length; i++) {\n                var child = children[i];\n                degree += this.getNodeDegreeWithChildren(child);\n              }\n              return degree;\n            };\n            CoSELayout.prototype.performDFSOnCompounds = function() {\n              this.compoundOrder = [];\n              this.fillCompexOrderByDFS(this.graphManager.getRoot().getNodes());\n            };\n            CoSELayout.prototype.fillCompexOrderByDFS = function(children) {\n              for (var i = 0; i < children.length; i++) {\n                var child = children[i];\n                if (child.getChild() != null) {\n                  this.fillCompexOrderByDFS(child.getChild().getNodes());\n                }\n                if (this.getToBeTiled(child)) {\n                  this.compoundOrder.push(child);\n                }\n              }\n            };\n            CoSELayout.prototype.adjustLocations = function(organization, x, y, compoundHorizontalMargin, compoundVerticalMargin) {\n              x += compoundHorizontalMargin;\n              y += compoundVerticalMargin;\n              var left = x;\n              for (var i = 0; i < organization.rows.length; i++) {\n                var row = organization.rows[i];\n                x = left;\n                var maxHeight = 0;\n                for (var j = 0; j < row.length; j++) {\n                  var lnode = row[j];\n                  lnode.rect.x = x;\n                  lnode.rect.y = y;\n                  x += lnode.rect.width + organization.horizontalPadding;\n                  if (lnode.rect.height > maxHeight) maxHeight = lnode.rect.height;\n                }\n                y += maxHeight + organization.verticalPadding;\n              }\n            };\n            CoSELayout.prototype.tileCompoundMembers = function(childGraphMap, idToNode) {\n              var self = this;\n              this.tiledMemberPack = [];\n              Object.keys(childGraphMap).forEach(function(id) {\n                var compoundNode = idToNode[id];\n                self.tiledMemberPack[id] = self.tileNodes(childGraphMap[id], compoundNode.paddingLeft + compoundNode.paddingRight);\n                compoundNode.rect.width = self.tiledMemberPack[id].width;\n                compoundNode.rect.height = self.tiledMemberPack[id].height;\n              });\n            };\n            CoSELayout.prototype.tileNodes = function(nodes2, minWidth) {\n              var verticalPadding = CoSEConstants.TILING_PADDING_VERTICAL;\n              var horizontalPadding = CoSEConstants.TILING_PADDING_HORIZONTAL;\n              var organization = {\n                rows: [],\n                rowWidth: [],\n                rowHeight: [],\n                width: 0,\n                height: minWidth,\n                // assume minHeight equals to minWidth\n                verticalPadding,\n                horizontalPadding\n              };\n              nodes2.sort(function(n1, n2) {\n                if (n1.rect.width * n1.rect.height > n2.rect.width * n2.rect.height) return -1;\n                if (n1.rect.width * n1.rect.height < n2.rect.width * n2.rect.height) return 1;\n                return 0;\n              });\n              for (var i = 0; i < nodes2.length; i++) {\n                var lNode = nodes2[i];\n                if (organization.rows.length == 0) {\n                  this.insertNodeToRow(organization, lNode, 0, minWidth);\n                } else if (this.canAddHorizontal(organization, lNode.rect.width, lNode.rect.height)) {\n                  this.insertNodeToRow(organization, lNode, this.getShortestRowIndex(organization), minWidth);\n                } else {\n                  this.insertNodeToRow(organization, lNode, organization.rows.length, minWidth);\n                }\n                this.shiftToLastRow(organization);\n              }\n              return organization;\n            };\n            CoSELayout.prototype.insertNodeToRow = function(organization, node, rowIndex, minWidth) {\n              var minCompoundSize = minWidth;\n              if (rowIndex == organization.rows.length) {\n                var secondDimension = [];\n                organization.rows.push(secondDimension);\n                organization.rowWidth.push(minCompoundSize);\n                organization.rowHeight.push(0);\n              }\n              var w = organization.rowWidth[rowIndex] + node.rect.width;\n              if (organization.rows[rowIndex].length > 0) {\n                w += organization.horizontalPadding;\n              }\n              organization.rowWidth[rowIndex] = w;\n              if (organization.width < w) {\n                organization.width = w;\n              }\n              var h = node.rect.height;\n              if (rowIndex > 0) h += organization.verticalPadding;\n              var extraHeight = 0;\n              if (h > organization.rowHeight[rowIndex]) {\n                extraHeight = organization.rowHeight[rowIndex];\n                organization.rowHeight[rowIndex] = h;\n                extraHeight = organization.rowHeight[rowIndex] - extraHeight;\n              }\n              organization.height += extraHeight;\n              organization.rows[rowIndex].push(node);\n            };\n            CoSELayout.prototype.getShortestRowIndex = function(organization) {\n              var r = -1;\n              var min = Number.MAX_VALUE;\n              for (var i = 0; i < organization.rows.length; i++) {\n                if (organization.rowWidth[i] < min) {\n                  r = i;\n                  min = organization.rowWidth[i];\n                }\n              }\n              return r;\n            };\n            CoSELayout.prototype.getLongestRowIndex = function(organization) {\n              var r = -1;\n              var max = Number.MIN_VALUE;\n              for (var i = 0; i < organization.rows.length; i++) {\n                if (organization.rowWidth[i] > max) {\n                  r = i;\n                  max = organization.rowWidth[i];\n                }\n              }\n              return r;\n            };\n            CoSELayout.prototype.canAddHorizontal = function(organization, extraWidth, extraHeight) {\n              var sri = this.getShortestRowIndex(organization);\n              if (sri < 0) {\n                return true;\n              }\n              var min = organization.rowWidth[sri];\n              if (min + organization.horizontalPadding + extraWidth <= organization.width) return true;\n              var hDiff = 0;\n              if (organization.rowHeight[sri] < extraHeight) {\n                if (sri > 0) hDiff = extraHeight + organization.verticalPadding - organization.rowHeight[sri];\n              }\n              var add_to_row_ratio;\n              if (organization.width - min >= extraWidth + organization.horizontalPadding) {\n                add_to_row_ratio = (organization.height + hDiff) / (min + extraWidth + organization.horizontalPadding);\n              } else {\n                add_to_row_ratio = (organization.height + hDiff) / organization.width;\n              }\n              hDiff = extraHeight + organization.verticalPadding;\n              var add_new_row_ratio;\n              if (organization.width < extraWidth) {\n                add_new_row_ratio = (organization.height + hDiff) / extraWidth;\n              } else {\n                add_new_row_ratio = (organization.height + hDiff) / organization.width;\n              }\n              if (add_new_row_ratio < 1) add_new_row_ratio = 1 / add_new_row_ratio;\n              if (add_to_row_ratio < 1) add_to_row_ratio = 1 / add_to_row_ratio;\n              return add_to_row_ratio < add_new_row_ratio;\n            };\n            CoSELayout.prototype.shiftToLastRow = function(organization) {\n              var longest = this.getLongestRowIndex(organization);\n              var last = organization.rowWidth.length - 1;\n              var row = organization.rows[longest];\n              var node = row[row.length - 1];\n              var diff = node.width + organization.horizontalPadding;\n              if (organization.width - organization.rowWidth[last] > diff && longest != last) {\n                row.splice(-1, 1);\n                organization.rows[last].push(node);\n                organization.rowWidth[longest] = organization.rowWidth[longest] - diff;\n                organization.rowWidth[last] = organization.rowWidth[last] + diff;\n                organization.width = organization.rowWidth[instance.getLongestRowIndex(organization)];\n                var maxHeight = Number.MIN_VALUE;\n                for (var i = 0; i < row.length; i++) {\n                  if (row[i].height > maxHeight) maxHeight = row[i].height;\n                }\n                if (longest > 0) maxHeight += organization.verticalPadding;\n                var prevTotal = organization.rowHeight[longest] + organization.rowHeight[last];\n                organization.rowHeight[longest] = maxHeight;\n                if (organization.rowHeight[last] < node.height + organization.verticalPadding) organization.rowHeight[last] = node.height + organization.verticalPadding;\n                var finalTotal = organization.rowHeight[longest] + organization.rowHeight[last];\n                organization.height += finalTotal - prevTotal;\n                this.shiftToLastRow(organization);\n              }\n            };\n            CoSELayout.prototype.tilingPreLayout = function() {\n              if (CoSEConstants.TILE) {\n                this.groupZeroDegreeMembers();\n                this.clearCompounds();\n                this.clearZeroDegreeMembers();\n              }\n            };\n            CoSELayout.prototype.tilingPostLayout = function() {\n              if (CoSEConstants.TILE) {\n                this.repopulateZeroDegreeMembers();\n                this.repopulateCompounds();\n              }\n            };\n            CoSELayout.prototype.reduceTrees = function() {\n              var prunedNodesAll = [];\n              var containsLeaf = true;\n              var node;\n              while (containsLeaf) {\n                var allNodes = this.graphManager.getAllNodes();\n                var prunedNodesInStepTemp = [];\n                containsLeaf = false;\n                for (var i = 0; i < allNodes.length; i++) {\n                  node = allNodes[i];\n                  if (node.getEdges().length == 1 && !node.getEdges()[0].isInterGraph && node.getChild() == null) {\n                    prunedNodesInStepTemp.push([node, node.getEdges()[0], node.getOwner()]);\n                    containsLeaf = true;\n                  }\n                }\n                if (containsLeaf == true) {\n                  var prunedNodesInStep = [];\n                  for (var j = 0; j < prunedNodesInStepTemp.length; j++) {\n                    if (prunedNodesInStepTemp[j][0].getEdges().length == 1) {\n                      prunedNodesInStep.push(prunedNodesInStepTemp[j]);\n                      prunedNodesInStepTemp[j][0].getOwner().remove(prunedNodesInStepTemp[j][0]);\n                    }\n                  }\n                  prunedNodesAll.push(prunedNodesInStep);\n                  this.graphManager.resetAllNodes();\n                  this.graphManager.resetAllEdges();\n                }\n              }\n              this.prunedNodesAll = prunedNodesAll;\n            };\n            CoSELayout.prototype.growTree = function(prunedNodesAll) {\n              var lengthOfPrunedNodesInStep = prunedNodesAll.length;\n              var prunedNodesInStep = prunedNodesAll[lengthOfPrunedNodesInStep - 1];\n              var nodeData;\n              for (var i = 0; i < prunedNodesInStep.length; i++) {\n                nodeData = prunedNodesInStep[i];\n                this.findPlaceforPrunedNode(nodeData);\n                nodeData[2].add(nodeData[0]);\n                nodeData[2].add(nodeData[1], nodeData[1].source, nodeData[1].target);\n              }\n              prunedNodesAll.splice(prunedNodesAll.length - 1, 1);\n              this.graphManager.resetAllNodes();\n              this.graphManager.resetAllEdges();\n            };\n            CoSELayout.prototype.findPlaceforPrunedNode = function(nodeData) {\n              var gridForPrunedNode;\n              var nodeToConnect;\n              var prunedNode = nodeData[0];\n              if (prunedNode == nodeData[1].source) {\n                nodeToConnect = nodeData[1].target;\n              } else {\n                nodeToConnect = nodeData[1].source;\n              }\n              var startGridX = nodeToConnect.startX;\n              var finishGridX = nodeToConnect.finishX;\n              var startGridY = nodeToConnect.startY;\n              var finishGridY = nodeToConnect.finishY;\n              var upNodeCount = 0;\n              var downNodeCount = 0;\n              var rightNodeCount = 0;\n              var leftNodeCount = 0;\n              var controlRegions = [upNodeCount, rightNodeCount, downNodeCount, leftNodeCount];\n              if (startGridY > 0) {\n                for (var i = startGridX; i <= finishGridX; i++) {\n                  controlRegions[0] += this.grid[i][startGridY - 1].length + this.grid[i][startGridY].length - 1;\n                }\n              }\n              if (finishGridX < this.grid.length - 1) {\n                for (var i = startGridY; i <= finishGridY; i++) {\n                  controlRegions[1] += this.grid[finishGridX + 1][i].length + this.grid[finishGridX][i].length - 1;\n                }\n              }\n              if (finishGridY < this.grid[0].length - 1) {\n                for (var i = startGridX; i <= finishGridX; i++) {\n                  controlRegions[2] += this.grid[i][finishGridY + 1].length + this.grid[i][finishGridY].length - 1;\n                }\n              }\n              if (startGridX > 0) {\n                for (var i = startGridY; i <= finishGridY; i++) {\n                  controlRegions[3] += this.grid[startGridX - 1][i].length + this.grid[startGridX][i].length - 1;\n                }\n              }\n              var min = Integer.MAX_VALUE;\n              var minCount;\n              var minIndex;\n              for (var j = 0; j < controlRegions.length; j++) {\n                if (controlRegions[j] < min) {\n                  min = controlRegions[j];\n                  minCount = 1;\n                  minIndex = j;\n                } else if (controlRegions[j] == min) {\n                  minCount++;\n                }\n              }\n              if (minCount == 3 && min == 0) {\n                if (controlRegions[0] == 0 && controlRegions[1] == 0 && controlRegions[2] == 0) {\n                  gridForPrunedNode = 1;\n                } else if (controlRegions[0] == 0 && controlRegions[1] == 0 && controlRegions[3] == 0) {\n                  gridForPrunedNode = 0;\n                } else if (controlRegions[0] == 0 && controlRegions[2] == 0 && controlRegions[3] == 0) {\n                  gridForPrunedNode = 3;\n                } else if (controlRegions[1] == 0 && controlRegions[2] == 0 && controlRegions[3] == 0) {\n                  gridForPrunedNode = 2;\n                }\n              } else if (minCount == 2 && min == 0) {\n                var random = Math.floor(Math.random() * 2);\n                if (controlRegions[0] == 0 && controlRegions[1] == 0) {\n                  ;\n                  if (random == 0) {\n                    gridForPrunedNode = 0;\n                  } else {\n                    gridForPrunedNode = 1;\n                  }\n                } else if (controlRegions[0] == 0 && controlRegions[2] == 0) {\n                  if (random == 0) {\n                    gridForPrunedNode = 0;\n                  } else {\n                    gridForPrunedNode = 2;\n                  }\n                } else if (controlRegions[0] == 0 && controlRegions[3] == 0) {\n                  if (random == 0) {\n                    gridForPrunedNode = 0;\n                  } else {\n                    gridForPrunedNode = 3;\n                  }\n                } else if (controlRegions[1] == 0 && controlRegions[2] == 0) {\n                  if (random == 0) {\n                    gridForPrunedNode = 1;\n                  } else {\n                    gridForPrunedNode = 2;\n                  }\n                } else if (controlRegions[1] == 0 && controlRegions[3] == 0) {\n                  if (random == 0) {\n                    gridForPrunedNode = 1;\n                  } else {\n                    gridForPrunedNode = 3;\n                  }\n                } else {\n                  if (random == 0) {\n                    gridForPrunedNode = 2;\n                  } else {\n                    gridForPrunedNode = 3;\n                  }\n                }\n              } else if (minCount == 4 && min == 0) {\n                var random = Math.floor(Math.random() * 4);\n                gridForPrunedNode = random;\n              } else {\n                gridForPrunedNode = minIndex;\n              }\n              if (gridForPrunedNode == 0) {\n                prunedNode.setCenter(nodeToConnect.getCenterX(), nodeToConnect.getCenterY() - nodeToConnect.getHeight() / 2 - FDLayoutConstants.DEFAULT_EDGE_LENGTH - prunedNode.getHeight() / 2);\n              } else if (gridForPrunedNode == 1) {\n                prunedNode.setCenter(nodeToConnect.getCenterX() + nodeToConnect.getWidth() / 2 + FDLayoutConstants.DEFAULT_EDGE_LENGTH + prunedNode.getWidth() / 2, nodeToConnect.getCenterY());\n              } else if (gridForPrunedNode == 2) {\n                prunedNode.setCenter(nodeToConnect.getCenterX(), nodeToConnect.getCenterY() + nodeToConnect.getHeight() / 2 + FDLayoutConstants.DEFAULT_EDGE_LENGTH + prunedNode.getHeight() / 2);\n              } else {\n                prunedNode.setCenter(nodeToConnect.getCenterX() - nodeToConnect.getWidth() / 2 - FDLayoutConstants.DEFAULT_EDGE_LENGTH - prunedNode.getWidth() / 2, nodeToConnect.getCenterY());\n              }\n            };\n            module2.exports = CoSELayout;\n          },\n          /* 7 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            var coseBase = {};\n            coseBase.layoutBase = __webpack_require__(0);\n            coseBase.CoSEConstants = __webpack_require__(1);\n            coseBase.CoSEEdge = __webpack_require__(2);\n            coseBase.CoSEGraph = __webpack_require__(3);\n            coseBase.CoSEGraphManager = __webpack_require__(4);\n            coseBase.CoSELayout = __webpack_require__(6);\n            coseBase.CoSENode = __webpack_require__(5);\n            module2.exports = coseBase;\n          }\n          /******/\n        ])\n      );\n    });\n  }\n});\n\n// ../../node_modules/.pnpm/cytoscape-cose-bilkent@4.1.0_cytoscape@3.31.0/node_modules/cytoscape-cose-bilkent/cytoscape-cose-bilkent.js\nvar require_cytoscape_cose_bilkent = __commonJS({\n  \"../../node_modules/.pnpm/cytoscape-cose-bilkent@4.1.0_cytoscape@3.31.0/node_modules/cytoscape-cose-bilkent/cytoscape-cose-bilkent.js\"(exports, module) {\n    \"use strict\";\n    (/* @__PURE__ */ __name(function webpackUniversalModuleDefinition(root, factory) {\n      if (typeof exports === \"object\" && typeof module === \"object\")\n        module.exports = factory(require_cose_base());\n      else if (typeof define === \"function\" && define.amd)\n        define([\"cose-base\"], factory);\n      else if (typeof exports === \"object\")\n        exports[\"cytoscapeCoseBilkent\"] = factory(require_cose_base());\n      else\n        root[\"cytoscapeCoseBilkent\"] = factory(root[\"coseBase\"]);\n    }, \"webpackUniversalModuleDefinition\"))(exports, function(__WEBPACK_EXTERNAL_MODULE_0__) {\n      return (\n        /******/\n        function(modules) {\n          var installedModules = {};\n          function __webpack_require__(moduleId) {\n            if (installedModules[moduleId]) {\n              return installedModules[moduleId].exports;\n            }\n            var module2 = installedModules[moduleId] = {\n              /******/\n              i: moduleId,\n              /******/\n              l: false,\n              /******/\n              exports: {}\n              /******/\n            };\n            modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);\n            module2.l = true;\n            return module2.exports;\n          }\n          __name(__webpack_require__, \"__webpack_require__\");\n          __webpack_require__.m = modules;\n          __webpack_require__.c = installedModules;\n          __webpack_require__.i = function(value) {\n            return value;\n          };\n          __webpack_require__.d = function(exports2, name, getter) {\n            if (!__webpack_require__.o(exports2, name)) {\n              Object.defineProperty(exports2, name, {\n                /******/\n                configurable: false,\n                /******/\n                enumerable: true,\n                /******/\n                get: getter\n                /******/\n              });\n            }\n          };\n          __webpack_require__.n = function(module2) {\n            var getter = module2 && module2.__esModule ? (\n              /******/\n              /* @__PURE__ */ __name(function getDefault() {\n                return module2[\"default\"];\n              }, \"getDefault\")\n            ) : (\n              /******/\n              /* @__PURE__ */ __name(function getModuleExports() {\n                return module2;\n              }, \"getModuleExports\")\n            );\n            __webpack_require__.d(getter, \"a\", getter);\n            return getter;\n          };\n          __webpack_require__.o = function(object, property) {\n            return Object.prototype.hasOwnProperty.call(object, property);\n          };\n          __webpack_require__.p = \"\";\n          return __webpack_require__(__webpack_require__.s = 1);\n        }([\n          /* 0 */\n          /***/\n          function(module2, exports2) {\n            module2.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n          },\n          /* 1 */\n          /***/\n          function(module2, exports2, __webpack_require__) {\n            \"use strict\";\n            var LayoutConstants = __webpack_require__(0).layoutBase.LayoutConstants;\n            var FDLayoutConstants = __webpack_require__(0).layoutBase.FDLayoutConstants;\n            var CoSEConstants = __webpack_require__(0).CoSEConstants;\n            var CoSELayout = __webpack_require__(0).CoSELayout;\n            var CoSENode = __webpack_require__(0).CoSENode;\n            var PointD = __webpack_require__(0).layoutBase.PointD;\n            var DimensionD2 = __webpack_require__(0).layoutBase.DimensionD;\n            var defaults = {\n              // Called on `layoutready`\n              ready: /* @__PURE__ */ __name(function ready() {\n              }, \"ready\"),\n              // Called on `layoutstop`\n              stop: /* @__PURE__ */ __name(function stop() {\n              }, \"stop\"),\n              // 'draft', 'default' or 'proof\" \n              // - 'draft' fast cooling rate \n              // - 'default' moderate cooling rate \n              // - \"proof\" slow cooling rate\n              quality: \"default\",\n              // include labels in node dimensions\n              nodeDimensionsIncludeLabels: false,\n              // number of ticks per frame; higher is faster but more jerky\n              refresh: 30,\n              // Whether to fit the network view after when done\n              fit: true,\n              // Padding on fit\n              padding: 10,\n              // Whether to enable incremental mode\n              randomize: true,\n              // Node repulsion (non overlapping) multiplier\n              nodeRepulsion: 4500,\n              // Ideal edge (non nested) length\n              idealEdgeLength: 50,\n              // Divisor to compute edge forces\n              edgeElasticity: 0.45,\n              // Nesting factor (multiplier) to compute ideal edge length for nested edges\n              nestingFactor: 0.1,\n              // Gravity force (constant)\n              gravity: 0.25,\n              // Maximum number of iterations to perform\n              numIter: 2500,\n              // For enabling tiling\n              tile: true,\n              // Type of layout animation. The option set is {'during', 'end', false}\n              animate: \"end\",\n              // Duration for animate:end\n              animationDuration: 500,\n              // Represents the amount of the vertical space to put between the zero degree members during the tiling operation(can also be a function)\n              tilingPaddingVertical: 10,\n              // Represents the amount of the horizontal space to put between the zero degree members during the tiling operation(can also be a function)\n              tilingPaddingHorizontal: 10,\n              // Gravity range (constant) for compounds\n              gravityRangeCompound: 1.5,\n              // Gravity force (constant) for compounds\n              gravityCompound: 1,\n              // Gravity range (constant)\n              gravityRange: 3.8,\n              // Initial cooling factor for incremental layout\n              initialEnergyOnIncremental: 0.5\n            };\n            function extend(defaults2, options) {\n              var obj = {};\n              for (var i in defaults2) {\n                obj[i] = defaults2[i];\n              }\n              for (var i in options) {\n                obj[i] = options[i];\n              }\n              return obj;\n            }\n            __name(extend, \"extend\");\n            ;\n            function _CoSELayout(_options) {\n              this.options = extend(defaults, _options);\n              getUserOptions(this.options);\n            }\n            __name(_CoSELayout, \"_CoSELayout\");\n            var getUserOptions = /* @__PURE__ */ __name(function getUserOptions2(options) {\n              if (options.nodeRepulsion != null) CoSEConstants.DEFAULT_REPULSION_STRENGTH = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH = options.nodeRepulsion;\n              if (options.idealEdgeLength != null) CoSEConstants.DEFAULT_EDGE_LENGTH = FDLayoutConstants.DEFAULT_EDGE_LENGTH = options.idealEdgeLength;\n              if (options.edgeElasticity != null) CoSEConstants.DEFAULT_SPRING_STRENGTH = FDLayoutConstants.DEFAULT_SPRING_STRENGTH = options.edgeElasticity;\n              if (options.nestingFactor != null) CoSEConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = options.nestingFactor;\n              if (options.gravity != null) CoSEConstants.DEFAULT_GRAVITY_STRENGTH = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH = options.gravity;\n              if (options.numIter != null) CoSEConstants.MAX_ITERATIONS = FDLayoutConstants.MAX_ITERATIONS = options.numIter;\n              if (options.gravityRange != null) CoSEConstants.DEFAULT_GRAVITY_RANGE_FACTOR = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR = options.gravityRange;\n              if (options.gravityCompound != null) CoSEConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = options.gravityCompound;\n              if (options.gravityRangeCompound != null) CoSEConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = options.gravityRangeCompound;\n              if (options.initialEnergyOnIncremental != null) CoSEConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = options.initialEnergyOnIncremental;\n              if (options.quality == \"draft\") LayoutConstants.QUALITY = 0;\n              else if (options.quality == \"proof\") LayoutConstants.QUALITY = 2;\n              else LayoutConstants.QUALITY = 1;\n              CoSEConstants.NODE_DIMENSIONS_INCLUDE_LABELS = FDLayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = options.nodeDimensionsIncludeLabels;\n              CoSEConstants.DEFAULT_INCREMENTAL = FDLayoutConstants.DEFAULT_INCREMENTAL = LayoutConstants.DEFAULT_INCREMENTAL = !options.randomize;\n              CoSEConstants.ANIMATE = FDLayoutConstants.ANIMATE = LayoutConstants.ANIMATE = options.animate;\n              CoSEConstants.TILE = options.tile;\n              CoSEConstants.TILING_PADDING_VERTICAL = typeof options.tilingPaddingVertical === \"function\" ? options.tilingPaddingVertical.call() : options.tilingPaddingVertical;\n              CoSEConstants.TILING_PADDING_HORIZONTAL = typeof options.tilingPaddingHorizontal === \"function\" ? options.tilingPaddingHorizontal.call() : options.tilingPaddingHorizontal;\n            }, \"getUserOptions\");\n            _CoSELayout.prototype.run = function() {\n              var ready;\n              var frameId;\n              var options = this.options;\n              var idToLNode = this.idToLNode = {};\n              var layout = this.layout = new CoSELayout();\n              var self = this;\n              self.stopped = false;\n              this.cy = this.options.cy;\n              this.cy.trigger({ type: \"layoutstart\", layout: this });\n              var gm = layout.newGraphManager();\n              this.gm = gm;\n              var nodes2 = this.options.eles.nodes();\n              var edges = this.options.eles.edges();\n              this.root = gm.addRoot();\n              this.processChildrenList(this.root, this.getTopMostNodes(nodes2), layout);\n              for (var i = 0; i < edges.length; i++) {\n                var edge = edges[i];\n                var sourceNode = this.idToLNode[edge.data(\"source\")];\n                var targetNode = this.idToLNode[edge.data(\"target\")];\n                if (sourceNode !== targetNode && sourceNode.getEdgesBetween(targetNode).length == 0) {\n                  var e1 = gm.add(layout.newEdge(), sourceNode, targetNode);\n                  e1.id = edge.id();\n                }\n              }\n              var getPositions = /* @__PURE__ */ __name(function getPositions2(ele, i2) {\n                if (typeof ele === \"number\") {\n                  ele = i2;\n                }\n                var theId = ele.data(\"id\");\n                var lNode = self.idToLNode[theId];\n                return {\n                  x: lNode.getRect().getCenterX(),\n                  y: lNode.getRect().getCenterY()\n                };\n              }, \"getPositions\");\n              var iterateAnimated = /* @__PURE__ */ __name(function iterateAnimated2() {\n                var afterReposition = /* @__PURE__ */ __name(function afterReposition2() {\n                  if (options.fit) {\n                    options.cy.fit(options.eles, options.padding);\n                  }\n                  if (!ready) {\n                    ready = true;\n                    self.cy.one(\"layoutready\", options.ready);\n                    self.cy.trigger({ type: \"layoutready\", layout: self });\n                  }\n                }, \"afterReposition\");\n                var ticksPerFrame = self.options.refresh;\n                var isDone;\n                for (var i2 = 0; i2 < ticksPerFrame && !isDone; i2++) {\n                  isDone = self.stopped || self.layout.tick();\n                }\n                if (isDone) {\n                  if (layout.checkLayoutSuccess() && !layout.isSubLayout) {\n                    layout.doPostLayout();\n                  }\n                  if (layout.tilingPostLayout) {\n                    layout.tilingPostLayout();\n                  }\n                  layout.isLayoutFinished = true;\n                  self.options.eles.nodes().positions(getPositions);\n                  afterReposition();\n                  self.cy.one(\"layoutstop\", self.options.stop);\n                  self.cy.trigger({ type: \"layoutstop\", layout: self });\n                  if (frameId) {\n                    cancelAnimationFrame(frameId);\n                  }\n                  ready = false;\n                  return;\n                }\n                var animationData = self.layout.getPositionsData();\n                options.eles.nodes().positions(function(ele, i3) {\n                  if (typeof ele === \"number\") {\n                    ele = i3;\n                  }\n                  if (!ele.isParent()) {\n                    var theId = ele.id();\n                    var pNode = animationData[theId];\n                    var temp = ele;\n                    while (pNode == null) {\n                      pNode = animationData[temp.data(\"parent\")] || animationData[\"DummyCompound_\" + temp.data(\"parent\")];\n                      animationData[theId] = pNode;\n                      temp = temp.parent()[0];\n                      if (temp == void 0) {\n                        break;\n                      }\n                    }\n                    if (pNode != null) {\n                      return {\n                        x: pNode.x,\n                        y: pNode.y\n                      };\n                    } else {\n                      return {\n                        x: ele.position(\"x\"),\n                        y: ele.position(\"y\")\n                      };\n                    }\n                  }\n                });\n                afterReposition();\n                frameId = requestAnimationFrame(iterateAnimated2);\n              }, \"iterateAnimated\");\n              layout.addListener(\"layoutstarted\", function() {\n                if (self.options.animate === \"during\") {\n                  frameId = requestAnimationFrame(iterateAnimated);\n                }\n              });\n              layout.runLayout();\n              if (this.options.animate !== \"during\") {\n                self.options.eles.nodes().not(\":parent\").layoutPositions(self, self.options, getPositions);\n                ready = false;\n              }\n              return this;\n            };\n            _CoSELayout.prototype.getTopMostNodes = function(nodes2) {\n              var nodesMap = {};\n              for (var i = 0; i < nodes2.length; i++) {\n                nodesMap[nodes2[i].id()] = true;\n              }\n              var roots = nodes2.filter(function(ele, i2) {\n                if (typeof ele === \"number\") {\n                  ele = i2;\n                }\n                var parent = ele.parent()[0];\n                while (parent != null) {\n                  if (nodesMap[parent.id()]) {\n                    return false;\n                  }\n                  parent = parent.parent()[0];\n                }\n                return true;\n              });\n              return roots;\n            };\n            _CoSELayout.prototype.processChildrenList = function(parent, children, layout) {\n              var size = children.length;\n              for (var i = 0; i < size; i++) {\n                var theChild = children[i];\n                var children_of_children = theChild.children();\n                var theNode;\n                var dimensions = theChild.layoutDimensions({\n                  nodeDimensionsIncludeLabels: this.options.nodeDimensionsIncludeLabels\n                });\n                if (theChild.outerWidth() != null && theChild.outerHeight() != null) {\n                  theNode = parent.add(new CoSENode(layout.graphManager, new PointD(theChild.position(\"x\") - dimensions.w / 2, theChild.position(\"y\") - dimensions.h / 2), new DimensionD2(parseFloat(dimensions.w), parseFloat(dimensions.h))));\n                } else {\n                  theNode = parent.add(new CoSENode(this.graphManager));\n                }\n                theNode.id = theChild.data(\"id\");\n                theNode.paddingLeft = parseInt(theChild.css(\"padding\"));\n                theNode.paddingTop = parseInt(theChild.css(\"padding\"));\n                theNode.paddingRight = parseInt(theChild.css(\"padding\"));\n                theNode.paddingBottom = parseInt(theChild.css(\"padding\"));\n                if (this.options.nodeDimensionsIncludeLabels) {\n                  if (theChild.isParent()) {\n                    var labelWidth = theChild.boundingBox({ includeLabels: true, includeNodes: false }).w;\n                    var labelHeight = theChild.boundingBox({ includeLabels: true, includeNodes: false }).h;\n                    var labelPos = theChild.css(\"text-halign\");\n                    theNode.labelWidth = labelWidth;\n                    theNode.labelHeight = labelHeight;\n                    theNode.labelPos = labelPos;\n                  }\n                }\n                this.idToLNode[theChild.data(\"id\")] = theNode;\n                if (isNaN(theNode.rect.x)) {\n                  theNode.rect.x = 0;\n                }\n                if (isNaN(theNode.rect.y)) {\n                  theNode.rect.y = 0;\n                }\n                if (children_of_children != null && children_of_children.length > 0) {\n                  var theNewGraph;\n                  theNewGraph = layout.getGraphManager().add(layout.newGraph(), theNode);\n                  this.processChildrenList(theNewGraph, children_of_children, layout);\n                }\n              }\n            };\n            _CoSELayout.prototype.stop = function() {\n              this.stopped = true;\n              return this;\n            };\n            var register = /* @__PURE__ */ __name(function register2(cytoscape3) {\n              cytoscape3(\"layout\", \"cose-bilkent\", _CoSELayout);\n            }, \"register\");\n            if (typeof cytoscape !== \"undefined\") {\n              register(cytoscape);\n            }\n            module2.exports = register;\n          }\n          /******/\n        ])\n      );\n    });\n  }\n});\n\n// src/diagrams/mindmap/parser/mindmap.jison\nvar parser = function() {\n  var o = /* @__PURE__ */ __name(function(k, v, o2, l) {\n    for (o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v) ;\n    return o2;\n  }, \"o\"), $V0 = [1, 4], $V1 = [1, 13], $V2 = [1, 12], $V3 = [1, 15], $V4 = [1, 16], $V5 = [1, 20], $V6 = [1, 19], $V7 = [6, 7, 8], $V8 = [1, 26], $V9 = [1, 24], $Va = [1, 25], $Vb = [6, 7, 11], $Vc = [1, 6, 13, 15, 16, 19, 22], $Vd = [1, 33], $Ve = [1, 34], $Vf = [1, 6, 7, 11, 13, 15, 16, 19, 22];\n  var parser2 = {\n    trace: /* @__PURE__ */ __name(function trace() {\n    }, \"trace\"),\n    yy: {},\n    symbols_: { \"error\": 2, \"start\": 3, \"mindMap\": 4, \"spaceLines\": 5, \"SPACELINE\": 6, \"NL\": 7, \"MINDMAP\": 8, \"document\": 9, \"stop\": 10, \"EOF\": 11, \"statement\": 12, \"SPACELIST\": 13, \"node\": 14, \"ICON\": 15, \"CLASS\": 16, \"nodeWithId\": 17, \"nodeWithoutId\": 18, \"NODE_DSTART\": 19, \"NODE_DESCR\": 20, \"NODE_DEND\": 21, \"NODE_ID\": 22, \"$accept\": 0, \"$end\": 1 },\n    terminals_: { 2: \"error\", 6: \"SPACELINE\", 7: \"NL\", 8: \"MINDMAP\", 11: \"EOF\", 13: \"SPACELIST\", 15: \"ICON\", 16: \"CLASS\", 19: \"NODE_DSTART\", 20: \"NODE_DESCR\", 21: \"NODE_DEND\", 22: \"NODE_ID\" },\n    productions_: [0, [3, 1], [3, 2], [5, 1], [5, 2], [5, 2], [4, 2], [4, 3], [10, 1], [10, 1], [10, 1], [10, 2], [10, 2], [9, 3], [9, 2], [12, 2], [12, 2], [12, 2], [12, 1], [12, 1], [12, 1], [12, 1], [12, 1], [14, 1], [14, 1], [18, 3], [17, 1], [17, 4]],\n    performAction: /* @__PURE__ */ __name(function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {\n      var $0 = $$.length - 1;\n      switch (yystate) {\n        case 6:\n        case 7:\n          return yy;\n          break;\n        case 8:\n          yy.getLogger().trace(\"Stop NL \");\n          break;\n        case 9:\n          yy.getLogger().trace(\"Stop EOF \");\n          break;\n        case 11:\n          yy.getLogger().trace(\"Stop NL2 \");\n          break;\n        case 12:\n          yy.getLogger().trace(\"Stop EOF2 \");\n          break;\n        case 15:\n          yy.getLogger().info(\"Node: \", $$[$0].id);\n          yy.addNode($$[$0 - 1].length, $$[$0].id, $$[$0].descr, $$[$0].type);\n          break;\n        case 16:\n          yy.getLogger().trace(\"Icon: \", $$[$0]);\n          yy.decorateNode({ icon: $$[$0] });\n          break;\n        case 17:\n        case 21:\n          yy.decorateNode({ class: $$[$0] });\n          break;\n        case 18:\n          yy.getLogger().trace(\"SPACELIST\");\n          break;\n        case 19:\n          yy.getLogger().trace(\"Node: \", $$[$0].id);\n          yy.addNode(0, $$[$0].id, $$[$0].descr, $$[$0].type);\n          break;\n        case 20:\n          yy.decorateNode({ icon: $$[$0] });\n          break;\n        case 25:\n          yy.getLogger().trace(\"node found ..\", $$[$0 - 2]);\n          this.$ = { id: $$[$0 - 1], descr: $$[$0 - 1], type: yy.getType($$[$0 - 2], $$[$0]) };\n          break;\n        case 26:\n          this.$ = { id: $$[$0], descr: $$[$0], type: yy.nodeType.DEFAULT };\n          break;\n        case 27:\n          yy.getLogger().trace(\"node found ..\", $$[$0 - 3]);\n          this.$ = { id: $$[$0 - 3], descr: $$[$0 - 1], type: yy.getType($$[$0 - 2], $$[$0]) };\n          break;\n      }\n    }, \"anonymous\"),\n    table: [{ 3: 1, 4: 2, 5: 3, 6: [1, 5], 8: $V0 }, { 1: [3] }, { 1: [2, 1] }, { 4: 6, 6: [1, 7], 7: [1, 8], 8: $V0 }, { 6: $V1, 7: [1, 10], 9: 9, 12: 11, 13: $V2, 14: 14, 15: $V3, 16: $V4, 17: 17, 18: 18, 19: $V5, 22: $V6 }, o($V7, [2, 3]), { 1: [2, 2] }, o($V7, [2, 4]), o($V7, [2, 5]), { 1: [2, 6], 6: $V1, 12: 21, 13: $V2, 14: 14, 15: $V3, 16: $V4, 17: 17, 18: 18, 19: $V5, 22: $V6 }, { 6: $V1, 9: 22, 12: 11, 13: $V2, 14: 14, 15: $V3, 16: $V4, 17: 17, 18: 18, 19: $V5, 22: $V6 }, { 6: $V8, 7: $V9, 10: 23, 11: $Va }, o($Vb, [2, 22], { 17: 17, 18: 18, 14: 27, 15: [1, 28], 16: [1, 29], 19: $V5, 22: $V6 }), o($Vb, [2, 18]), o($Vb, [2, 19]), o($Vb, [2, 20]), o($Vb, [2, 21]), o($Vb, [2, 23]), o($Vb, [2, 24]), o($Vb, [2, 26], { 19: [1, 30] }), { 20: [1, 31] }, { 6: $V8, 7: $V9, 10: 32, 11: $Va }, { 1: [2, 7], 6: $V1, 12: 21, 13: $V2, 14: 14, 15: $V3, 16: $V4, 17: 17, 18: 18, 19: $V5, 22: $V6 }, o($Vc, [2, 14], { 7: $Vd, 11: $Ve }), o($Vf, [2, 8]), o($Vf, [2, 9]), o($Vf, [2, 10]), o($Vb, [2, 15]), o($Vb, [2, 16]), o($Vb, [2, 17]), { 20: [1, 35] }, { 21: [1, 36] }, o($Vc, [2, 13], { 7: $Vd, 11: $Ve }), o($Vf, [2, 11]), o($Vf, [2, 12]), { 21: [1, 37] }, o($Vb, [2, 25]), o($Vb, [2, 27])],\n    defaultActions: { 2: [2, 1], 6: [2, 2] },\n    parseError: /* @__PURE__ */ __name(function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n      }\n    }, \"parseError\"),\n    parse: /* @__PURE__ */ __name(function parse(input) {\n      var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = \"\", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      var lexer2 = Object.create(this.lexer);\n      var sharedState = { yy: {} };\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k];\n        }\n      }\n      lexer2.setInput(input, sharedState.yy);\n      sharedState.yy.lexer = lexer2;\n      sharedState.yy.parser = this;\n      if (typeof lexer2.yylloc == \"undefined\") {\n        lexer2.yylloc = {};\n      }\n      var yyloc = lexer2.yylloc;\n      lstack.push(yyloc);\n      var ranges = lexer2.options && lexer2.options.ranges;\n      if (typeof sharedState.yy.parseError === \"function\") {\n        this.parseError = sharedState.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n      function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n      }\n      __name(popStack, \"popStack\");\n      function lex() {\n        var token;\n        token = tstack.pop() || lexer2.lex() || EOF;\n        if (typeof token !== \"number\") {\n          if (token instanceof Array) {\n            tstack = token;\n            token = tstack.pop();\n          }\n          token = self.symbols_[token] || token;\n        }\n        return token;\n      }\n      __name(lex, \"lex\");\n      var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n      while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol === null || typeof symbol == \"undefined\") {\n            symbol = lex();\n          }\n          action = table[state] && table[state][symbol];\n        }\n        if (typeof action === \"undefined\" || !action.length || !action[0]) {\n          var errStr = \"\";\n          expected = [];\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push(\"'\" + this.terminals_[p] + \"'\");\n            }\n          }\n          if (lexer2.showPosition) {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + lexer2.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n          } else {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == EOF ? \"end of input\" : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n          }\n          this.parseError(errStr, {\n            text: lexer2.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer2.yylineno,\n            loc: yyloc,\n            expected\n          });\n        }\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n        }\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(lexer2.yytext);\n            lstack.push(lexer2.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n              yyleng = lexer2.yyleng;\n              yytext = lexer2.yytext;\n              yylineno = lexer2.yylineno;\n              yyloc = lexer2.yylloc;\n              if (recovering > 0) {\n                recovering--;\n              }\n            } else {\n              symbol = preErrorSymbol;\n              preErrorSymbol = null;\n            }\n            break;\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n              yyval._$.range = [\n                lstack[lstack.length - (len || 1)].range[0],\n                lstack[lstack.length - 1].range[1]\n              ];\n            }\n            r = this.performAction.apply(yyval, [\n              yytext,\n              yyleng,\n              yylineno,\n              sharedState.yy,\n              action[1],\n              vstack,\n              lstack\n            ].concat(args));\n            if (typeof r !== \"undefined\") {\n              return r;\n            }\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n          case 3:\n            return true;\n        }\n      }\n      return true;\n    }, \"parse\")\n  };\n  var lexer = /* @__PURE__ */ function() {\n    var lexer2 = {\n      EOF: 1,\n      parseError: /* @__PURE__ */ __name(function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      }, \"parseError\"),\n      // resets the lexer, sets new input\n      setInput: /* @__PURE__ */ __name(function(input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = \"\";\n        this.conditionStack = [\"INITIAL\"];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n        this.offset = 0;\n        return this;\n      }, \"setInput\"),\n      // consumes and returns one char from the input\n      input: /* @__PURE__ */ __name(function() {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n        this._input = this._input.slice(1);\n        return ch;\n      }, \"input\"),\n      // unshifts one char (or a string) into the input\n      unput: /* @__PURE__ */ __name(function(ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n      }, \"unput\"),\n      // When called from action, caches matched text and appends it on next action\n      more: /* @__PURE__ */ __name(function() {\n        this._more = true;\n        return this;\n      }, \"more\"),\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: /* @__PURE__ */ __name(function() {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n        return this;\n      }, \"reject\"),\n      // retain first n characters of the match\n      less: /* @__PURE__ */ __name(function(n) {\n        this.unput(this.match.slice(n));\n      }, \"less\"),\n      // displays already matched input, i.e. for error messages\n      pastInput: /* @__PURE__ */ __name(function() {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? \"...\" : \"\") + past.substr(-20).replace(/\\n/g, \"\");\n      }, \"pastInput\"),\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: /* @__PURE__ */ __name(function() {\n        var next2 = this.match;\n        if (next2.length < 20) {\n          next2 += this._input.substr(0, 20 - next2.length);\n        }\n        return (next2.substr(0, 20) + (next2.length > 20 ? \"...\" : \"\")).replace(/\\n/g, \"\");\n      }, \"upcomingInput\"),\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: /* @__PURE__ */ __name(function() {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      }, \"showPosition\"),\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: /* @__PURE__ */ __name(function(match, indexed_rule) {\n        var token, lines, backup;\n        if (this.options.backtrack_lexer) {\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n          this.done = false;\n        }\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n          return false;\n        }\n        return false;\n      }, \"test_match\"),\n      // return next match in input\n      next: /* @__PURE__ */ __name(function() {\n        if (this.done) {\n          return this.EOF;\n        }\n        if (!this._input) {\n          this.done = true;\n        }\n        var token, match, tempMatch, index;\n        if (!this._more) {\n          this.yytext = \"\";\n          this.match = \"\";\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue;\n              } else {\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n        if (match) {\n          token = this.test_match(match, rules[index]);\n          if (token !== false) {\n            return token;\n          }\n          return false;\n        }\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". Unrecognized text.\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      }, \"next\"),\n      // return next match that has a token\n      lex: /* @__PURE__ */ __name(function lex() {\n        var r = this.next();\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      }, \"lex\"),\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: /* @__PURE__ */ __name(function begin(condition) {\n        this.conditionStack.push(condition);\n      }, \"begin\"),\n      // pop the previously active lexer condition state off the condition stack\n      popState: /* @__PURE__ */ __name(function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      }, \"popState\"),\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: /* @__PURE__ */ __name(function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions[\"INITIAL\"].rules;\n        }\n      }, \"_currentRules\"),\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: /* @__PURE__ */ __name(function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return \"INITIAL\";\n        }\n      }, \"topState\"),\n      // alias for begin(condition)\n      pushState: /* @__PURE__ */ __name(function pushState(condition) {\n        this.begin(condition);\n      }, \"pushState\"),\n      // return the number of states currently on the stack\n      stateStackSize: /* @__PURE__ */ __name(function stateStackSize() {\n        return this.conditionStack.length;\n      }, \"stateStackSize\"),\n      options: { \"case-insensitive\": true },\n      performAction: /* @__PURE__ */ __name(function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        var YYSTATE = YY_START;\n        switch ($avoiding_name_collisions) {\n          case 0:\n            yy.getLogger().trace(\"Found comment\", yy_.yytext);\n            return 6;\n            break;\n          case 1:\n            return 8;\n            break;\n          case 2:\n            this.begin(\"CLASS\");\n            break;\n          case 3:\n            this.popState();\n            return 16;\n            break;\n          case 4:\n            this.popState();\n            break;\n          case 5:\n            yy.getLogger().trace(\"Begin icon\");\n            this.begin(\"ICON\");\n            break;\n          case 6:\n            yy.getLogger().trace(\"SPACELINE\");\n            return 6;\n            break;\n          case 7:\n            return 7;\n            break;\n          case 8:\n            return 15;\n            break;\n          case 9:\n            yy.getLogger().trace(\"end icon\");\n            this.popState();\n            break;\n          case 10:\n            yy.getLogger().trace(\"Exploding node\");\n            this.begin(\"NODE\");\n            return 19;\n            break;\n          case 11:\n            yy.getLogger().trace(\"Cloud\");\n            this.begin(\"NODE\");\n            return 19;\n            break;\n          case 12:\n            yy.getLogger().trace(\"Explosion Bang\");\n            this.begin(\"NODE\");\n            return 19;\n            break;\n          case 13:\n            yy.getLogger().trace(\"Cloud Bang\");\n            this.begin(\"NODE\");\n            return 19;\n            break;\n          case 14:\n            this.begin(\"NODE\");\n            return 19;\n            break;\n          case 15:\n            this.begin(\"NODE\");\n            return 19;\n            break;\n          case 16:\n            this.begin(\"NODE\");\n            return 19;\n            break;\n          case 17:\n            this.begin(\"NODE\");\n            return 19;\n            break;\n          case 18:\n            return 13;\n            break;\n          case 19:\n            return 22;\n            break;\n          case 20:\n            return 11;\n            break;\n          case 21:\n            this.begin(\"NSTR2\");\n            break;\n          case 22:\n            return \"NODE_DESCR\";\n            break;\n          case 23:\n            this.popState();\n            break;\n          case 24:\n            yy.getLogger().trace(\"Starting NSTR\");\n            this.begin(\"NSTR\");\n            break;\n          case 25:\n            yy.getLogger().trace(\"description:\", yy_.yytext);\n            return \"NODE_DESCR\";\n            break;\n          case 26:\n            this.popState();\n            break;\n          case 27:\n            this.popState();\n            yy.getLogger().trace(\"node end ))\");\n            return \"NODE_DEND\";\n            break;\n          case 28:\n            this.popState();\n            yy.getLogger().trace(\"node end )\");\n            return \"NODE_DEND\";\n            break;\n          case 29:\n            this.popState();\n            yy.getLogger().trace(\"node end ...\", yy_.yytext);\n            return \"NODE_DEND\";\n            break;\n          case 30:\n            this.popState();\n            yy.getLogger().trace(\"node end ((\");\n            return \"NODE_DEND\";\n            break;\n          case 31:\n            this.popState();\n            yy.getLogger().trace(\"node end (-\");\n            return \"NODE_DEND\";\n            break;\n          case 32:\n            this.popState();\n            yy.getLogger().trace(\"node end (-\");\n            return \"NODE_DEND\";\n            break;\n          case 33:\n            this.popState();\n            yy.getLogger().trace(\"node end ((\");\n            return \"NODE_DEND\";\n            break;\n          case 34:\n            this.popState();\n            yy.getLogger().trace(\"node end ((\");\n            return \"NODE_DEND\";\n            break;\n          case 35:\n            yy.getLogger().trace(\"Long description:\", yy_.yytext);\n            return 20;\n            break;\n          case 36:\n            yy.getLogger().trace(\"Long description:\", yy_.yytext);\n            return 20;\n            break;\n        }\n      }, \"anonymous\"),\n      rules: [/^(?:\\s*%%.*)/i, /^(?:mindmap\\b)/i, /^(?::::)/i, /^(?:.+)/i, /^(?:\\n)/i, /^(?:::icon\\()/i, /^(?:[\\s]+[\\n])/i, /^(?:[\\n]+)/i, /^(?:[^\\)]+)/i, /^(?:\\))/i, /^(?:-\\))/i, /^(?:\\(-)/i, /^(?:\\)\\))/i, /^(?:\\))/i, /^(?:\\(\\()/i, /^(?:\\{\\{)/i, /^(?:\\()/i, /^(?:\\[)/i, /^(?:[\\s]+)/i, /^(?:[^\\(\\[\\n\\)\\{\\}]+)/i, /^(?:$)/i, /^(?:[\"][`])/i, /^(?:[^`\"]+)/i, /^(?:[`][\"])/i, /^(?:[\"])/i, /^(?:[^\"]+)/i, /^(?:[\"])/i, /^(?:[\\)]\\))/i, /^(?:[\\)])/i, /^(?:[\\]])/i, /^(?:\\}\\})/i, /^(?:\\(-)/i, /^(?:-\\))/i, /^(?:\\(\\()/i, /^(?:\\()/i, /^(?:[^\\)\\]\\(\\}]+)/i, /^(?:.+(?!\\(\\())/i],\n      conditions: { \"CLASS\": { \"rules\": [3, 4], \"inclusive\": false }, \"ICON\": { \"rules\": [8, 9], \"inclusive\": false }, \"NSTR2\": { \"rules\": [22, 23], \"inclusive\": false }, \"NSTR\": { \"rules\": [25, 26], \"inclusive\": false }, \"NODE\": { \"rules\": [21, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], \"inclusive\": false }, \"INITIAL\": { \"rules\": [0, 1, 2, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], \"inclusive\": true } }\n    };\n    return lexer2;\n  }();\n  parser2.lexer = lexer;\n  function Parser() {\n    this.yy = {};\n  }\n  __name(Parser, \"Parser\");\n  Parser.prototype = parser2;\n  parser2.Parser = Parser;\n  return new Parser();\n}();\nparser.parser = parser;\nvar mindmap_default = parser;\n\n// src/diagrams/mindmap/mindmapDb.ts\nvar nodes = [];\nvar cnt = 0;\nvar elements = {};\nvar clear = /* @__PURE__ */ __name(() => {\n  nodes = [];\n  cnt = 0;\n  elements = {};\n}, \"clear\");\nvar getParent = /* @__PURE__ */ __name(function(level) {\n  for (let i = nodes.length - 1; i >= 0; i--) {\n    if (nodes[i].level < level) {\n      return nodes[i];\n    }\n  }\n  return null;\n}, \"getParent\");\nvar getMindmap = /* @__PURE__ */ __name(() => {\n  return nodes.length > 0 ? nodes[0] : null;\n}, \"getMindmap\");\nvar addNode = /* @__PURE__ */ __name((level, id, descr, type) => {\n  log.info(\"addNode\", level, id, descr, type);\n  const conf = getConfig();\n  let padding = conf.mindmap?.padding ?? defaultConfig_default.mindmap.padding;\n  switch (type) {\n    case nodeType.ROUNDED_RECT:\n    case nodeType.RECT:\n    case nodeType.HEXAGON:\n      padding *= 2;\n  }\n  const node = {\n    id: cnt++,\n    nodeId: sanitizeText(id, conf),\n    level,\n    descr: sanitizeText(descr, conf),\n    type,\n    children: [],\n    width: conf.mindmap?.maxNodeWidth ?? defaultConfig_default.mindmap.maxNodeWidth,\n    padding\n  };\n  const parent = getParent(level);\n  if (parent) {\n    parent.children.push(node);\n    nodes.push(node);\n  } else {\n    if (nodes.length === 0) {\n      nodes.push(node);\n    } else {\n      throw new Error(\n        'There can be only one root. No parent could be found for (\"' + node.descr + '\")'\n      );\n    }\n  }\n}, \"addNode\");\nvar nodeType = {\n  DEFAULT: 0,\n  NO_BORDER: 0,\n  ROUNDED_RECT: 1,\n  RECT: 2,\n  CIRCLE: 3,\n  CLOUD: 4,\n  BANG: 5,\n  HEXAGON: 6\n};\nvar getType = /* @__PURE__ */ __name((startStr, endStr) => {\n  log.debug(\"In get type\", startStr, endStr);\n  switch (startStr) {\n    case \"[\":\n      return nodeType.RECT;\n    case \"(\":\n      return endStr === \")\" ? nodeType.ROUNDED_RECT : nodeType.CLOUD;\n    case \"((\":\n      return nodeType.CIRCLE;\n    case \")\":\n      return nodeType.CLOUD;\n    case \"))\":\n      return nodeType.BANG;\n    case \"{{\":\n      return nodeType.HEXAGON;\n    default:\n      return nodeType.DEFAULT;\n  }\n}, \"getType\");\nvar setElementForId = /* @__PURE__ */ __name((id, element) => {\n  elements[id] = element;\n}, \"setElementForId\");\nvar decorateNode = /* @__PURE__ */ __name((decoration) => {\n  if (!decoration) {\n    return;\n  }\n  const config = getConfig();\n  const node = nodes[nodes.length - 1];\n  if (decoration.icon) {\n    node.icon = sanitizeText(decoration.icon, config);\n  }\n  if (decoration.class) {\n    node.class = sanitizeText(decoration.class, config);\n  }\n}, \"decorateNode\");\nvar type2Str = /* @__PURE__ */ __name((type) => {\n  switch (type) {\n    case nodeType.DEFAULT:\n      return \"no-border\";\n    case nodeType.RECT:\n      return \"rect\";\n    case nodeType.ROUNDED_RECT:\n      return \"rounded-rect\";\n    case nodeType.CIRCLE:\n      return \"circle\";\n    case nodeType.CLOUD:\n      return \"cloud\";\n    case nodeType.BANG:\n      return \"bang\";\n    case nodeType.HEXAGON:\n      return \"hexgon\";\n    // cspell: disable-line\n    default:\n      return \"no-border\";\n  }\n}, \"type2Str\");\nvar getLogger = /* @__PURE__ */ __name(() => log, \"getLogger\");\nvar getElementById = /* @__PURE__ */ __name((id) => elements[id], \"getElementById\");\nvar db = {\n  clear,\n  addNode,\n  getMindmap,\n  nodeType,\n  getType,\n  setElementForId,\n  decorateNode,\n  type2Str,\n  getLogger,\n  getElementById\n};\nvar mindmapDb_default = db;\n\n// src/diagrams/mindmap/mindmapRenderer.ts\nvar import_cytoscape_cose_bilkent = __toESM(require_cytoscape_cose_bilkent(), 1);\n\n// src/diagrams/mindmap/svgDraw.ts\nvar MAX_SECTIONS = 12;\nvar defaultBkg = /* @__PURE__ */ __name(function(db2, elem, node, section) {\n  const rd = 5;\n  elem.append(\"path\").attr(\"id\", \"node-\" + node.id).attr(\"class\", \"node-bkg node-\" + db2.type2Str(node.type)).attr(\n    \"d\",\n    `M0 ${node.height - rd} v${-node.height + 2 * rd} q0,-5 5,-5 h${node.width - 2 * rd} q5,0 5,5 v${node.height - rd} H0 Z`\n  );\n  elem.append(\"line\").attr(\"class\", \"node-line-\" + section).attr(\"x1\", 0).attr(\"y1\", node.height).attr(\"x2\", node.width).attr(\"y2\", node.height);\n}, \"defaultBkg\");\nvar rectBkg = /* @__PURE__ */ __name(function(db2, elem, node) {\n  elem.append(\"rect\").attr(\"id\", \"node-\" + node.id).attr(\"class\", \"node-bkg node-\" + db2.type2Str(node.type)).attr(\"height\", node.height).attr(\"width\", node.width);\n}, \"rectBkg\");\nvar cloudBkg = /* @__PURE__ */ __name(function(db2, elem, node) {\n  const w = node.width;\n  const h = node.height;\n  const r1 = 0.15 * w;\n  const r2 = 0.25 * w;\n  const r3 = 0.35 * w;\n  const r4 = 0.2 * w;\n  elem.append(\"path\").attr(\"id\", \"node-\" + node.id).attr(\"class\", \"node-bkg node-\" + db2.type2Str(node.type)).attr(\n    \"d\",\n    `M0 0 a${r1},${r1} 0 0,1 ${w * 0.25},${-1 * w * 0.1}\n      a${r3},${r3} 1 0,1 ${w * 0.4},${-1 * w * 0.1}\n      a${r2},${r2} 1 0,1 ${w * 0.35},${1 * w * 0.2}\n\n      a${r1},${r1} 1 0,1 ${w * 0.15},${1 * h * 0.35}\n      a${r4},${r4} 1 0,1 ${-1 * w * 0.15},${1 * h * 0.65}\n\n      a${r2},${r1} 1 0,1 ${-1 * w * 0.25},${w * 0.15}\n      a${r3},${r3} 1 0,1 ${-1 * w * 0.5},${0}\n      a${r1},${r1} 1 0,1 ${-1 * w * 0.25},${-1 * w * 0.15}\n\n      a${r1},${r1} 1 0,1 ${-1 * w * 0.1},${-1 * h * 0.35}\n      a${r4},${r4} 1 0,1 ${w * 0.1},${-1 * h * 0.65}\n\n    H0 V0 Z`\n  );\n}, \"cloudBkg\");\nvar bangBkg = /* @__PURE__ */ __name(function(db2, elem, node) {\n  const w = node.width;\n  const h = node.height;\n  const r = 0.15 * w;\n  elem.append(\"path\").attr(\"id\", \"node-\" + node.id).attr(\"class\", \"node-bkg node-\" + db2.type2Str(node.type)).attr(\n    \"d\",\n    `M0 0 a${r},${r} 1 0,0 ${w * 0.25},${-1 * h * 0.1}\n      a${r},${r} 1 0,0 ${w * 0.25},${0}\n      a${r},${r} 1 0,0 ${w * 0.25},${0}\n      a${r},${r} 1 0,0 ${w * 0.25},${1 * h * 0.1}\n\n      a${r},${r} 1 0,0 ${w * 0.15},${1 * h * 0.33}\n      a${r * 0.8},${r * 0.8} 1 0,0 ${0},${1 * h * 0.34}\n      a${r},${r} 1 0,0 ${-1 * w * 0.15},${1 * h * 0.33}\n\n      a${r},${r} 1 0,0 ${-1 * w * 0.25},${h * 0.15}\n      a${r},${r} 1 0,0 ${-1 * w * 0.25},${0}\n      a${r},${r} 1 0,0 ${-1 * w * 0.25},${0}\n      a${r},${r} 1 0,0 ${-1 * w * 0.25},${-1 * h * 0.15}\n\n      a${r},${r} 1 0,0 ${-1 * w * 0.1},${-1 * h * 0.33}\n      a${r * 0.8},${r * 0.8} 1 0,0 ${0},${-1 * h * 0.34}\n      a${r},${r} 1 0,0 ${w * 0.1},${-1 * h * 0.33}\n\n    H0 V0 Z`\n  );\n}, \"bangBkg\");\nvar circleBkg = /* @__PURE__ */ __name(function(db2, elem, node) {\n  elem.append(\"circle\").attr(\"id\", \"node-\" + node.id).attr(\"class\", \"node-bkg node-\" + db2.type2Str(node.type)).attr(\"r\", node.width / 2);\n}, \"circleBkg\");\nfunction insertPolygonShape(parent, w, h, points, node) {\n  return parent.insert(\"polygon\", \":first-child\").attr(\n    \"points\",\n    points.map(function(d) {\n      return d.x + \",\" + d.y;\n    }).join(\" \")\n  ).attr(\"transform\", \"translate(\" + (node.width - w) / 2 + \", \" + h + \")\");\n}\n__name(insertPolygonShape, \"insertPolygonShape\");\nvar hexagonBkg = /* @__PURE__ */ __name(function(_db, elem, node) {\n  const h = node.height;\n  const f = 4;\n  const m = h / f;\n  const w = node.width - node.padding + 2 * m;\n  const points = [\n    { x: m, y: 0 },\n    { x: w - m, y: 0 },\n    { x: w, y: -h / 2 },\n    { x: w - m, y: -h },\n    { x: m, y: -h },\n    { x: 0, y: -h / 2 }\n  ];\n  insertPolygonShape(elem, w, h, points, node);\n}, \"hexagonBkg\");\nvar roundedRectBkg = /* @__PURE__ */ __name(function(db2, elem, node) {\n  elem.append(\"rect\").attr(\"id\", \"node-\" + node.id).attr(\"class\", \"node-bkg node-\" + db2.type2Str(node.type)).attr(\"height\", node.height).attr(\"rx\", node.padding).attr(\"ry\", node.padding).attr(\"width\", node.width);\n}, \"roundedRectBkg\");\nvar drawNode = /* @__PURE__ */ __name(async function(db2, elem, node, fullSection, conf) {\n  const htmlLabels = conf.htmlLabels;\n  const section = fullSection % (MAX_SECTIONS - 1);\n  const nodeElem = elem.append(\"g\");\n  node.section = section;\n  let sectionClass = \"section-\" + section;\n  if (section < 0) {\n    sectionClass += \" section-root\";\n  }\n  nodeElem.attr(\"class\", (node.class ? node.class + \" \" : \"\") + \"mindmap-node \" + sectionClass);\n  const bkgElem = nodeElem.append(\"g\");\n  const textElem = nodeElem.append(\"g\");\n  const description = node.descr.replace(/(<br\\/*>)/g, \"\\n\");\n  await createText(\n    textElem,\n    description,\n    {\n      useHtmlLabels: htmlLabels,\n      width: node.width,\n      classes: \"mindmap-node-label\"\n    },\n    conf\n  );\n  if (!htmlLabels) {\n    textElem.attr(\"dy\", \"1em\").attr(\"alignment-baseline\", \"middle\").attr(\"dominant-baseline\", \"middle\").attr(\"text-anchor\", \"middle\");\n  }\n  const bbox = textElem.node().getBBox();\n  const [fontSize] = parseFontSize(conf.fontSize);\n  node.height = bbox.height + fontSize * 1.1 * 0.5 + node.padding;\n  node.width = bbox.width + 2 * node.padding;\n  if (node.icon) {\n    if (node.type === db2.nodeType.CIRCLE) {\n      node.height += 50;\n      node.width += 50;\n      const icon = nodeElem.append(\"foreignObject\").attr(\"height\", \"50px\").attr(\"width\", node.width).attr(\"style\", \"text-align: center;\");\n      icon.append(\"div\").attr(\"class\", \"icon-container\").append(\"i\").attr(\"class\", \"node-icon-\" + section + \" \" + node.icon);\n      textElem.attr(\n        \"transform\",\n        \"translate(\" + node.width / 2 + \", \" + (node.height / 2 - 1.5 * node.padding) + \")\"\n      );\n    } else {\n      node.width += 50;\n      const orgHeight = node.height;\n      node.height = Math.max(orgHeight, 60);\n      const heightDiff = Math.abs(node.height - orgHeight);\n      const icon = nodeElem.append(\"foreignObject\").attr(\"width\", \"60px\").attr(\"height\", node.height).attr(\"style\", \"text-align: center;margin-top:\" + heightDiff / 2 + \"px;\");\n      icon.append(\"div\").attr(\"class\", \"icon-container\").append(\"i\").attr(\"class\", \"node-icon-\" + section + \" \" + node.icon);\n      textElem.attr(\n        \"transform\",\n        \"translate(\" + (25 + node.width / 2) + \", \" + (heightDiff / 2 + node.padding / 2) + \")\"\n      );\n    }\n  } else {\n    if (!htmlLabels) {\n      const dx = node.width / 2;\n      const dy = node.padding / 2;\n      textElem.attr(\"transform\", \"translate(\" + dx + \", \" + dy + \")\");\n    } else {\n      const dx = (node.width - bbox.width) / 2;\n      const dy = (node.height - bbox.height) / 2;\n      textElem.attr(\"transform\", \"translate(\" + dx + \", \" + dy + \")\");\n    }\n  }\n  switch (node.type) {\n    case db2.nodeType.DEFAULT:\n      defaultBkg(db2, bkgElem, node, section);\n      break;\n    case db2.nodeType.ROUNDED_RECT:\n      roundedRectBkg(db2, bkgElem, node, section);\n      break;\n    case db2.nodeType.RECT:\n      rectBkg(db2, bkgElem, node, section);\n      break;\n    case db2.nodeType.CIRCLE:\n      bkgElem.attr(\"transform\", \"translate(\" + node.width / 2 + \", \" + +node.height / 2 + \")\");\n      circleBkg(db2, bkgElem, node, section);\n      break;\n    case db2.nodeType.CLOUD:\n      cloudBkg(db2, bkgElem, node, section);\n      break;\n    case db2.nodeType.BANG:\n      bangBkg(db2, bkgElem, node, section);\n      break;\n    case db2.nodeType.HEXAGON:\n      hexagonBkg(db2, bkgElem, node, section);\n      break;\n  }\n  db2.setElementForId(node.id, nodeElem);\n  return node.height;\n}, \"drawNode\");\nvar positionNode = /* @__PURE__ */ __name(function(db2, node) {\n  const nodeElem = db2.getElementById(node.id);\n  const x = node.x || 0;\n  const y = node.y || 0;\n  nodeElem.attr(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n}, \"positionNode\");\n\n// src/diagrams/mindmap/mindmapRenderer.ts\ncytoscape2.use(import_cytoscape_cose_bilkent.default);\nasync function drawNodes(db2, svg, mindmap, section, conf) {\n  await drawNode(db2, svg, mindmap, section, conf);\n  if (mindmap.children) {\n    await Promise.all(\n      mindmap.children.map(\n        (child, index) => drawNodes(db2, svg, child, section < 0 ? index : section, conf)\n      )\n    );\n  }\n}\n__name(drawNodes, \"drawNodes\");\nfunction drawEdges(edgesEl, cy) {\n  cy.edges().map((edge, id) => {\n    const data = edge.data();\n    if (edge[0]._private.bodyBounds) {\n      const bounds = edge[0]._private.rscratch;\n      log.trace(\"Edge: \", id, data);\n      edgesEl.insert(\"path\").attr(\n        \"d\",\n        `M ${bounds.startX},${bounds.startY} L ${bounds.midX},${bounds.midY} L${bounds.endX},${bounds.endY} `\n      ).attr(\"class\", \"edge section-edge-\" + data.section + \" edge-depth-\" + data.depth);\n    }\n  });\n}\n__name(drawEdges, \"drawEdges\");\nfunction addNodes(mindmap, cy, conf, level) {\n  cy.add({\n    group: \"nodes\",\n    data: {\n      id: mindmap.id.toString(),\n      labelText: mindmap.descr,\n      height: mindmap.height,\n      width: mindmap.width,\n      level,\n      nodeId: mindmap.id,\n      padding: mindmap.padding,\n      type: mindmap.type\n    },\n    position: {\n      x: mindmap.x,\n      y: mindmap.y\n    }\n  });\n  if (mindmap.children) {\n    mindmap.children.forEach((child) => {\n      addNodes(child, cy, conf, level + 1);\n      cy.add({\n        group: \"edges\",\n        data: {\n          id: `${mindmap.id}_${child.id}`,\n          source: mindmap.id,\n          target: child.id,\n          depth: level,\n          section: child.section\n        }\n      });\n    });\n  }\n}\n__name(addNodes, \"addNodes\");\nfunction layoutMindmap(node, conf) {\n  return new Promise((resolve) => {\n    const renderEl = select_default(\"body\").append(\"div\").attr(\"id\", \"cy\").attr(\"style\", \"display:none\");\n    const cy = cytoscape2({\n      container: document.getElementById(\"cy\"),\n      // container to render in\n      style: [\n        {\n          selector: \"edge\",\n          style: {\n            \"curve-style\": \"bezier\"\n          }\n        }\n      ]\n    });\n    renderEl.remove();\n    addNodes(node, cy, conf, 0);\n    cy.nodes().forEach(function(n) {\n      n.layoutDimensions = () => {\n        const data = n.data();\n        return { w: data.width, h: data.height };\n      };\n    });\n    cy.layout({\n      name: \"cose-bilkent\",\n      // @ts-ignore Types for cose-bilkent are not correct?\n      quality: \"proof\",\n      styleEnabled: false,\n      animate: false\n    }).run();\n    cy.ready((e) => {\n      log.info(\"Ready\", e);\n      resolve(cy);\n    });\n  });\n}\n__name(layoutMindmap, \"layoutMindmap\");\nfunction positionNodes(db2, cy) {\n  cy.nodes().map((node, id) => {\n    const data = node.data();\n    data.x = node.position().x;\n    data.y = node.position().y;\n    positionNode(db2, data);\n    const el = db2.getElementById(data.nodeId);\n    log.info(\"Id:\", id, \"Position: (\", node.position().x, \", \", node.position().y, \")\", data);\n    el.attr(\n      \"transform\",\n      `translate(${node.position().x - data.width / 2}, ${node.position().y - data.height / 2})`\n    );\n    el.attr(\"attr\", `apa-${id})`);\n  });\n}\n__name(positionNodes, \"positionNodes\");\nvar draw = /* @__PURE__ */ __name(async (text, id, _version, diagObj) => {\n  log.debug(\"Rendering mindmap diagram\\n\" + text);\n  const db2 = diagObj.db;\n  const mm = db2.getMindmap();\n  if (!mm) {\n    return;\n  }\n  const conf = getConfig();\n  conf.htmlLabels = false;\n  const svg = selectSvgElement(id);\n  const edgesElem = svg.append(\"g\");\n  edgesElem.attr(\"class\", \"mindmap-edges\");\n  const nodesElem = svg.append(\"g\");\n  nodesElem.attr(\"class\", \"mindmap-nodes\");\n  await drawNodes(db2, nodesElem, mm, -1, conf);\n  const cy = await layoutMindmap(mm, conf);\n  drawEdges(edgesElem, cy);\n  positionNodes(db2, cy);\n  setupGraphViewbox(\n    void 0,\n    svg,\n    conf.mindmap?.padding ?? defaultConfig_default.mindmap.padding,\n    conf.mindmap?.useMaxWidth ?? defaultConfig_default.mindmap.useMaxWidth\n  );\n}, \"draw\");\nvar mindmapRenderer_default = {\n  draw\n};\n\n// src/diagrams/mindmap/styles.ts\nvar genSections = /* @__PURE__ */ __name((options) => {\n  let sections = \"\";\n  for (let i = 0; i < options.THEME_COLOR_LIMIT; i++) {\n    options[\"lineColor\" + i] = options[\"lineColor\" + i] || options[\"cScaleInv\" + i];\n    if (is_dark_default(options[\"lineColor\" + i])) {\n      options[\"lineColor\" + i] = lighten_default(options[\"lineColor\" + i], 20);\n    } else {\n      options[\"lineColor\" + i] = darken_default(options[\"lineColor\" + i], 20);\n    }\n  }\n  for (let i = 0; i < options.THEME_COLOR_LIMIT; i++) {\n    const sw = \"\" + (17 - 3 * i);\n    sections += `\n    .section-${i - 1} rect, .section-${i - 1} path, .section-${i - 1} circle, .section-${i - 1} polygon, .section-${i - 1} path  {\n      fill: ${options[\"cScale\" + i]};\n    }\n    .section-${i - 1} text {\n     fill: ${options[\"cScaleLabel\" + i]};\n    }\n    .node-icon-${i - 1} {\n      font-size: 40px;\n      color: ${options[\"cScaleLabel\" + i]};\n    }\n    .section-edge-${i - 1}{\n      stroke: ${options[\"cScale\" + i]};\n    }\n    .edge-depth-${i - 1}{\n      stroke-width: ${sw};\n    }\n    .section-${i - 1} line {\n      stroke: ${options[\"cScaleInv\" + i]} ;\n      stroke-width: 3;\n    }\n\n    .disabled, .disabled circle, .disabled text {\n      fill: lightgray;\n    }\n    .disabled text {\n      fill: #efefef;\n    }\n    `;\n  }\n  return sections;\n}, \"genSections\");\nvar getStyles = /* @__PURE__ */ __name((options) => `\n  .edge {\n    stroke-width: 3;\n  }\n  ${genSections(options)}\n  .section-root rect, .section-root path, .section-root circle, .section-root polygon  {\n    fill: ${options.git0};\n  }\n  .section-root text {\n    fill: ${options.gitBranchLabel0};\n  }\n  .icon-container {\n    height:100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  .edge {\n    fill: none;\n  }\n  .mindmap-node-label {\n    dy: 1em;\n    alignment-baseline: middle;\n    text-anchor: middle;\n    dominant-baseline: middle;\n    text-align: center;\n  }\n`, \"getStyles\");\nvar styles_default = getStyles;\n\n// src/diagrams/mindmap/mindmap-definition.ts\nvar diagram = {\n  db: mindmapDb_default,\n  renderer: mindmapRenderer_default,\n  parser: mindmap_default,\n  styles: styles_default\n};\nexport {\n  diagram\n};\n",
      "start": 1743409709074,
      "end": 1743409709191,
      "sourcemaps": null
    },
    {
      "name": "unplugin-vue-markdown",
      "start": 1743409709191,
      "end": 1743409709191,
      "order": "pre"
    },
    {
      "name": "slidev:flags",
      "start": 1743409709191,
      "end": 1743409709191,
      "order": "pre"
    },
    {
      "name": "unocss:transformers:pre",
      "start": 1743409709191,
      "end": 1743409709192,
      "order": "pre"
    },
    {
      "name": "unocss:global:build:scan",
      "start": 1743409709192,
      "end": 1743409709192,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1743409709192,
      "end": 1743409709192,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1743409709192,
      "end": 1743409709192,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1743409709192,
      "end": 1743409709192,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1743409709192,
      "end": 1743409709192,
      "order": "normal"
    },
    {
      "name": "slidev:layout-wrapper",
      "start": 1743409709192,
      "end": 1743409709192,
      "order": "normal"
    },
    {
      "name": "slidev:context-injection",
      "start": 1743409709192,
      "end": 1743409709192,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1743409709192,
      "end": 1743409709192,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1743409709192,
      "end": 1743409709192,
      "order": "normal"
    },
    {
      "name": "slidev:hmr-patch",
      "start": 1743409709192,
      "end": 1743409709192,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:undefined",
      "start": 1743409709192,
      "end": 1743409709192,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1743409709192,
      "end": 1743409709192,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1743409709192,
      "end": 1743409709192,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1743409709192,
      "end": 1743409709192,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1743409709192,
      "end": 1743409709192,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1743409709192,
      "end": 1743409709193,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1743409709193,
      "end": 1743409709193,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1743409709193,
      "end": 1743409709193,
      "order": "normal"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1743409709193,
      "end": 1743409709193,
      "order": "post"
    },
    {
      "name": "unocss:transformers:post",
      "start": 1743409709193,
      "end": 1743409709193,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1743409709193,
      "end": 1743409709193,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1743409709193,
      "end": 1743409709193,
      "order": "normal"
    }
  ]
}
