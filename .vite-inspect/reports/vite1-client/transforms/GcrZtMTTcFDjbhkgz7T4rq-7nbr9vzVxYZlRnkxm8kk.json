{
  "resolvedId": "/Users/stevenhill/gce_git_tutorial/node_modules/yaml/browser/dist/compose/resolve-block-map.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { Pair } from '../nodes/Pair.js';\nimport { YAMLMap } from '../nodes/YAMLMap.js';\nimport { resolveProps } from './resolve-props.js';\nimport { containsNewline } from './util-contains-newline.js';\nimport { flowIndentCheck } from './util-flow-indent-check.js';\nimport { mapIncludes } from './util-map-includes.js';\n\nconst startColMsg = 'All mapping items must start at the same column';\nfunction resolveBlockMap({ composeNode, composeEmptyNode }, ctx, bm, onError, tag) {\n    const NodeClass = tag?.nodeClass ?? YAMLMap;\n    const map = new NodeClass(ctx.schema);\n    if (ctx.atRoot)\n        ctx.atRoot = false;\n    let offset = bm.offset;\n    let commentEnd = null;\n    for (const collItem of bm.items) {\n        const { start, key, sep, value } = collItem;\n        // key properties\n        const keyProps = resolveProps(start, {\n            indicator: 'explicit-key-ind',\n            next: key ?? sep?.[0],\n            offset,\n            onError,\n            parentIndent: bm.indent,\n            startOnNewline: true\n        });\n        const implicitKey = !keyProps.found;\n        if (implicitKey) {\n            if (key) {\n                if (key.type === 'block-seq')\n                    onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'A block sequence may not be used as an implicit map key');\n                else if ('indent' in key && key.indent !== bm.indent)\n                    onError(offset, 'BAD_INDENT', startColMsg);\n            }\n            if (!keyProps.anchor && !keyProps.tag && !sep) {\n                commentEnd = keyProps.end;\n                if (keyProps.comment) {\n                    if (map.comment)\n                        map.comment += '\\n' + keyProps.comment;\n                    else\n                        map.comment = keyProps.comment;\n                }\n                continue;\n            }\n            if (keyProps.newlineAfterProp || containsNewline(key)) {\n                onError(key ?? start[start.length - 1], 'MULTILINE_IMPLICIT_KEY', 'Implicit keys need to be on a single line');\n            }\n        }\n        else if (keyProps.found?.indent !== bm.indent) {\n            onError(offset, 'BAD_INDENT', startColMsg);\n        }\n        // key value\n        ctx.atKey = true;\n        const keyStart = keyProps.end;\n        const keyNode = key\n            ? composeNode(ctx, key, keyProps, onError)\n            : composeEmptyNode(ctx, keyStart, start, null, keyProps, onError);\n        if (ctx.schema.compat)\n            flowIndentCheck(bm.indent, key, onError);\n        ctx.atKey = false;\n        if (mapIncludes(ctx, map.items, keyNode))\n            onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');\n        // value properties\n        const valueProps = resolveProps(sep ?? [], {\n            indicator: 'map-value-ind',\n            next: value,\n            offset: keyNode.range[2],\n            onError,\n            parentIndent: bm.indent,\n            startOnNewline: !key || key.type === 'block-scalar'\n        });\n        offset = valueProps.end;\n        if (valueProps.found) {\n            if (implicitKey) {\n                if (value?.type === 'block-map' && !valueProps.hasNewline)\n                    onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'Nested mappings are not allowed in compact mappings');\n                if (ctx.options.strict &&\n                    keyProps.start < valueProps.found.offset - 1024)\n                    onError(keyNode.range, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit block mapping key');\n            }\n            // value value\n            const valueNode = value\n                ? composeNode(ctx, value, valueProps, onError)\n                : composeEmptyNode(ctx, offset, sep, null, valueProps, onError);\n            if (ctx.schema.compat)\n                flowIndentCheck(bm.indent, value, onError);\n            offset = valueNode.range[2];\n            const pair = new Pair(keyNode, valueNode);\n            if (ctx.options.keepSourceTokens)\n                pair.srcToken = collItem;\n            map.items.push(pair);\n        }\n        else {\n            // key with no value\n            if (implicitKey)\n                onError(keyNode.range, 'MISSING_CHAR', 'Implicit map keys need to be followed by map values');\n            if (valueProps.comment) {\n                if (keyNode.comment)\n                    keyNode.comment += '\\n' + valueProps.comment;\n                else\n                    keyNode.comment = valueProps.comment;\n            }\n            const pair = new Pair(keyNode);\n            if (ctx.options.keepSourceTokens)\n                pair.srcToken = collItem;\n            map.items.push(pair);\n        }\n    }\n    if (commentEnd && commentEnd < offset)\n        onError(commentEnd, 'IMPOSSIBLE', 'Map comment with trailing content');\n    map.range = [bm.offset, offset, commentEnd ?? offset];\n    return map;\n}\n\nexport { resolveBlockMap };\n",
      "start": 1743409708672,
      "end": 1743409708680,
      "sourcemaps": null
    },
    {
      "name": "unplugin-vue-markdown",
      "start": 1743409708680,
      "end": 1743409708680,
      "order": "pre"
    },
    {
      "name": "slidev:flags",
      "start": 1743409708680,
      "end": 1743409708680,
      "order": "pre"
    },
    {
      "name": "unocss:transformers:pre",
      "start": 1743409708680,
      "end": 1743409708680,
      "order": "pre"
    },
    {
      "name": "unocss:global:build:scan",
      "start": 1743409708680,
      "end": 1743409708680,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1743409708680,
      "end": 1743409708680,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1743409708680,
      "end": 1743409708680,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1743409708680,
      "end": 1743409708680,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1743409708680,
      "end": 1743409708680,
      "order": "normal"
    },
    {
      "name": "slidev:layout-wrapper",
      "start": 1743409708680,
      "end": 1743409708680,
      "order": "normal"
    },
    {
      "name": "slidev:context-injection",
      "start": 1743409708680,
      "end": 1743409708680,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1743409708680,
      "end": 1743409708680,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1743409708680,
      "end": 1743409708680,
      "order": "normal"
    },
    {
      "name": "slidev:hmr-patch",
      "start": 1743409708680,
      "end": 1743409708680,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:undefined",
      "start": 1743409708680,
      "end": 1743409708680,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1743409708680,
      "end": 1743409708680,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1743409708680,
      "end": 1743409708680,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1743409708680,
      "end": 1743409708680,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1743409708680,
      "end": 1743409708680,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1743409708680,
      "end": 1743409708680,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1743409708680,
      "end": 1743409708680,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1743409708680,
      "end": 1743409708680,
      "order": "normal"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1743409708680,
      "end": 1743409708680,
      "order": "post"
    },
    {
      "name": "unocss:transformers:post",
      "start": 1743409708680,
      "end": 1743409708680,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1743409708680,
      "end": 1743409708680,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1743409708680,
      "end": 1743409708680,
      "order": "normal"
    }
  ]
}
